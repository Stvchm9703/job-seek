// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: prediction.proto

package protos

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===========================
// PredictionService Interface
// ===========================

type PredictionService interface {
	// rpc SurveyUserPersona() returns (UserResponse);
	SurveyUserPerfence(context.Context, *SurveyUserPerfenceRequest) (*UserResponse, error)

	GetSurveyJob(context.Context, *GetSurveyJobRequest) (*GetSurveyJobResponse, error)

	SurveyJobPerfence(context.Context, *SurveyJobPerfenceRequest) (*UserResponse, error)

	PredictJobMatchScore(context.Context, *JobMatchScore) (*JobMatchScore, error)

	ExtractJobKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error)

	ExtractUserProfileKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error)

	GenerateCoverLetter(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error)

	GenerateCV(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error)
}

// =================================
// PredictionService Protobuf Client
// =================================

type predictionServiceProtobufClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPredictionServiceProtobufClient creates a Protobuf client that implements the PredictionService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPredictionServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PredictionService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.prediction", "PredictionService")
	urls := [8]string{
		serviceURL + "SurveyUserPerfence",
		serviceURL + "GetSurveyJob",
		serviceURL + "SurveyJobPerfence",
		serviceURL + "PredictJobMatchScore",
		serviceURL + "ExtractJobKeywords",
		serviceURL + "ExtractUserProfileKeywords",
		serviceURL + "GenerateCoverLetter",
		serviceURL + "GenerateCV",
	}

	return &predictionServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *predictionServiceProtobufClient) SurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "SurveyUserPerfence")
	caller := c.callSurveyUserPerfence
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SurveyUserPerfenceRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyUserPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyUserPerfenceRequest) when calling interceptor")
					}
					return c.callSurveyUserPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callSurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) GetSurveyJob(ctx context.Context, in *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSurveyJob")
	caller := c.callGetSurveyJob
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSurveyJobRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSurveyJobRequest) when calling interceptor")
					}
					return c.callGetSurveyJob(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSurveyJobResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSurveyJobResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callGetSurveyJob(ctx context.Context, in *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
	out := new(GetSurveyJobResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) SurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "SurveyJobPerfence")
	caller := c.callSurveyJobPerfence
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SurveyJobPerfenceRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyJobPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyJobPerfenceRequest) when calling interceptor")
					}
					return c.callSurveyJobPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callSurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) PredictJobMatchScore(ctx context.Context, in *JobMatchScore) (*JobMatchScore, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "PredictJobMatchScore")
	caller := c.callPredictJobMatchScore
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobMatchScore) (*JobMatchScore, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobMatchScore)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobMatchScore) when calling interceptor")
					}
					return c.callPredictJobMatchScore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobMatchScore)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobMatchScore) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callPredictJobMatchScore(ctx context.Context, in *JobMatchScore) (*JobMatchScore, error) {
	out := new(JobMatchScore)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) ExtractJobKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "ExtractJobKeywords")
	caller := c.callExtractJobKeywords
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return c.callExtractJobKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callExtractJobKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	out := new(ExtractKeywords)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) ExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "ExtractUserProfileKeywords")
	caller := c.callExtractUserProfileKeywords
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return c.callExtractUserProfileKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	out := new(ExtractKeywords)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) GenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCoverLetter")
	caller := c.callGenerateCoverLetter
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return c.callGenerateCoverLetter(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callGenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	out := new(GenerateCoverLetterResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceProtobufClient) GenerateCV(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCV")
	caller := c.callGenerateCV
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return c.callGenerateCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceProtobufClient) callGenerateCV(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	out := new(GenerateCoverLetterResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// PredictionService JSON Client
// =============================

type predictionServiceJSONClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPredictionServiceJSONClient creates a JSON client that implements the PredictionService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPredictionServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PredictionService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.prediction", "PredictionService")
	urls := [8]string{
		serviceURL + "SurveyUserPerfence",
		serviceURL + "GetSurveyJob",
		serviceURL + "SurveyJobPerfence",
		serviceURL + "PredictJobMatchScore",
		serviceURL + "ExtractJobKeywords",
		serviceURL + "ExtractUserProfileKeywords",
		serviceURL + "GenerateCoverLetter",
		serviceURL + "GenerateCV",
	}

	return &predictionServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *predictionServiceJSONClient) SurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "SurveyUserPerfence")
	caller := c.callSurveyUserPerfence
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SurveyUserPerfenceRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyUserPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyUserPerfenceRequest) when calling interceptor")
					}
					return c.callSurveyUserPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callSurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) GetSurveyJob(ctx context.Context, in *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSurveyJob")
	caller := c.callGetSurveyJob
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSurveyJobRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSurveyJobRequest) when calling interceptor")
					}
					return c.callGetSurveyJob(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSurveyJobResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSurveyJobResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callGetSurveyJob(ctx context.Context, in *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
	out := new(GetSurveyJobResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) SurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "SurveyJobPerfence")
	caller := c.callSurveyJobPerfence
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SurveyJobPerfenceRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyJobPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyJobPerfenceRequest) when calling interceptor")
					}
					return c.callSurveyJobPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callSurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) PredictJobMatchScore(ctx context.Context, in *JobMatchScore) (*JobMatchScore, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "PredictJobMatchScore")
	caller := c.callPredictJobMatchScore
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobMatchScore) (*JobMatchScore, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobMatchScore)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobMatchScore) when calling interceptor")
					}
					return c.callPredictJobMatchScore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobMatchScore)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobMatchScore) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callPredictJobMatchScore(ctx context.Context, in *JobMatchScore) (*JobMatchScore, error) {
	out := new(JobMatchScore)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) ExtractJobKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "ExtractJobKeywords")
	caller := c.callExtractJobKeywords
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return c.callExtractJobKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callExtractJobKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	out := new(ExtractKeywords)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) ExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "ExtractUserProfileKeywords")
	caller := c.callExtractUserProfileKeywords
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return c.callExtractUserProfileKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords) (*ExtractKeywords, error) {
	out := new(ExtractKeywords)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) GenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCoverLetter")
	caller := c.callGenerateCoverLetter
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return c.callGenerateCoverLetter(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callGenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	out := new(GenerateCoverLetterResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *predictionServiceJSONClient) GenerateCV(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCV")
	caller := c.callGenerateCV
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return c.callGenerateCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *predictionServiceJSONClient) callGenerateCV(ctx context.Context, in *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	out := new(GenerateCoverLetterResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ================================
// PredictionService Server Handler
// ================================

type predictionServiceServer struct {
	PredictionService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewPredictionServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPredictionServiceServer(svc PredictionService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &predictionServiceServer{
		PredictionService: svc,
		hooks:             serverOpts.Hooks,
		interceptor:       twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:        pathPrefix,
		jsonSkipDefaults:  jsonSkipDefaults,
		jsonCamelCase:     jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *predictionServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *predictionServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PredictionServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PredictionServicePathPrefix = "/twirp/job_seek.prediction.PredictionService/"

func (s *predictionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.prediction")
	ctx = ctxsetters.WithServiceName(ctx, "PredictionService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "job_seek.prediction.PredictionService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "SurveyUserPerfence":
		s.serveSurveyUserPerfence(ctx, resp, req)
		return
	case "GetSurveyJob":
		s.serveGetSurveyJob(ctx, resp, req)
		return
	case "SurveyJobPerfence":
		s.serveSurveyJobPerfence(ctx, resp, req)
		return
	case "PredictJobMatchScore":
		s.servePredictJobMatchScore(ctx, resp, req)
		return
	case "ExtractJobKeywords":
		s.serveExtractJobKeywords(ctx, resp, req)
		return
	case "ExtractUserProfileKeywords":
		s.serveExtractUserProfileKeywords(ctx, resp, req)
		return
	case "GenerateCoverLetter":
		s.serveGenerateCoverLetter(ctx, resp, req)
		return
	case "GenerateCV":
		s.serveGenerateCV(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *predictionServiceServer) serveSurveyUserPerfence(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSurveyUserPerfenceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSurveyUserPerfenceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveSurveyUserPerfenceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SurveyUserPerfence")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SurveyUserPerfenceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.SurveyUserPerfence
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SurveyUserPerfenceRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyUserPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyUserPerfenceRequest) when calling interceptor")
					}
					return s.PredictionService.SurveyUserPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling SurveyUserPerfence. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveSurveyUserPerfenceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SurveyUserPerfence")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SurveyUserPerfenceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.SurveyUserPerfence
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SurveyUserPerfenceRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyUserPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyUserPerfenceRequest) when calling interceptor")
					}
					return s.PredictionService.SurveyUserPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling SurveyUserPerfence. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGetSurveyJob(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSurveyJobJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSurveyJobProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveGetSurveyJobJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSurveyJob")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSurveyJobRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.GetSurveyJob
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSurveyJobRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSurveyJobRequest) when calling interceptor")
					}
					return s.PredictionService.GetSurveyJob(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSurveyJobResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSurveyJobResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSurveyJobResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSurveyJobResponse and nil error while calling GetSurveyJob. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGetSurveyJobProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSurveyJob")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSurveyJobRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.GetSurveyJob
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSurveyJobRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSurveyJobRequest) when calling interceptor")
					}
					return s.PredictionService.GetSurveyJob(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSurveyJobResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSurveyJobResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSurveyJobResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSurveyJobResponse and nil error while calling GetSurveyJob. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveSurveyJobPerfence(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSurveyJobPerfenceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSurveyJobPerfenceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveSurveyJobPerfenceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SurveyJobPerfence")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SurveyJobPerfenceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.SurveyJobPerfence
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SurveyJobPerfenceRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyJobPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyJobPerfenceRequest) when calling interceptor")
					}
					return s.PredictionService.SurveyJobPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling SurveyJobPerfence. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveSurveyJobPerfenceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SurveyJobPerfence")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SurveyJobPerfenceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.SurveyJobPerfence
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SurveyJobPerfenceRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SurveyJobPerfenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SurveyJobPerfenceRequest) when calling interceptor")
					}
					return s.PredictionService.SurveyJobPerfence(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling SurveyJobPerfence. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) servePredictJobMatchScore(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePredictJobMatchScoreJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePredictJobMatchScoreProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) servePredictJobMatchScoreJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PredictJobMatchScore")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JobMatchScore)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.PredictJobMatchScore
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobMatchScore) (*JobMatchScore, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobMatchScore)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobMatchScore) when calling interceptor")
					}
					return s.PredictionService.PredictJobMatchScore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobMatchScore)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobMatchScore) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobMatchScore
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobMatchScore and nil error while calling PredictJobMatchScore. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) servePredictJobMatchScoreProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PredictJobMatchScore")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JobMatchScore)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.PredictJobMatchScore
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobMatchScore) (*JobMatchScore, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobMatchScore)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobMatchScore) when calling interceptor")
					}
					return s.PredictionService.PredictJobMatchScore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobMatchScore)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobMatchScore) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobMatchScore
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobMatchScore and nil error while calling PredictJobMatchScore. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveExtractJobKeywords(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveExtractJobKeywordsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveExtractJobKeywordsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveExtractJobKeywordsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtractJobKeywords")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ExtractKeywords)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.ExtractJobKeywords
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return s.PredictionService.ExtractJobKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExtractKeywords
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExtractKeywords and nil error while calling ExtractJobKeywords. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveExtractJobKeywordsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtractJobKeywords")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ExtractKeywords)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.ExtractJobKeywords
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return s.PredictionService.ExtractJobKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExtractKeywords
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExtractKeywords and nil error while calling ExtractJobKeywords. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveExtractUserProfileKeywords(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveExtractUserProfileKeywordsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveExtractUserProfileKeywordsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveExtractUserProfileKeywordsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtractUserProfileKeywords")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ExtractKeywords)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.ExtractUserProfileKeywords
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return s.PredictionService.ExtractUserProfileKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExtractKeywords
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExtractKeywords and nil error while calling ExtractUserProfileKeywords. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveExtractUserProfileKeywordsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtractUserProfileKeywords")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ExtractKeywords)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.ExtractUserProfileKeywords
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtractKeywords) (*ExtractKeywords, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtractKeywords)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtractKeywords) when calling interceptor")
					}
					return s.PredictionService.ExtractUserProfileKeywords(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ExtractKeywords)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ExtractKeywords) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ExtractKeywords
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExtractKeywords and nil error while calling ExtractUserProfileKeywords. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGenerateCoverLetter(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGenerateCoverLetterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGenerateCoverLetterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveGenerateCoverLetterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCoverLetter")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GenerateCoverLetterRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.GenerateCoverLetter
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return s.PredictionService.GenerateCoverLetter(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateCoverLetterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateCoverLetterResponse and nil error while calling GenerateCoverLetter. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGenerateCoverLetterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCoverLetter")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GenerateCoverLetterRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.GenerateCoverLetter
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return s.PredictionService.GenerateCoverLetter(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateCoverLetterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateCoverLetterResponse and nil error while calling GenerateCoverLetter. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGenerateCV(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGenerateCVJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGenerateCVProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *predictionServiceServer) serveGenerateCVJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GenerateCoverLetterRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PredictionService.GenerateCV
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return s.PredictionService.GenerateCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateCoverLetterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateCoverLetterResponse and nil error while calling GenerateCV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) serveGenerateCVProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateCV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GenerateCoverLetterRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PredictionService.GenerateCV
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateCoverLetterRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateCoverLetterRequest) when calling interceptor")
					}
					return s.PredictionService.GenerateCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateCoverLetterResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateCoverLetterResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateCoverLetterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateCoverLetterResponse and nil error while calling GenerateCV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *predictionServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *predictionServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *predictionServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "job_seek.prediction", "PredictionService")
}

var twirpFileDescriptor2 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5b, 0x6f, 0x1b, 0xc5,
	0x17, 0xef, 0xda, 0x89, 0x13, 0x1f, 0xa7, 0x6d, 0x32, 0x8e, 0xff, 0xdd, 0xba, 0xea, 0x5f, 0xee,
	0x72, 0x91, 0x2b, 0x5a, 0x07, 0x19, 0xa9, 0xe2, 0x09, 0x94, 0x84, 0x92, 0x38, 0x25, 0x28, 0xac,
	0x03, 0x48, 0x20, 0xb1, 0xec, 0xe5, 0x24, 0x59, 0x5f, 0x76, 0xb6, 0x33, 0xe3, 0x34, 0xee, 0x33,
	0x82, 0xbe, 0xf2, 0x8a, 0xf8, 0x10, 0x7c, 0x17, 0x1e, 0x78, 0xe7, 0x8d, 0x6f, 0x81, 0x66, 0xf6,
	0xe2, 0x75, 0x7c, 0x89, 0x4b, 0x03, 0x4f, 0xc9, 0x9e, 0xf3, 0x3b, 0x97, 0xf9, 0x9d, 0x73, 0x66,
	0x8e, 0x61, 0x3d, 0x64, 0xe8, 0xf9, 0xae, 0xf0, 0x69, 0xd0, 0x08, 0x19, 0x15, 0x94, 0x94, 0x3b,
	0xd4, 0xb1, 0x38, 0x62, 0xb7, 0x31, 0x52, 0x55, 0xd7, 0x3b, 0xd4, 0x79, 0xcc, 0xd1, 0x66, 0xee,
	0x59, 0x04, 0xab, 0x56, 0x06, 0x1c, 0xd9, 0xe3, 0xbe, 0x1d, 0xd8, 0xa7, 0xd8, 0xc7, 0x40, 0x44,
	0x62, 0xe3, 0xf7, 0x1c, 0xdc, 0x3c, 0xa0, 0xce, 0xa1, 0x2d, 0xdc, 0xb3, 0xb6, 0x4b, 0x19, 0x92,
	0x3b, 0xb0, 0x22, 0xa1, 0x96, 0xef, 0xe9, 0x5a, 0x4d, 0xab, 0x17, 0xcd, 0x82, 0xfc, 0x6c, 0x79,
	0xa4, 0x02, 0x05, 0x19, 0xca, 0xf7, 0xf4, 0x9c, 0x92, 0x2f, 0x77, 0xa8, 0xd3, 0xf2, 0xc8, 0x5b,
	0x70, 0x33, 0x0e, 0x6c, 0x71, 0xe9, 0x40, 0xcf, 0xd7, 0xb4, 0x7a, 0xce, 0x5c, 0x8b, 0x85, 0x91,
	0xd3, 0x63, 0xb8, 0x7d, 0xe6, 0x0b, 0x81, 0x9e, 0xd5, 0xc5, 0xe1, 0x0b, 0xca, 0x3c, 0xae, 0x2f,
	0xd5, 0xf2, 0xf5, 0x52, 0xf3, 0xbd, 0x46, 0x9a, 0xbe, 0x8a, 0x9a, 0x49, 0xf0, 0x88, 0xe1, 0x09,
	0x32, 0x0c, 0x5c, 0x7c, 0x16, 0xd9, 0x98, 0xb7, 0x22, 0x1f, 0xf1, 0x27, 0x27, 0x5b, 0x90, 0xef,
	0x50, 0x47, 0x5f, 0xae, 0x69, 0xf5, 0x52, 0x53, 0x1f, 0x79, 0x8a, 0xfe, 0x51, 0x87, 0x3f, 0xa0,
	0xce, 0xfe, 0x0d, 0x53, 0xc2, 0x5e, 0x69, 0x1a, 0x39, 0x84, 0x35, 0x15, 0x25, 0x64, 0xf4, 0xc4,
	0xef, 0xa1, 0x5e, 0x50, 0x96, 0xef, 0xcc, 0xce, 0xe1, 0x4b, 0x8e, 0xec, 0x28, 0x02, 0xef, 0x6b,
	0x66, 0x69, 0x30, 0xfa, 0x7c, 0xa5, 0x69, 0x3b, 0x05, 0x58, 0xb2, 0x3a, 0xd4, 0xd9, 0xb9, 0x0d,
	0x37, 0xad, 0xac, 0x5f, 0xe3, 0x17, 0x0d, 0xee, 0xb6, 0x07, 0xec, 0x1c, 0x87, 0xca, 0x01, 0xb2,
	0x13, 0x79, 0x0c, 0x13, 0x9f, 0x0f, 0x90, 0x8b, 0xd9, 0x0c, 0xdf, 0x83, 0x22, 0x57, 0x56, 0x23,
	0x92, 0x57, 0x23, 0x41, 0xcb, 0x23, 0x7b, 0xb0, 0x9a, 0x72, 0x97, 0x7f, 0x7d, 0xee, 0x52, 0x63,
	0xe3, 0x67, 0x0d, 0xf4, 0x28, 0xb9, 0x03, 0xea, 0x5c, 0x4f, 0x6e, 0x1f, 0x43, 0x51, 0xa5, 0x12,
	0xd7, 0x5f, 0x26, 0x67, 0x34, 0xa6, 0xf4, 0x65, 0x63, 0xac, 0xd5, 0xcc, 0xd5, 0x0e, 0x75, 0xd4,
	0x7f, 0xc6, 0x9f, 0x1a, 0xdc, 0x7e, 0x7a, 0x21, 0x98, 0xed, 0x8a, 0xb4, 0xba, 0x33, 0x53, 0xb9,
	0x0f, 0xc0, 0x91, 0x73, 0x9f, 0x06, 0xa3, 0x5c, 0x8a, 0xb1, 0xa4, 0xe5, 0x4d, 0x14, 0x39, 0xff,
	0x3a, 0x45, 0xbe, 0x71, 0xb9, 0xc8, 0x49, 0x93, 0x2d, 0x5d, 0xd1, 0x64, 0x5a, 0xd2, 0x64, 0x13,
	0xdd, 0x90, 0xb4, 0x89, 0xf1, 0x43, 0x0e, 0xaa, 0x7b, 0x18, 0x20, 0xb3, 0x05, 0xee, 0xd2, 0x73,
	0x64, 0x9f, 0xa1, 0x10, 0xc8, 0xae, 0xa4, 0x7e, 0xc6, 0xe0, 0x8d, 0xd3, 0x90, 0xbf, 0x8a, 0x86,
	0xa5, 0x6b, 0xa1, 0x61, 0xf9, 0xcd, 0x69, 0xf8, 0x51, 0x83, 0x7b, 0x53, 0x69, 0xe0, 0x21, 0x0d,
	0x38, 0x5e, 0x37, 0x0f, 0x3a, 0xac, 0xb8, 0x34, 0x10, 0x18, 0x08, 0x45, 0x41, 0xd1, 0x4c, 0x3e,
	0x8d, 0x67, 0x50, 0xde, 0x43, 0x91, 0x8e, 0xc2, 0x1b, 0x8d, 0x80, 0xf1, 0xab, 0x06, 0x6b, 0xa9,
	0xab, 0x36, 0x8a, 0x4c, 0xb6, 0x5a, 0x36, 0xdb, 0x26, 0x54, 0x62, 0x56, 0x92, 0x09, 0x8d, 0xc7,
	0x26, 0xa7, 0xae, 0xcd, 0x72, 0x44, 0x7b, 0xa2, 0x8b, 0x6e, 0xcf, 0x6d, 0x58, 0x3d, 0x41, 0x5b,
	0x0c, 0x18, 0xf2, 0xc9, 0x6e, 0xce, 0x4c, 0x57, 0x1a, 0xff, 0xd3, 0x08, 0x6d, 0xa6, 0x66, 0xc6,
	0x4f, 0xcb, 0xb0, 0x7e, 0x59, 0x4d, 0xb6, 0xe1, 0xbe, 0xed, 0x75, 0x06, 0x5c, 0xde, 0xcb, 0xd2,
	0x9f, 0xf0, 0x45, 0x0f, 0x2d, 0xee, 0xf7, 0xfd, 0x9e, 0xcd, 0x7c, 0x31, 0x54, 0x99, 0xe7, 0xcc,
	0x6a, 0x02, 0x3a, 0xa0, 0xce, 0xb1, 0x84, 0xb4, 0x53, 0x04, 0xd9, 0x83, 0xda, 0x98, 0x0b, 0x3f,
	0xf0, 0x06, 0x5c, 0xb0, 0x61, 0xd6, 0x4b, 0x74, 0xb2, 0xfb, 0x19, 0x2f, 0xad, 0x18, 0x95, 0x71,
	0xd4, 0x84, 0x4a, 0xea, 0xc8, 0xa5, 0xfd, 0xd0, 0x0e, 0xa4, 0x8f, 0x97, 0xc9, 0x73, 0x52, 0x4e,
	0x94, 0xbb, 0x91, 0xae, 0xed, 0xbf, 0x44, 0xd2, 0x80, 0xf2, 0x58, 0x70, 0x8e, 0xae, 0xa0, 0x4c,
	0x95, 0x39, 0x67, 0x6e, 0x64, 0xe2, 0xb5, 0x95, 0x82, 0x7c, 0x08, 0xfa, 0x44, 0x0c, 0x77, 0xd0,
	0x93, 0x5c, 0xa8, 0xc6, 0xce, 0x99, 0xff, 0xbb, 0x14, 0x66, 0x37, 0xd2, 0x8e, 0x45, 0x7a, 0x41,
	0x59, 0xd7, 0xea, 0x53, 0x0f, 0x7b, 0xea, 0xfd, 0xc8, 0x44, 0xfa, 0x9a, 0xb2, 0xee, 0xa1, 0x54,
	0x90, 0x8f, 0xe0, 0x5e, 0x8a, 0xe7, 0x76, 0xcf, 0x66, 0x43, 0x0b, 0x2f, 0x42, 0x74, 0x85, 0x2d,
	0x0b, 0xa5, 0xaf, 0x28, 0xbb, 0xbb, 0x09, 0xa4, 0xad, 0x10, 0x4f, 0x47, 0x00, 0xf2, 0x08, 0x48,
	0x6a, 0xcf, 0x68, 0x0f, 0x2d, 0x31, 0x0c, 0x51, 0x5f, 0x55, 0x66, 0xeb, 0x89, 0xc6, 0xa4, 0x3d,
	0x3c, 0x1e, 0x86, 0x48, 0x9e, 0xc0, 0x9d, 0x14, 0xed, 0xf9, 0x5c, 0xd8, 0xa3, 0xae, 0x2a, 0x2a,
	0x93, 0x94, 0xda, 0x4f, 0x62, 0x6d, 0xd4, 0x57, 0x75, 0x58, 0x0f, 0xed, 0xa1, 0x65, 0x9f, 0x23,
	0xb3, 0x4f, 0xd1, 0x0a, 0x28, 0xeb, 0xeb, 0xa0, 0x0c, 0x6e, 0x85, 0xf6, 0x70, 0x3b, 0x12, 0x7f,
	0x4e, 0x59, 0x9f, 0xb4, 0xe0, 0x81, 0x87, 0xdc, 0x65, 0x7e, 0x28, 0xd3, 0xe3, 0x99, 0xea, 0x5a,
	0x82, 0x5a, 0x0c, 0xf9, 0xa0, 0x8f, 0x7a, 0x49, 0x99, 0xfe, 0x3f, 0x0b, 0x1c, 0x15, 0xf8, 0x98,
	0x9a, 0x0a, 0x65, 0xfc, 0x96, 0x83, 0xcd, 0xb4, 0x13, 0xbf, 0x90, 0x13, 0xe7, 0xd3, 0x40, 0x0e,
	0xcc, 0x1d, 0x58, 0x09, 0x6d, 0x3f, 0x3b, 0x77, 0xf2, 0xb3, 0xe5, 0x91, 0x27, 0x20, 0x67, 0xc7,
	0xb2, 0x55, 0x23, 0x95, 0x9a, 0x0f, 0xe6, 0xf7, 0x7e, 0x1b, 0x85, 0xb9, 0xd4, 0xa1, 0xce, 0x76,
	0x62, 0xe7, 0xc4, 0x33, 0xb3, 0xa0, 0xdd, 0x0e, 0x31, 0x60, 0x2d, 0x3d, 0x9f, 0x8f, 0xd1, 0xa6,
	0x52, 0x34, 0xc7, 0x64, 0xa4, 0x06, 0x25, 0xcf, 0x3f, 0x89, 0xa7, 0x94, 0xeb, 0xcb, 0x0a, 0x92,
	0x15, 0x91, 0x26, 0x10, 0x79, 0xb9, 0xd9, 0xbd, 0x5e, 0x76, 0x16, 0x54, 0xc7, 0xec, 0xdf, 0x30,
	0x37, 0x62, 0xdd, 0x88, 0x20, 0x79, 0x67, 0x56, 0xa0, 0x6c, 0x4d, 0x1a, 0x19, 0x7f, 0x68, 0xb0,
	0x39, 0x7e, 0x53, 0x5d, 0x75, 0x55, 0xce, 0x7d, 0xad, 0x1f, 0x81, 0x3c, 0x67, 0xb2, 0x45, 0xcc,
	0xbc, 0xcb, 0x15, 0x1b, 0x9c, 0x7c, 0x0b, 0x9b, 0xb1, 0x2b, 0xa9, 0x7e, 0x1e, 0x17, 0x2c, 0xd9,
	0xdf, 0x1e, 0xce, 0x27, 0x35, 0x53, 0x5f, 0x93, 0xf0, 0xcb, 0x52, 0xde, 0xfc, 0xab, 0x00, 0x1b,
	0x47, 0xa9, 0x5d, 0x1b, 0xd9, 0xb9, 0xef, 0x22, 0xe9, 0x01, 0x99, 0xdc, 0x9e, 0x48, 0x63, 0x4e,
	0xa8, 0x29, 0x6b, 0x56, 0xf5, 0xdd, 0xf9, 0x4f, 0x5d, 0x4a, 0xa2, 0x0b, 0x6b, 0x59, 0x72, 0x49,
	0x7d, 0x6a, 0x9c, 0x29, 0x2f, 0x45, 0xf5, 0xe1, 0x02, 0xc8, 0x38, 0x48, 0x07, 0x36, 0x26, 0x76,
	0x2e, 0xf2, 0x78, 0x3e, 0x79, 0xff, 0xf4, 0x40, 0xdf, 0xc1, 0x66, 0xcc, 0xe9, 0xf8, 0x66, 0xbf,
	0xc0, 0x4a, 0x56, 0x5d, 0x00, 0x43, 0xbe, 0x07, 0x12, 0xef, 0x6a, 0x07, 0xd4, 0x49, 0xd7, 0xb5,
	0xb7, 0xa7, 0x5a, 0x5e, 0x5a, 0xea, 0xaa, 0x0b, 0xa1, 0xc8, 0x19, 0x54, 0x63, 0x51, 0x66, 0x29,
	0xf9, 0x57, 0x22, 0x5d, 0xc8, 0x1d, 0x60, 0x62, 0x17, 0x21, 0x5b, 0x33, 0x2a, 0x3b, 0x6b, 0x79,
	0xab, 0xbe, 0xbf, 0xb8, 0x41, 0x5c, 0x25, 0x0a, 0x90, 0xaa, 0xbf, 0xfa, 0x0f, 0x02, 0xee, 0x54,
	0xbe, 0x29, 0x47, 0xbf, 0x0a, 0xb1, 0xbb, 0x15, 0x76, 0x4f, 0xb7, 0xd4, 0x0f, 0x40, 0xee, 0x14,
	0xd4, 0xdf, 0x0f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x74, 0x7a, 0x46, 0x93, 0x5a, 0x0e, 0x00,
	0x00,
}
