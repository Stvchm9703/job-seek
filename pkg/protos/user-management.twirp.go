// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: user-management.proto

package protos

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===============================
// UserManagementService Interface
// ===============================

type UserManagementService interface {
	// from user management
	CreateUserAccount(context.Context, *UserAccount) (*UserResponse, error)

	GetUserAccount(context.Context, *GetUserRequest) (*UserAccount, error)

	UpdateUserAccount(context.Context, *UserAccount) (*UserResponse, error)

	CreateUserProfile(context.Context, *UserProfile) (*UserResponse, error)

	GetUserProfile(context.Context, *UserProfile) (*UserProfile, error)

	ListUserProfile(context.Context, *GetUserRequest) (*ListUserProfileResponse, error)

	UpdateUserProfile(context.Context, *UserProfile) (*UserResponse, error)

	DeleteUserProfile(context.Context, *GetUserRequest) (*UserResponse, error)

	ImportUserProfileFromCV(context.Context, *UserCVProfile) (*UserResponse, error)

	CreateUserCVProfile(context.Context, *UserCVProfile) (*UserResponse, error)

	GetUserCVProfile(context.Context, *GetUserRequest) (*UserCVProfile, error)
}

// =====================================
// UserManagementService Protobuf Client
// =====================================

type userManagementServiceProtobufClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUserManagementServiceProtobufClient creates a Protobuf client that implements the UserManagementService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserManagementServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UserManagementService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.user_management", "UserManagementService")
	urls := [11]string{
		serviceURL + "CreateUserAccount",
		serviceURL + "GetUserAccount",
		serviceURL + "UpdateUserAccount",
		serviceURL + "CreateUserProfile",
		serviceURL + "GetUserProfile",
		serviceURL + "ListUserProfile",
		serviceURL + "UpdateUserProfile",
		serviceURL + "DeleteUserProfile",
		serviceURL + "ImportUserProfileFromCV",
		serviceURL + "CreateUserCVProfile",
		serviceURL + "GetUserCVProfile",
	}

	return &userManagementServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *userManagementServiceProtobufClient) CreateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserAccount")
	caller := c.callCreateUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return c.callCreateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callCreateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) GetUserAccount(ctx context.Context, in *GetUserRequest) (*UserAccount, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserAccount")
	caller := c.callGetUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserAccount, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callGetUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserAccount)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserAccount) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callGetUserAccount(ctx context.Context, in *GetUserRequest) (*UserAccount, error) {
	out := new(UserAccount)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) UpdateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserAccount")
	caller := c.callUpdateUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return c.callUpdateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callUpdateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) CreateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserProfile")
	caller := c.callCreateUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callCreateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callCreateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) GetUserProfile(ctx context.Context, in *UserProfile) (*UserProfile, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserProfile")
	caller := c.callGetUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserProfile, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callGetUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callGetUserProfile(ctx context.Context, in *UserProfile) (*UserProfile, error) {
	out := new(UserProfile)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) ListUserProfile(ctx context.Context, in *GetUserRequest) (*ListUserProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserProfile")
	caller := c.callListUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*ListUserProfileResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callListUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callListUserProfile(ctx context.Context, in *GetUserRequest) (*ListUserProfileResponse, error) {
	out := new(ListUserProfileResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) UpdateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserProfile")
	caller := c.callUpdateUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callUpdateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callUpdateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) DeleteUserProfile(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUserProfile")
	caller := c.callDeleteUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callDeleteUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callDeleteUserProfile(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) ImportUserProfileFromCV(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "ImportUserProfileFromCV")
	caller := c.callImportUserProfileFromCV
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return c.callImportUserProfileFromCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callImportUserProfileFromCV(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) CreateUserCVProfile(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserCVProfile")
	caller := c.callCreateUserCVProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return c.callCreateUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callCreateUserCVProfile(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceProtobufClient) GetUserCVProfile(ctx context.Context, in *GetUserRequest) (*UserCVProfile, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserCVProfile")
	caller := c.callGetUserCVProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserCVProfile, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callGetUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCVProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCVProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceProtobufClient) callGetUserCVProfile(ctx context.Context, in *GetUserRequest) (*UserCVProfile, error) {
	out := new(UserCVProfile)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =================================
// UserManagementService JSON Client
// =================================

type userManagementServiceJSONClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUserManagementServiceJSONClient creates a JSON client that implements the UserManagementService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserManagementServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UserManagementService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.user_management", "UserManagementService")
	urls := [11]string{
		serviceURL + "CreateUserAccount",
		serviceURL + "GetUserAccount",
		serviceURL + "UpdateUserAccount",
		serviceURL + "CreateUserProfile",
		serviceURL + "GetUserProfile",
		serviceURL + "ListUserProfile",
		serviceURL + "UpdateUserProfile",
		serviceURL + "DeleteUserProfile",
		serviceURL + "ImportUserProfileFromCV",
		serviceURL + "CreateUserCVProfile",
		serviceURL + "GetUserCVProfile",
	}

	return &userManagementServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *userManagementServiceJSONClient) CreateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserAccount")
	caller := c.callCreateUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return c.callCreateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callCreateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) GetUserAccount(ctx context.Context, in *GetUserRequest) (*UserAccount, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserAccount")
	caller := c.callGetUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserAccount, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callGetUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserAccount)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserAccount) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callGetUserAccount(ctx context.Context, in *GetUserRequest) (*UserAccount, error) {
	out := new(UserAccount)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) UpdateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserAccount")
	caller := c.callUpdateUserAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return c.callUpdateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callUpdateUserAccount(ctx context.Context, in *UserAccount) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) CreateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserProfile")
	caller := c.callCreateUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callCreateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callCreateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) GetUserProfile(ctx context.Context, in *UserProfile) (*UserProfile, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserProfile")
	caller := c.callGetUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserProfile, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callGetUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callGetUserProfile(ctx context.Context, in *UserProfile) (*UserProfile, error) {
	out := new(UserProfile)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) ListUserProfile(ctx context.Context, in *GetUserRequest) (*ListUserProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserProfile")
	caller := c.callListUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*ListUserProfileResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callListUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callListUserProfile(ctx context.Context, in *GetUserRequest) (*ListUserProfileResponse, error) {
	out := new(ListUserProfileResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) UpdateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserProfile")
	caller := c.callUpdateUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return c.callUpdateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callUpdateUserProfile(ctx context.Context, in *UserProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) DeleteUserProfile(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUserProfile")
	caller := c.callDeleteUserProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callDeleteUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callDeleteUserProfile(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) ImportUserProfileFromCV(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "ImportUserProfileFromCV")
	caller := c.callImportUserProfileFromCV
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return c.callImportUserProfileFromCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callImportUserProfileFromCV(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) CreateUserCVProfile(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserCVProfile")
	caller := c.callCreateUserCVProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return c.callCreateUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callCreateUserCVProfile(ctx context.Context, in *UserCVProfile) (*UserResponse, error) {
	out := new(UserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *userManagementServiceJSONClient) GetUserCVProfile(ctx context.Context, in *GetUserRequest) (*UserCVProfile, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUserCVProfile")
	caller := c.callGetUserCVProfile
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUserRequest) (*UserCVProfile, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return c.callGetUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCVProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCVProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *userManagementServiceJSONClient) callGetUserCVProfile(ctx context.Context, in *GetUserRequest) (*UserCVProfile, error) {
	out := new(UserCVProfile)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================================
// UserManagementService Server Handler
// ====================================

type userManagementServiceServer struct {
	UserManagementService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewUserManagementServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewUserManagementServiceServer(svc UserManagementService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &userManagementServiceServer{
		UserManagementService: svc,
		hooks:                 serverOpts.Hooks,
		interceptor:           twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:            pathPrefix,
		jsonSkipDefaults:      jsonSkipDefaults,
		jsonCamelCase:         jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userManagementServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *userManagementServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// UserManagementServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const UserManagementServicePathPrefix = "/twirp/job_seek.user_management.UserManagementService/"

func (s *userManagementServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.user_management")
	ctx = ctxsetters.WithServiceName(ctx, "UserManagementService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "job_seek.user_management.UserManagementService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateUserAccount":
		s.serveCreateUserAccount(ctx, resp, req)
		return
	case "GetUserAccount":
		s.serveGetUserAccount(ctx, resp, req)
		return
	case "UpdateUserAccount":
		s.serveUpdateUserAccount(ctx, resp, req)
		return
	case "CreateUserProfile":
		s.serveCreateUserProfile(ctx, resp, req)
		return
	case "GetUserProfile":
		s.serveGetUserProfile(ctx, resp, req)
		return
	case "ListUserProfile":
		s.serveListUserProfile(ctx, resp, req)
		return
	case "UpdateUserProfile":
		s.serveUpdateUserProfile(ctx, resp, req)
		return
	case "DeleteUserProfile":
		s.serveDeleteUserProfile(ctx, resp, req)
		return
	case "ImportUserProfileFromCV":
		s.serveImportUserProfileFromCV(ctx, resp, req)
		return
	case "CreateUserCVProfile":
		s.serveCreateUserCVProfile(ctx, resp, req)
		return
	case "GetUserCVProfile":
		s.serveGetUserCVProfile(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *userManagementServiceServer) serveCreateUserAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateUserAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateUserAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveCreateUserAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserAccount)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.CreateUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return s.UserManagementService.CreateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveCreateUserAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserAccount)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.CreateUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return s.UserManagementService.CreateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveGetUserAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.GetUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserAccount, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.GetUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserAccount)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserAccount) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserAccount
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccount and nil error while calling GetUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.GetUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserAccount, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.GetUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserAccount)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserAccount) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserAccount
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccount and nil error while calling GetUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveUpdateUserAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateUserAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateUserAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveUpdateUserAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserAccount)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.UpdateUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return s.UserManagementService.UpdateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling UpdateUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveUpdateUserAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserAccount)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.UpdateUserAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserAccount) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserAccount)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserAccount) when calling interceptor")
					}
					return s.UserManagementService.UpdateUserAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling UpdateUserAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveCreateUserProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateUserProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateUserProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveCreateUserProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserProfile)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.CreateUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.CreateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveCreateUserProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserProfile)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.CreateUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.CreateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveGetUserProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserProfile)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.GetUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserProfile, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.GetUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserProfile
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserProfile and nil error while calling GetUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserProfile)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.GetUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserProfile, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.GetUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserProfile
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserProfile and nil error while calling GetUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveListUserProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListUserProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListUserProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveListUserProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.ListUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*ListUserProfileResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.ListUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserProfileResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserProfileResponse and nil error while calling ListUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveListUserProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.ListUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*ListUserProfileResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.ListUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserProfileResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserProfileResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserProfileResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserProfileResponse and nil error while calling ListUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveUpdateUserProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateUserProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateUserProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveUpdateUserProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserProfile)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.UpdateUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.UpdateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling UpdateUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveUpdateUserProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserProfile)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.UpdateUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserProfile) when calling interceptor")
					}
					return s.UserManagementService.UpdateUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling UpdateUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveDeleteUserProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteUserProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteUserProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveDeleteUserProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.DeleteUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.DeleteUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling DeleteUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveDeleteUserProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteUserProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.DeleteUserProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.DeleteUserProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling DeleteUserProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveImportUserProfileFromCV(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveImportUserProfileFromCVJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveImportUserProfileFromCVProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveImportUserProfileFromCVJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ImportUserProfileFromCV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCVProfile)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.ImportUserProfileFromCV
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return s.UserManagementService.ImportUserProfileFromCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling ImportUserProfileFromCV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveImportUserProfileFromCVProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ImportUserProfileFromCV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCVProfile)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.ImportUserProfileFromCV
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return s.UserManagementService.ImportUserProfileFromCV(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling ImportUserProfileFromCV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveCreateUserCVProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateUserCVProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateUserCVProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveCreateUserCVProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserCVProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCVProfile)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.CreateUserCVProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return s.UserManagementService.CreateUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserCVProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveCreateUserCVProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUserCVProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCVProfile)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.CreateUserCVProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCVProfile) (*UserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCVProfile)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCVProfile) when calling interceptor")
					}
					return s.UserManagementService.CreateUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling CreateUserCVProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserCVProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserCVProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserCVProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userManagementServiceServer) serveGetUserCVProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserCVProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UserManagementService.GetUserCVProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserCVProfile, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.GetUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCVProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCVProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCVProfile
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCVProfile and nil error while calling GetUserCVProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) serveGetUserCVProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUserCVProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UserManagementService.GetUserCVProfile
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUserRequest) (*UserCVProfile, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUserRequest) when calling interceptor")
					}
					return s.UserManagementService.GetUserCVProfile(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCVProfile)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCVProfile) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCVProfile
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCVProfile and nil error while calling GetUserCVProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userManagementServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *userManagementServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *userManagementServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "job_seek.user_management", "UserManagementService")
}

var twirpFileDescriptor3 = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xd3, 0xa4, 0x75, 0x8f, 0x93, 0x36, 0x9d, 0xd2, 0xad, 0x29, 0x20, 0x42, 0x10, 0x4b,
	0x00, 0x6d, 0x57, 0x94, 0x6b, 0x2e, 0x92, 0x34, 0xbb, 0x8d, 0xe8, 0x4f, 0x34, 0xeb, 0xae, 0xb4,
	0x5c, 0x60, 0x4d, 0xed, 0xd3, 0xae, 0x9b, 0xc4, 0x36, 0x1e, 0x27, 0x55, 0xde, 0x60, 0x1f, 0x04,
	0xc1, 0x6b, 0x70, 0xc3, 0x5b, 0x81, 0x84, 0x66, 0xc6, 0xb1, 0x9d, 0xac, 0x52, 0x5c, 0x89, 0xbd,
	0x4a, 0xce, 0x99, 0x6f, 0xce, 0xcf, 0xf7, 0x1d, 0x1f, 0x1b, 0xf6, 0x27, 0x1c, 0xa3, 0x67, 0x63,
	0xe6, 0xb3, 0x5b, 0x1c, 0xa3, 0x1f, 0x1f, 0x85, 0x51, 0x10, 0x07, 0xc4, 0xbc, 0x0b, 0xae, 0x6d,
	0x8e, 0x38, 0x3c, 0x12, 0xe7, 0x76, 0x76, 0x7e, 0x58, 0xbf, 0x0b, 0xae, 0x9f, 0x71, 0x64, 0x91,
	0xf3, 0x56, 0x61, 0x9b, 0x7f, 0x95, 0x60, 0xfb, 0x25, 0xc6, 0x57, 0x1c, 0x23, 0x8a, 0xbf, 0x4e,
	0x90, 0xc7, 0xe4, 0x29, 0x54, 0x23, 0xbc, 0xc1, 0x08, 0x7d, 0x07, 0x6d, 0xcf, 0x35, 0xb5, 0x86,
	0xd6, 0xda, 0x3a, 0x5d, 0xa3, 0x46, 0xea, 0xed, 0xbb, 0xef, 0x34, 0x8d, 0x7c, 0x0a, 0x9b, 0x32,
	0xbe, 0xe7, 0x9a, 0x25, 0x09, 0xd1, 0xe8, 0x86, 0x70, 0xa8, 0xd3, 0x06, 0x6c, 0xc9, 0x53, 0x9f,
	0x8d, 0xd1, 0x5c, 0x97, 0xe7, 0x25, 0xaa, 0x0b, 0xd7, 0x05, 0x1b, 0xa3, 0x40, 0x34, 0x01, 0x24,
	0x02, 0xc7, 0xcc, 0x1b, 0x99, 0x65, 0x09, 0x59, 0xa7, 0xf2, 0x56, 0x4f, 0xb8, 0xf2, 0x98, 0xf0,
	0x6d, 0xe0, 0xa3, 0x59, 0x91, 0x98, 0xb2, 0xc2, 0x0c, 0x84, 0x4b, 0x60, 0x5a, 0x50, 0x53, 0x18,
	0xc6, 0xf9, 0x7d, 0x10, 0xb9, 0xe6, 0x86, 0x84, 0x55, 0x68, 0x55, 0xc2, 0x12, 0xef, 0x3b, 0x4d,
	0xeb, 0xec, 0x40, 0xcd, 0xce, 0xb7, 0xd6, 0x01, 0xd0, 0xed, 0xa4, 0x87, 0x4e, 0x15, 0xc0, 0x4e,
	0x2b, 0xee, 0xd4, 0xc0, 0xb0, 0xb3, 0xea, 0x32, 0x53, 0x16, 0xd2, 0xa9, 0xc3, 0xb6, 0xbd, 0x90,
	0xb3, 0xf9, 0x06, 0xaa, 0x8a, 0x43, 0x1e, 0x06, 0x3e, 0x47, 0xf2, 0x04, 0x36, 0x78, 0xcc, 0xe2,
	0x09, 0x57, 0xf4, 0xd1, 0xc4, 0x22, 0x07, 0x4b, 0xa4, 0xcd, 0x29, 0x23, 0x26, 0x6c, 0x8e, 0x91,
	0x73, 0x76, 0x9b, 0xb0, 0x45, 0xe7, 0x66, 0xf3, 0x4f, 0x0d, 0x0c, 0x11, 0xbb, 0xed, 0x38, 0xc1,
	0xc4, 0x8f, 0xc9, 0x36, 0x94, 0xe6, 0xaa, 0xd0, 0x92, 0xe7, 0x92, 0x4f, 0xf2, 0x4c, 0xab, 0xa0,
	0x29, 0xcf, 0xe4, 0xcb, 0x65, 0x72, 0x54, 0xf0, 0x05, 0x6a, 0xc8, 0x67, 0xef, 0x2b, 0x91, 0xd3,
	0x21, 0x3d, 0xce, 0x89, 0x90, 0x93, 0x80, 0x7c, 0x01, 0x32, 0x9a, 0xcd, 0x5c, 0x37, 0x42, 0xce,
	0x15, 0xfd, 0xd4, 0x10, 0xbe, 0xb6, 0x72, 0x35, 0x7f, 0xd3, 0xa0, 0x26, 0x5a, 0xe8, 0xbe, 0x1e,
	0x44, 0xc1, 0x8d, 0x37, 0xc2, 0x3c, 0x0f, 0xda, 0x02, 0x0f, 0x7b, 0x50, 0x71, 0xa6, 0x19, 0x3d,
	0x65, 0x67, 0xda, 0x77, 0x05, 0xda, 0x99, 0xda, 0x2e, 0x8b, 0x99, 0xac, 0xbf, 0x4a, 0x37, 0x9c,
	0xe9, 0x09, 0x8b, 0x19, 0x39, 0x03, 0xc3, 0x99, 0xda, 0x43, 0x9c, 0x89, 0x3e, 0xb8, 0x59, 0x6e,
	0xac, 0xb7, 0x8c, 0xe3, 0xef, 0x8e, 0x56, 0x3d, 0x00, 0x47, 0x83, 0x54, 0xfe, 0x9f, 0xd4, 0x1d,
	0x0a, 0xce, 0x34, 0xf9, 0xcb, 0x9b, 0xff, 0xac, 0x2b, 0xa6, 0xe7, 0x45, 0x2e, 0x33, 0xbd, 0x52,
	0xbc, 0x8f, 0xa0, 0x12, 0x7b, 0xf1, 0x68, 0x2e, 0x9d, 0x32, 0xc8, 0x21, 0xe8, 0x61, 0xc0, 0xbd,
	0xd8, 0x0b, 0xfc, 0x84, 0xd4, 0xd4, 0x26, 0x0d, 0x30, 0x5c, 0xe4, 0x4e, 0xe4, 0x85, 0xf2, 0x58,
	0x91, 0x9a, 0x77, 0xc9, 0x09, 0x62, 0x23, 0x16, 0xcd, 0x12, 0x42, 0x13, 0x4b, 0x44, 0x1d, 0x05,
	0x0e, 0x93, 0xd7, 0x36, 0x55, 0xd4, 0xb9, 0x2d, 0x86, 0xc8, 0x09, 0xc6, 0x21, 0xf3, 0x67, 0xa6,
	0xae, 0x86, 0x28, 0x31, 0xc9, 0x8f, 0x50, 0x8e, 0x67, 0x21, 0x9a, 0x5b, 0x0d, 0xad, 0xb5, 0x7d,
	0xfc, 0xcd, 0x6a, 0x86, 0x72, 0xfd, 0x5b, 0xb3, 0x10, 0xa9, 0xbc, 0x46, 0x5e, 0x82, 0x9e, 0x92,
	0x0c, 0x8f, 0x27, 0x39, 0xbd, 0x2c, 0x66, 0x89, 0xc7, 0x2c, 0x8a, 0x85, 0x98, 0x68, 0x1a, 0x6a,
	0x96, 0xa4, 0xe7, 0x84, 0xc5, 0x48, 0x3e, 0x06, 0x1d, 0x7d, 0x57, 0x1d, 0x56, 0x55, 0x07, 0xe8,
	0xbb, 0xf2, 0xe8, 0x02, 0xb6, 0x93, 0x66, 0x6c, 0x17, 0x63, 0x31, 0xa8, 0xb5, 0x86, 0xd6, 0x32,
	0x8e, 0x9b, 0x59, 0x21, 0xea, 0x8f, 0xdc, 0x6e, 0x5d, 0x05, 0x3d, 0x91, 0xc8, 0xd3, 0x35, 0x5a,
	0x73, 0xf2, 0x0e, 0xb1, 0x0c, 0x76, 0x61, 0xc7, 0x5e, 0x0c, 0xd8, 0xfc, 0x5d, 0x83, 0xdd, 0xf7,
	0x8a, 0x17, 0x13, 0x39, 0xbc, 0xcf, 0x06, 0xb5, 0x3c, 0xbc, 0xef, 0xbb, 0x0f, 0x3e, 0xc7, 0x49,
	0xb3, 0xf3, 0xe7, 0x38, 0x31, 0xc5, 0x90, 0x4c, 0xd9, 0x68, 0x82, 0xc9, 0x2c, 0x28, 0x83, 0x90,
	0x44, 0x18, 0x35, 0x01, 0x8a, 0xed, 0xcf, 0xc1, 0xf0, 0xb8, 0xad, 0x66, 0x65, 0x8a, 0x52, 0x7f,
	0x9d, 0x82, 0xc7, 0x07, 0x89, 0xa7, 0xf9, 0x87, 0x06, 0x07, 0x67, 0x1e, 0x8f, 0x73, 0x62, 0xa5,
	0x9b, 0xa7, 0x0d, 0x7a, 0xa8, 0x5c, 0x62, 0xf7, 0x08, 0xa9, 0xbe, 0x2a, 0xa4, 0x36, 0x4d, 0xaf,
	0xe5, 0x96, 0x57, 0x69, 0x61, 0x79, 0xad, 0xdc, 0x51, 0x79, 0x3a, 0xca, 0x79, 0x3a, 0xbe, 0xbd,
	0x87, 0x9d, 0xa5, 0x89, 0x22, 0x06, 0x6c, 0xbe, 0xb2, 0xae, 0x4e, 0x7a, 0x17, 0x56, 0x7d, 0x8d,
	0x54, 0x41, 0xef, 0x9d, 0x0f, 0xce, 0x2e, 0xdf, 0xf4, 0x7a, 0x75, 0x8d, 0xec, 0x80, 0xd1, 0xed,
	0x51, 0xab, 0xff, 0xa2, 0xdf, 0x6d, 0x5b, 0xbd, 0x7a, 0x89, 0x3c, 0x01, 0x32, 0x68, 0x53, 0xcb,
	0xb6, 0xfa, 0xe7, 0x3d, 0x3b, 0x05, 0xae, 0x93, 0x7d, 0xd8, 0xed, 0x5e, 0x5e, 0x58, 0xb4, 0xdd,
	0xb5, 0x32, 0x77, 0x99, 0x6c, 0x41, 0xe5, 0xd2, 0x3a, 0xed, 0xd1, 0x7a, 0xe5, 0xf8, 0x6f, 0x1d,
	0xf6, 0x45, 0xe6, 0xf3, 0xb4, 0xd9, 0x57, 0x18, 0x4d, 0x3d, 0x07, 0xc9, 0x35, 0xec, 0x76, 0x23,
	0x64, 0x31, 0xe6, 0x97, 0xea, 0x7f, 0x70, 0x94, 0xc0, 0x0e, 0x9f, 0x3e, 0x0c, 0x4b, 0x45, 0x60,
	0xe9, 0x5b, 0x75, 0x9e, 0xa0, 0xb5, 0xfa, 0xe6, 0xe2, 0xfb, 0xf7, 0xb0, 0x58, 0x29, 0xa2, 0x8d,
	0xab, 0xd0, 0xfd, 0xb0, 0x6d, 0x2c, 0x50, 0x35, 0xdf, 0x8a, 0xc5, 0xc6, 0xa9, 0x70, 0x8e, 0x5f,
	0x52, 0xaa, 0x1e, 0x99, 0xa0, 0x18, 0x8c, 0xf8, 0xb0, 0xb3, 0xf4, 0xa8, 0x3c, 0x42, 0x8b, 0xef,
	0x57, 0x23, 0x57, 0x3d, 0x7f, 0x0b, 0xba, 0x7c, 0x20, 0xce, 0x10, 0x76, 0x4f, 0x70, 0x84, 0x8b,
	0x39, 0x8a, 0x77, 0x55, 0x34, 0xcd, 0x1d, 0x1c, 0xf4, 0xc7, 0x61, 0x10, 0xe5, 0xfb, 0x7c, 0x11,
	0x05, 0xe3, 0xee, 0x6b, 0xf2, 0xf5, 0xc3, 0x21, 0xd2, 0x17, 0x7d, 0xe1, 0x5c, 0x37, 0xb0, 0x97,
	0x8d, 0x5a, 0xf6, 0x9d, 0xf0, 0xbf, 0xe7, 0x41, 0xa8, 0x27, 0x6c, 0x64, 0x49, 0x8a, 0x33, 0x57,
	0xb4, 0x9c, 0xce, 0xfe, 0xcf, 0x7b, 0xea, 0x5b, 0x1b, 0x87, 0xcf, 0xc3, 0xe1, 0xed, 0x73, 0xf9,
	0xb5, 0xcd, 0xaf, 0x37, 0xe4, 0xef, 0x0f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xce, 0xa5,
	0xb4, 0xba, 0x0b, 0x00, 0x00,
}
