// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: job-search.proto

package protos

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ==========================
// JobSearchService Interface
// ==========================

type JobSearchService interface {
	JobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error)

	UserJobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error)

	GetJobByPostId(context.Context, *JobSearchRequest) (*JobSearchResponse, error)

	GetJobByCompanyId(context.Context, *JobSearchRequest) (*JobSearchResponse, error)

	ListCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetailResponse, error)

	GetCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetail, error)
}

// ================================
// JobSearchService Protobuf Client
// ================================

type jobSearchServiceProtobufClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewJobSearchServiceProtobufClient creates a Protobuf client that implements the JobSearchService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewJobSearchServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) JobSearchService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.job_search", "JobSearchService")
	urls := [6]string{
		serviceURL + "JobSearch",
		serviceURL + "UserJobSearch",
		serviceURL + "GetJobByPostId",
		serviceURL + "GetJobByCompanyId",
		serviceURL + "ListCompanyDetail",
		serviceURL + "GetCompanyDetail",
	}

	return &jobSearchServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *jobSearchServiceProtobufClient) JobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "JobSearch")
	caller := c.callJobSearch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceProtobufClient) UserJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "UserJobSearch")
	caller := c.callUserJobSearch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callUserJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callUserJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceProtobufClient) GetJobByPostId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByPostId")
	caller := c.callGetJobByPostId
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callGetJobByPostId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callGetJobByPostId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceProtobufClient) GetJobByCompanyId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByCompanyId")
	caller := c.callGetJobByCompanyId
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callGetJobByCompanyId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callGetJobByCompanyId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceProtobufClient) ListCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "ListCompanyDetail")
	caller := c.callListCompanyDetail
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetailResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return c.callListCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetailResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetailResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callListCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	out := new(CompanyDetailResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceProtobufClient) GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetail, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCompanyDetail")
	caller := c.callGetCompanyDetail
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetail, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return c.callGetCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetail)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetail) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceProtobufClient) callGetCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetail, error) {
	out := new(CompanyDetail)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// JobSearchService JSON Client
// ============================

type jobSearchServiceJSONClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewJobSearchServiceJSONClient creates a JSON client that implements the JobSearchService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewJobSearchServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) JobSearchService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "job_seek.job_search", "JobSearchService")
	urls := [6]string{
		serviceURL + "JobSearch",
		serviceURL + "UserJobSearch",
		serviceURL + "GetJobByPostId",
		serviceURL + "GetJobByCompanyId",
		serviceURL + "ListCompanyDetail",
		serviceURL + "GetCompanyDetail",
	}

	return &jobSearchServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *jobSearchServiceJSONClient) JobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "JobSearch")
	caller := c.callJobSearch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceJSONClient) UserJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "UserJobSearch")
	caller := c.callUserJobSearch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callUserJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callUserJobSearch(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceJSONClient) GetJobByPostId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByPostId")
	caller := c.callGetJobByPostId
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callGetJobByPostId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callGetJobByPostId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceJSONClient) GetJobByCompanyId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByCompanyId")
	caller := c.callGetJobByCompanyId
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return c.callGetJobByCompanyId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callGetJobByCompanyId(ctx context.Context, in *JobSearchRequest) (*JobSearchResponse, error) {
	out := new(JobSearchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceJSONClient) ListCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "ListCompanyDetail")
	caller := c.callListCompanyDetail
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetailResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return c.callListCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetailResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetailResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callListCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	out := new(CompanyDetailResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *jobSearchServiceJSONClient) GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetail, error) {
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithMethodName(ctx, "GetCompanyDetail")
	caller := c.callGetCompanyDetail
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetail, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return c.callGetCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetail)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetail) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *jobSearchServiceJSONClient) callGetCompanyDetail(ctx context.Context, in *CompanyDetailRequest) (*CompanyDetail, error) {
	out := new(CompanyDetail)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// JobSearchService Server Handler
// ===============================

type jobSearchServiceServer struct {
	JobSearchService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewJobSearchServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewJobSearchServiceServer(svc JobSearchService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &jobSearchServiceServer{
		JobSearchService: svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *jobSearchServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *jobSearchServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// JobSearchServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const JobSearchServicePathPrefix = "/twirp/job_seek.job_search.JobSearchService/"

func (s *jobSearchServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "job_seek.job_search")
	ctx = ctxsetters.WithServiceName(ctx, "JobSearchService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "job_seek.job_search.JobSearchService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "JobSearch":
		s.serveJobSearch(ctx, resp, req)
		return
	case "UserJobSearch":
		s.serveUserJobSearch(ctx, resp, req)
		return
	case "GetJobByPostId":
		s.serveGetJobByPostId(ctx, resp, req)
		return
	case "GetJobByCompanyId":
		s.serveGetJobByCompanyId(ctx, resp, req)
		return
	case "ListCompanyDetail":
		s.serveListCompanyDetail(ctx, resp, req)
		return
	case "GetCompanyDetail":
		s.serveGetCompanyDetail(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *jobSearchServiceServer) serveJobSearch(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveJobSearchJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveJobSearchProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveJobSearchJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "JobSearch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JobSearchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.JobSearch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.JobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling JobSearch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveJobSearchProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "JobSearch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JobSearchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.JobSearch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.JobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling JobSearch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveUserJobSearch(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserJobSearchJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserJobSearchProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveUserJobSearchJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserJobSearch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JobSearchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.UserJobSearch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.UserJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling UserJobSearch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveUserJobSearchProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserJobSearch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JobSearchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.UserJobSearch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.UserJobSearch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling UserJobSearch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetJobByPostId(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJobByPostIdJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetJobByPostIdProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveGetJobByPostIdJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByPostId")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JobSearchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.GetJobByPostId
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.GetJobByPostId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling GetJobByPostId. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetJobByPostIdProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByPostId")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JobSearchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.GetJobByPostId
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.GetJobByPostId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling GetJobByPostId. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetJobByCompanyId(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJobByCompanyIdJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetJobByCompanyIdProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveGetJobByCompanyIdJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByCompanyId")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(JobSearchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.GetJobByCompanyId
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.GetJobByCompanyId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling GetJobByCompanyId. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetJobByCompanyIdProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetJobByCompanyId")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(JobSearchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.GetJobByCompanyId
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *JobSearchRequest) (*JobSearchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*JobSearchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*JobSearchRequest) when calling interceptor")
					}
					return s.JobSearchService.GetJobByCompanyId(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*JobSearchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*JobSearchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *JobSearchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *JobSearchResponse and nil error while calling GetJobByCompanyId. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveListCompanyDetail(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListCompanyDetailJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListCompanyDetailProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveListCompanyDetailJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListCompanyDetail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CompanyDetailRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.ListCompanyDetail
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetailResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return s.JobSearchService.ListCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetailResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetailResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompanyDetailResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompanyDetailResponse and nil error while calling ListCompanyDetail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveListCompanyDetailProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListCompanyDetail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CompanyDetailRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.ListCompanyDetail
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetailResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return s.JobSearchService.ListCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetailResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetailResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompanyDetailResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompanyDetailResponse and nil error while calling ListCompanyDetail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetCompanyDetail(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCompanyDetailJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCompanyDetailProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *jobSearchServiceServer) serveGetCompanyDetailJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCompanyDetail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CompanyDetailRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.JobSearchService.GetCompanyDetail
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetail, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return s.JobSearchService.GetCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetail)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetail) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompanyDetail
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompanyDetail and nil error while calling GetCompanyDetail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) serveGetCompanyDetailProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCompanyDetail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CompanyDetailRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.JobSearchService.GetCompanyDetail
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompanyDetailRequest) (*CompanyDetail, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompanyDetailRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompanyDetailRequest) when calling interceptor")
					}
					return s.JobSearchService.GetCompanyDetail(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompanyDetail)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompanyDetail) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompanyDetail
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompanyDetail and nil error while calling GetCompanyDetail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *jobSearchServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *jobSearchServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *jobSearchServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "job_seek.job_search", "JobSearchService")
}

var twirpFileDescriptor1 = []byte{
	// 1424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0x8e, 0xec, 0xd8, 0x96, 0x9e, 0x6c, 0x47, 0x51, 0xe9, 0x54, 0x2d, 0x74, 0x6a, 0x0c, 0x94,
	0x10, 0x86, 0x74, 0x08, 0x3f, 0xa0, 0x63, 0xbb, 0x6e, 0xe5, 0xd4, 0x71, 0xcc, 0xc6, 0x81, 0x69,
	0x0f, 0xec, 0xc8, 0xd2, 0x26, 0x51, 0x22, 0x4b, 0xae, 0x24, 0x93, 0xb8, 0x67, 0x0e, 0x3d, 0x71,
	0xe6, 0xaf, 0xf4, 0x0f, 0xf0, 0x33, 0x38, 0xf0, 0x4b, 0x98, 0x7d, 0x2b, 0xc9, 0xb2, 0x1b, 0x9a,
	0xc0, 0x94, 0x13, 0x27, 0xef, 0xfb, 0xf6, 0x69, 0xf7, 0xed, 0xf7, 0xbd, 0xf7, 0x76, 0x0d, 0xda,
	0x59, 0x30, 0xfe, 0x26, 0x62, 0x56, 0x68, 0x9f, 0xee, 0x4c, 0xc3, 0x20, 0x0e, 0xf4, 0x5b, 0x67,
	0xc1, 0x98, 0x46, 0x8c, 0x9d, 0xef, 0x88, 0x01, 0x9f, 0x6a, 0xfe, 0x5a, 0x01, 0x6d, 0x2f, 0x18,
	0x1f, 0xa2, 0x45, 0xd8, 0xab, 0x19, 0x8b, 0x62, 0xfd, 0x0e, 0x54, 0x66, 0x11, 0x0b, 0xa9, 0xeb,
	0x18, 0x52, 0x43, 0xda, 0x52, 0x48, 0x99, 0x9b, 0x3d, 0x47, 0xef, 0x82, 0x1a, 0x59, 0x9e, 0x15,
	0xce, 0x69, 0x3c, 0x9f, 0x32, 0xa3, 0xd0, 0x90, 0xb6, 0xea, 0xbb, 0x0f, 0x76, 0xae, 0x58, 0x78,
	0xe7, 0x10, 0xfd, 0x46, 0xf3, 0x29, 0x33, 0xd7, 0x08, 0x44, 0x99, 0xf5, 0x46, 0x92, 0xf4, 0x26,
	0xc0, 0xc4, 0xf5, 0xa9, 0x00, 0x8d, 0x62, 0x43, 0xda, 0x2a, 0x99, 0x12, 0x51, 0x26, 0xae, 0x2f,
	0xbe, 0x4a, 0x7d, 0xac, 0xcb, 0xd4, 0x67, 0x1d, 0x7d, 0x0a, 0x44, 0x99, 0x58, 0x97, 0x0b, 0x9f,
	0xc7, 0xa0, 0x5c, 0x04, 0xe1, 0xb9, 0x08, 0xa6, 0x84, 0xc1, 0xdc, 0xbf, 0x32, 0x98, 0x1f, 0x83,
	0xf0, 0x1c, 0x43, 0x29, 0x12, 0xf9, 0x22, 0x19, 0xf3, 0x05, 0xbe, 0x86, 0xba, 0xed, 0x59, 0x51,
	0xe4, 0x1e, 0xbb, 0xb6, 0x15, 0xbb, 0x81, 0x6f, 0x94, 0x71, 0xa3, 0x75, 0xb2, 0x82, 0x73, 0x67,
	0x13, 0xaa, 0x76, 0x30, 0x99, 0x5a, 0xfe, 0x9c, 0x46, 0xee, 0x6b, 0x66, 0x54, 0x70, 0xc3, 0xc6,
	0x95, 0x1b, 0x76, 0x84, 0xe3, 0xa1, 0xfb, 0x9a, 0x99, 0x25, 0xa2, 0xda, 0x0b, 0x93, 0xaf, 0xf4,
	0x39, 0xa8, 0x18, 0xb7, 0x17, 0xd8, 0x96, 0xc7, 0x0c, 0x99, 0x73, 0x6c, 0x96, 0x09, 0x70, 0xb0,
	0x8f, 0x18, 0xf7, 0xfa, 0x04, 0x2a, 0xd3, 0x20, 0x8a, 0xb9, 0x0a, 0x0a, 0x7a, 0x54, 0x48, 0x99,
	0x03, 0x3d, 0x27, 0xe1, 0x27, 0x8d, 0xc6, 0x75, 0x0c, 0x40, 0x07, 0x99, 0x28, 0x09, 0x26, 0x7c,
	0xee, 0x81, 0x7c, 0xce, 0xe6, 0x17, 0x41, 0xe8, 0x44, 0x86, 0xda, 0x28, 0x6e, 0x29, 0x24, 0xb3,
	0x79, 0x0c, 0x71, 0x10, 0x5b, 0x1e, 0xb5, 0x83, 0x99, 0x1f, 0x1b, 0x55, 0x3c, 0xb7, 0x42, 0x00,
	0xc1, 0x0e, 0xc7, 0x92, 0x48, 0xa7, 0xd6, 0x09, 0xa3, 0xfe, 0x6c, 0x32, 0x66, 0xa1, 0x51, 0x43,
	0x2f, 0x20, 0xc0, 0xc1, 0x01, 0x62, 0xdc, 0xab, 0x01, 0x0a, 0x7a, 0x21, 0x2d, 0x75, 0xf4, 0x51,
	0x89, 0xcc, 0xa1, 0xf4, 0xc4, 0x0d, 0x50, 0x6c, 0xcb, 0x3e, 0x65, 0x34, 0x64, 0xc7, 0xc6, 0x06,
	0x06, 0x5b, 0x25, 0x32, 0x42, 0x84, 0x1d, 0x0b, 0x29, 0x36, 0x2c, 0xcf, 0x0b, 0x2e, 0xe8, 0xc4,
	0xbd, 0xa4, 0x38, 0x61, 0x68, 0x0d, 0x69, 0x4b, 0x36, 0x6b, 0xa4, 0x86, 0x13, 0xfb, 0xee, 0x65,
	0x87, 0xc3, 0x6f, 0x24, 0xa9, 0x5d, 0x87, 0x2a, 0xcd, 0x25, 0x62, 0xbb, 0x06, 0x2a, 0x5d, 0x64,
	0x94, 0x30, 0xb3, 0xe4, 0x69, 0x57, 0x01, 0x68, 0x96, 0x27, 0xed, 0x4d, 0xd8, 0xa0, 0xcb, 0xe2,
	0xb6, 0x37, 0xa0, 0x46, 0xf3, 0xd2, 0xe2, 0xfa, 0x39, 0x85, 0xda, 0x00, 0x32, 0x4d, 0xb4, 0xc0,
	0xc5, 0x17, 0xcc, 0xa3, 0x6b, 0x8e, 0x48, 0xb4, 0x73, 0x94, 0xe1, 0xe6, 0x19, 0x39, 0x68, 0x65,
	0x44, 0xb4, 0x75, 0xd0, 0xe8, 0xca, 0xa1, 0x9b, 0x6f, 0x0b, 0xb0, 0x99, 0x2b, 0xc8, 0x68, 0x1a,
	0xf8, 0x11, 0xd3, 0xb7, 0xa1, 0x78, 0x16, 0x8c, 0x0d, 0xa9, 0x51, 0xdc, 0x52, 0x77, 0x8d, 0x2b,
	0x53, 0x6e, 0x2f, 0x18, 0x13, 0xee, 0xb4, 0xaa, 0x6c, 0x01, 0xf5, 0x58, 0xbb, 0x46, 0xd9, 0xb4,
	0x08, 0x57, 0x94, 0x6d, 0x82, 0xf8, 0x0c, 0x8f, 0xb0, 0xa8, 0x42, 0xc4, 0x86, 0xd6, 0x09, 0x6a,
	0x7b, 0x1f, 0x2a, 0x13, 0x16, 0x45, 0xdc, 0xa1, 0x84, 0xca, 0x16, 0x49, 0x0a, 0xbc, 0x23, 0x7d,
	0x19, 0x1d, 0xd6, 0x97, 0xa4, 0xbf, 0x96, 0x42, 0xce, 0xf8, 0x22, 0x0a, 0x14, 0x23, 0x59, 0x7f,
	0x99, 0xcf, 0xe6, 0xdb, 0x22, 0x14, 0xf7, 0x82, 0x31, 0xef, 0x5f, 0x69, 0xe5, 0x24, 0xfd, 0x4b,
	0xd4, 0x8d, 0x7e, 0x1f, 0x00, 0x27, 0x62, 0x37, 0xf6, 0x44, 0xfb, 0x52, 0x88, 0xc2, 0x91, 0x11,
	0x07, 0xf4, 0xbb, 0x20, 0xe3, 0xf4, 0x2c, 0xf4, 0x90, 0x10, 0x85, 0xe0, 0x3a, 0x47, 0xa1, 0xa7,
	0x7f, 0xcc, 0x53, 0x7c, 0x4e, 0x43, 0xcb, 0x4f, 0x78, 0x50, 0x78, 0x82, 0xcf, 0x09, 0xb7, 0xf9,
	0xb2, 0x0e, 0x1b, 0xcf, 0x4e, 0x68, 0xcc, 0x2e, 0x63, 0x41, 0x02, 0x51, 0x10, 0x19, 0xb1, 0xcb,
	0x58, 0xff, 0x12, 0x36, 0x4e, 0xdd, 0x38, 0x66, 0x0e, 0xcd, 0xaa, 0xb1, 0x8c, 0xd5, 0x58, 0x17,
	0xf0, 0xf3, 0xb4, 0x26, 0xef, 0x42, 0x29, 0xb2, 0x83, 0x50, 0xb4, 0x16, 0xae, 0x99, 0x30, 0x39,
	0x8b, 0x3a, 0xac, 0x87, 0x41, 0xda, 0x2b, 0x08, 0x8e, 0x79, 0x4c, 0x8b, 0xf6, 0xa7, 0x88, 0x98,
	0xd2, 0xee, 0xa6, 0x0f, 0xa0, 0x9e, 0x66, 0xa9, 0xc3, 0x62, 0xcb, 0xf5, 0xb0, 0x47, 0xa8, 0xbb,
	0xcd, 0xf7, 0xf5, 0xab, 0x27, 0xe8, 0x69, 0x4a, 0xa4, 0x66, 0xe7, 0x01, 0xd1, 0x8d, 0x14, 0x5e,
	0x0c, 0xbc, 0x5e, 0x78, 0x33, 0xc1, 0x23, 0x66, 0x80, 0xfe, 0x19, 0xd4, 0xd8, 0xe5, 0xd4, 0x0d,
	0x5d, 0xff, 0x84, 0x3a, 0x56, 0xcc, 0xb0, 0x9f, 0x28, 0xa4, 0x9a, 0x82, 0x4f, 0xac, 0x98, 0xb5,
	0x65, 0x28, 0x53, 0x3c, 0x90, 0xa8, 0xc1, 0xa5, 0xe8, 0x9a, 0xbf, 0x15, 0xa1, 0xb6, 0x14, 0x85,
	0xfe, 0x29, 0x54, 0x43, 0x76, 0xcc, 0x42, 0xe6, 0xdb, 0x6c, 0x21, 0xa5, 0x9a, 0x61, 0x3d, 0x87,
	0xb3, 0xe2, 0x5b, 0x93, 0x54, 0x49, 0x1c, 0xeb, 0x1a, 0x14, 0x17, 0xfa, 0xf1, 0x21, 0x6f, 0x83,
	0x9e, 0xeb, 0x9f, 0x33, 0xc7, 0xf5, 0x53, 0xe9, 0x52, 0x5b, 0x6f, 0x80, 0xea, 0xb0, 0xc8, 0x0e,
	0xdd, 0x29, 0xb6, 0x7f, 0xa1, 0x5d, 0x1e, 0xe2, 0x5f, 0xbb, 0xbe, 0x33, 0x8b, 0xe2, 0x70, 0x2e,
	0xd2, 0x97, 0x64, 0x36, 0x17, 0x9e, 0x93, 0xc8, 0x93, 0x84, 0x39, 0x42, 0x35, 0xa2, 0x9c, 0x05,
	0xe3, 0x21, 0x02, 0xfa, 0x63, 0x80, 0x93, 0x30, 0x98, 0x4d, 0x45, 0x63, 0x94, 0x6f, 0x76, 0x5f,
	0x10, 0x05, 0xbf, 0xe1, 0x43, 0x4e, 0xeb, 0x29, 0xb3, 0x1c, 0xfa, 0x6a, 0x66, 0x85, 0x31, 0x0b,
	0xa3, 0x44, 0xe5, 0x2a, 0x07, 0xbf, 0x4f, 0x30, 0x7e, 0x84, 0x68, 0xca, 0x6c, 0xd7, 0xf2, 0x62,
	0x97, 0x45, 0x06, 0x60, 0x6a, 0xe5, 0xa1, 0x6b, 0xb4, 0x7b, 0x00, 0xaa, 0x67, 0xf1, 0xac, 0x9f,
	0xe6, 0x94, 0x03, 0x0e, 0x1d, 0x21, 0xd2, 0xfc, 0xbd, 0x08, 0x1f, 0x2d, 0x49, 0x93, 0xbe, 0x13,
	0x1e, 0x5e, 0xa5, 0x90, 0xb9, 0xb6, 0xa4, 0x11, 0xcf, 0x9d, 0x3b, 0x79, 0x99, 0x4c, 0x49, 0x08,
	0xc5, 0x27, 0x1e, 0xe4, 0xb8, 0x45, 0xc1, 0xcc, 0xc2, 0x82, 0xdd, 0xc4, 0x21, 0x0d, 0x54, 0x48,
	0xc7, 0x6f, 0xf0, 0x14, 0x11, 0x4f, 0x80, 0x3c, 0xc5, 0xa5, 0x46, 0xf1, 0x9f, 0x52, 0xbc, 0xc2,
	0x5e, 0xf9, 0x5d, 0xf6, 0x96, 0x1a, 0x58, 0xe5, 0x8a, 0x06, 0xb6, 0xda, 0x4b, 0x65, 0xac, 0xde,
	0xd2, 0x7b, 0x6f, 0x49, 0x05, 0x7d, 0xca, 0x4b, 0xb7, 0x24, 0xde, 0x43, 0x79, 0x42, 0xdb, 0x15,
	0x28, 0x51, 0xce, 0x55, 0x5b, 0x05, 0x85, 0xa6, 0xbc, 0xa0, 0x91, 0x72, 0xb0, 0x72, 0xa3, 0xbc,
	0xf7, 0xf6, 0x69, 0xfe, 0x51, 0x80, 0xdb, 0x2b, 0x42, 0x26, 0xf7, 0xcb, 0x73, 0xd8, 0x58, 0xae,
	0xc7, 0x28, 0xb9, 0x6b, 0x6e, 0xd0, 0x2e, 0x48, 0x7d, 0xa9, 0x59, 0x44, 0xff, 0xdf, 0x0b, 0x68,
	0xfb, 0x5b, 0x80, 0xc5, 0xbb, 0x57, 0x07, 0x28, 0xb7, 0x06, 0x83, 0xa3, 0x56, 0x5f, 0x5b, 0xd3,
	0x55, 0xa8, 0xec, 0x1f, 0x0c, 0x46, 0x66, 0xff, 0x85, 0x26, 0xf1, 0x09, 0xf3, 0xe0, 0x88, 0xf4,
	0x5f, 0x68, 0x85, 0xed, 0x5f, 0x24, 0x90, 0xd3, 0xe7, 0xa9, 0x5e, 0x03, 0xe5, 0xe9, 0x51, 0xbf,
	0x4f, 0x47, 0xbd, 0xfd, 0xae, 0xb6, 0xc6, 0xcd, 0x61, 0x8b, 0x8c, 0x84, 0x89, 0x9f, 0x75, 0x5a,
	0x87, 0x7c, 0xbd, 0x82, 0x5e, 0x05, 0xb9, 0x73, 0x30, 0x18, 0x91, 0x56, 0x67, 0xa4, 0x15, 0xb9,
	0xe3, 0xa8, 0xbb, 0x3f, 0x3c, 0x20, 0x2d, 0xf2, 0x42, 0x5b, 0xd7, 0xeb, 0x00, 0xbd, 0xc1, 0xa8,
	0x4b, 0x06, 0x87, 0x66, 0x6f, 0xa8, 0x95, 0xf8, 0xf4, 0x0f, 0x07, 0xfd, 0xa3, 0xc1, 0xa8, 0xdb,
	0x25, 0x5a, 0x59, 0xd7, 0xa1, 0xde, 0x1a, 0x0e, 0x49, 0x77, 0x30, 0xea, 0x75, 0xba, 0xe8, 0x52,
	0xd9, 0x9e, 0x80, 0x9a, 0x2b, 0x10, 0xbe, 0xd5, 0x61, 0xef, 0x65, 0x97, 0xb6, 0xb4, 0xb5, 0x6c,
	0xdc, 0x16, 0x21, 0xe0, 0xb8, 0xa3, 0x15, 0xb2, 0xf1, 0x13, 0xad, 0x98, 0x8d, 0xbb, 0xda, 0x7a,
	0x36, 0x7e, 0xaa, 0x95, 0xb2, 0xf1, 0x33, 0xad, 0x9c, 0x8d, 0x4d, 0xad, 0xb2, 0xfb, 0xe7, 0x7a,
	0xee, 0x6f, 0xc7, 0x21, 0x0b, 0x7f, 0x76, 0x6d, 0xa6, 0xbf, 0x04, 0x25, 0xc3, 0xf4, 0x2f, 0xfe,
	0xee, 0x91, 0xb3, 0xf4, 0x57, 0xe5, 0xde, 0xc3, 0xeb, 0xdc, 0x92, 0x04, 0xff, 0x09, 0x6a, 0x47,
	0x11, 0x0b, 0xff, 0xb3, 0xf5, 0x29, 0xd4, 0x9f, 0xb1, 0x78, 0x2f, 0x18, 0xb7, 0xe7, 0x43, 0xf1,
	0xd6, 0xf8, 0xc0, 0x1b, 0x8c, 0x61, 0x33, 0xdd, 0xa0, 0x93, 0xbe, 0xf1, 0x3f, 0xf4, 0x1e, 0x67,
	0xb0, 0xd9, 0x77, 0xa3, 0x78, 0xf9, 0x1a, 0xfe, 0xea, 0x06, 0x1d, 0x20, 0xd9, 0x67, 0xfb, 0x26,
	0xae, 0xc9, 0x5e, 0x16, 0x68, 0xcf, 0xd8, 0xbf, 0xdf, 0xea, 0x06, 0x7d, 0xa9, 0x7d, 0xfb, 0xe5,
	0x2d, 0xf1, 0x27, 0x98, 0x9d, 0x3f, 0x9a, 0x9e, 0x9f, 0x3c, 0xc2, 0xbf, 0xc1, 0xd1, 0xb8, 0x8c,
	0xbf, 0xdf, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x50, 0x84, 0x90, 0x76, 0x22, 0x0f, 0x00, 0x00,
}
