// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: data-store.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataStoreService_SaveUserAccount_FullMethodName                    = "/job_seek.data_store.DataStoreService/SaveUserAccount"
	DataStoreService_GetUserAccount_FullMethodName                     = "/job_seek.data_store.DataStoreService/GetUserAccount"
	DataStoreService_SaveUserSearchPerfence_FullMethodName             = "/job_seek.data_store.DataStoreService/SaveUserSearchPerfence"
	DataStoreService_GetUserSearchPerfence_FullMethodName              = "/job_seek.data_store.DataStoreService/GetUserSearchPerfence"
	DataStoreService_SaveUserJobSearchPredictedPerfence_FullMethodName = "/job_seek.data_store.DataStoreService/SaveUserJobSearchPredictedPerfence"
	DataStoreService_GetUserJobSearchPredictedPerfence_FullMethodName  = "/job_seek.data_store.DataStoreService/GetUserJobSearchPredictedPerfence"
	DataStoreService_SaveJobApply_FullMethodName                       = "/job_seek.data_store.DataStoreService/SaveJobApply"
	DataStoreService_GetJobApply_FullMethodName                        = "/job_seek.data_store.DataStoreService/GetJobApply"
	DataStoreService_ListJobApply_FullMethodName                       = "/job_seek.data_store.DataStoreService/ListJobApply"
	DataStoreService_DeleteJobApply_FullMethodName                     = "/job_seek.data_store.DataStoreService/DeleteJobApply"
	DataStoreService_SaveBookmarkJob_FullMethodName                    = "/job_seek.data_store.DataStoreService/SaveBookmarkJob"
	DataStoreService_GetBookmarkJob_FullMethodName                     = "/job_seek.data_store.DataStoreService/GetBookmarkJob"
	DataStoreService_ListBookmarkJob_FullMethodName                    = "/job_seek.data_store.DataStoreService/ListBookmarkJob"
	DataStoreService_DeleteBookmarkJob_FullMethodName                  = "/job_seek.data_store.DataStoreService/DeleteBookmarkJob"
	DataStoreService_SaveJob_FullMethodName                            = "/job_seek.data_store.DataStoreService/SaveJob"
	DataStoreService_BatchSaveJob_FullMethodName                       = "/job_seek.data_store.DataStoreService/BatchSaveJob"
	DataStoreService_SearchJob_FullMethodName                          = "/job_seek.data_store.DataStoreService/SearchJob"
	DataStoreService_DeleteJob_FullMethodName                          = "/job_seek.data_store.DataStoreService/DeleteJob"
	DataStoreService_DropExpiredJob_FullMethodName                     = "/job_seek.data_store.DataStoreService/DropExpiredJob"
	DataStoreService_ListCachedJobSearch_FullMethodName                = "/job_seek.data_store.DataStoreService/ListCachedJobSearch"
	DataStoreService_CreateCachedJobSearchList_FullMethodName          = "/job_seek.data_store.DataStoreService/CreateCachedJobSearchList"
	DataStoreService_GetCachedJobSearch_FullMethodName                 = "/job_seek.data_store.DataStoreService/GetCachedJobSearch"
	DataStoreService_SaveCompanyDetail_FullMethodName                  = "/job_seek.data_store.DataStoreService/SaveCompanyDetail"
	DataStoreService_BatchSaveCompanyDetail_FullMethodName             = "/job_seek.data_store.DataStoreService/BatchSaveCompanyDetail"
	DataStoreService_GetCompanyDetail_FullMethodName                   = "/job_seek.data_store.DataStoreService/GetCompanyDetail"
)

// DataStoreServiceClient is the client API for DataStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStoreServiceClient interface {
	// from user management
	SaveUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserAccount(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserAccount, error)
	SaveUserSearchPerfence(ctx context.Context, in *UserSearchPerfence, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserSearchPerfence(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserSearchPerfence, error)
	SaveUserJobSearchPredictedPerfence(ctx context.Context, in *UserJobSearchPredictedPerfence, opts ...grpc.CallOption) (*PredictedPerfenceResponse, error)
	GetUserJobSearchPredictedPerfence(ctx context.Context, in *GetPredictedPerfence, opts ...grpc.CallOption) (*UserJobSearchPredictedPerfence, error)
	SaveJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*DataStoreResponse, error)
	GetJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error)
	ListJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error)
	DeleteJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*DataStoreResponse, error)
	SaveBookmarkJob(ctx context.Context, in *BookmarkJob, opts ...grpc.CallOption) (*DataStoreResponse, error)
	GetBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJob, error)
	ListBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*ListBookmarkJobResponse, error)
	DeleteBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*DataStoreResponse, error)
	// from job search
	SaveJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error)
	BatchSaveJob(ctx context.Context, opts ...grpc.CallOption) (DataStoreService_BatchSaveJobClient, error)
	SearchJob(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	DeleteJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error)
	DropExpiredJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error)
	ListCachedJobSearch(ctx context.Context, in *DataStoreRequest, opts ...grpc.CallOption) (*CacheJobSearchResponse, error)
	CreateCachedJobSearchList(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchRequest, error)
	GetCachedJobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	SaveCompanyDetail(ctx context.Context, in *CompanyDetail, opts ...grpc.CallOption) (*DataStoreResponse, error)
	BatchSaveCompanyDetail(ctx context.Context, opts ...grpc.CallOption) (DataStoreService_BatchSaveCompanyDetailClient, error)
	GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetailResponse, error)
}

type dataStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStoreServiceClient(cc grpc.ClientConnInterface) DataStoreServiceClient {
	return &dataStoreServiceClient{cc}
}

func (c *dataStoreServiceClient) SaveUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetUserAccount(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, DataStoreService_GetUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveUserSearchPerfence(ctx context.Context, in *UserSearchPerfence, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveUserSearchPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetUserSearchPerfence(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserSearchPerfence, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSearchPerfence)
	err := c.cc.Invoke(ctx, DataStoreService_GetUserSearchPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveUserJobSearchPredictedPerfence(ctx context.Context, in *UserJobSearchPredictedPerfence, opts ...grpc.CallOption) (*PredictedPerfenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictedPerfenceResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveUserJobSearchPredictedPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetUserJobSearchPredictedPerfence(ctx context.Context, in *GetPredictedPerfence, opts ...grpc.CallOption) (*UserJobSearchPredictedPerfence, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserJobSearchPredictedPerfence)
	err := c.cc.Invoke(ctx, DataStoreService_GetUserJobSearchPredictedPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobApplyResponse)
	err := c.cc.Invoke(ctx, DataStoreService_GetJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) ListJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobApplyResponse)
	err := c.cc.Invoke(ctx, DataStoreService_ListJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) DeleteJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_DeleteJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveBookmarkJob(ctx context.Context, in *BookmarkJob, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookmarkJob)
	err := c.cc.Invoke(ctx, DataStoreService_GetBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) ListBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*ListBookmarkJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookmarkJobResponse)
	err := c.cc.Invoke(ctx, DataStoreService_ListBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) DeleteBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_DeleteBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) BatchSaveJob(ctx context.Context, opts ...grpc.CallOption) (DataStoreService_BatchSaveJobClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataStoreService_ServiceDesc.Streams[0], DataStoreService_BatchSaveJob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataStoreServiceBatchSaveJobClient{ClientStream: stream}
	return x, nil
}

type DataStoreService_BatchSaveJobClient interface {
	Send(*Job) error
	Recv() (*JobSearchResponse, error)
	grpc.ClientStream
}

type dataStoreServiceBatchSaveJobClient struct {
	grpc.ClientStream
}

func (x *dataStoreServiceBatchSaveJobClient) Send(m *Job) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataStoreServiceBatchSaveJobClient) Recv() (*JobSearchResponse, error) {
	m := new(JobSearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataStoreServiceClient) SearchJob(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SearchJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) DeleteJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) DropExpiredJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_DropExpiredJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) ListCachedJobSearch(ctx context.Context, in *DataStoreRequest, opts ...grpc.CallOption) (*CacheJobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CacheJobSearchResponse)
	err := c.cc.Invoke(ctx, DataStoreService_ListCachedJobSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) CreateCachedJobSearchList(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchRequest)
	err := c.cc.Invoke(ctx, DataStoreService_CreateCachedJobSearchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetCachedJobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, DataStoreService_GetCachedJobSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SaveCompanyDetail(ctx context.Context, in *CompanyDetail, opts ...grpc.CallOption) (*DataStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataStoreResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SaveCompanyDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) BatchSaveCompanyDetail(ctx context.Context, opts ...grpc.CallOption) (DataStoreService_BatchSaveCompanyDetailClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataStoreService_ServiceDesc.Streams[1], DataStoreService_BatchSaveCompanyDetail_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataStoreServiceBatchSaveCompanyDetailClient{ClientStream: stream}
	return x, nil
}

type DataStoreService_BatchSaveCompanyDetailClient interface {
	Send(*CompanyDetail) error
	Recv() (*CompanyDetailResponse, error)
	grpc.ClientStream
}

type dataStoreServiceBatchSaveCompanyDetailClient struct {
	grpc.ClientStream
}

func (x *dataStoreServiceBatchSaveCompanyDetailClient) Send(m *CompanyDetail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataStoreServiceBatchSaveCompanyDetailClient) Recv() (*CompanyDetailResponse, error) {
	m := new(CompanyDetailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataStoreServiceClient) GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompanyDetailResponse)
	err := c.cc.Invoke(ctx, DataStoreService_GetCompanyDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStoreServiceServer is the server API for DataStoreService service.
// All implementations must embed UnimplementedDataStoreServiceServer
// for forward compatibility
type DataStoreServiceServer interface {
	// from user management
	SaveUserAccount(context.Context, *UserAccount) (*UserResponse, error)
	GetUserAccount(context.Context, *GetUserRequest) (*UserAccount, error)
	SaveUserSearchPerfence(context.Context, *UserSearchPerfence) (*UserResponse, error)
	GetUserSearchPerfence(context.Context, *GetUserRequest) (*UserSearchPerfence, error)
	SaveUserJobSearchPredictedPerfence(context.Context, *UserJobSearchPredictedPerfence) (*PredictedPerfenceResponse, error)
	GetUserJobSearchPredictedPerfence(context.Context, *GetPredictedPerfence) (*UserJobSearchPredictedPerfence, error)
	SaveJobApply(context.Context, *JobApply) (*DataStoreResponse, error)
	GetJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error)
	ListJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error)
	DeleteJobApply(context.Context, *JobApply) (*DataStoreResponse, error)
	SaveBookmarkJob(context.Context, *BookmarkJob) (*DataStoreResponse, error)
	GetBookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJob, error)
	ListBookmarkJob(context.Context, *BookmarkJobRequest) (*ListBookmarkJobResponse, error)
	DeleteBookmarkJob(context.Context, *BookmarkJobRequest) (*DataStoreResponse, error)
	// from job search
	SaveJob(context.Context, *Job) (*DataStoreResponse, error)
	BatchSaveJob(DataStoreService_BatchSaveJobServer) error
	SearchJob(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	DeleteJob(context.Context, *Job) (*DataStoreResponse, error)
	DropExpiredJob(context.Context, *Job) (*DataStoreResponse, error)
	ListCachedJobSearch(context.Context, *DataStoreRequest) (*CacheJobSearchResponse, error)
	CreateCachedJobSearchList(context.Context, *JobSearchRequest) (*JobSearchRequest, error)
	GetCachedJobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	SaveCompanyDetail(context.Context, *CompanyDetail) (*DataStoreResponse, error)
	BatchSaveCompanyDetail(DataStoreService_BatchSaveCompanyDetailServer) error
	GetCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetailResponse, error)
	mustEmbedUnimplementedDataStoreServiceServer()
}

// UnimplementedDataStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataStoreServiceServer struct {
}

func (UnimplementedDataStoreServiceServer) SaveUserAccount(context.Context, *UserAccount) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserAccount not implemented")
}
func (UnimplementedDataStoreServiceServer) GetUserAccount(context.Context, *GetUserRequest) (*UserAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccount not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveUserSearchPerfence(context.Context, *UserSearchPerfence) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserSearchPerfence not implemented")
}
func (UnimplementedDataStoreServiceServer) GetUserSearchPerfence(context.Context, *GetUserRequest) (*UserSearchPerfence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSearchPerfence not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveUserJobSearchPredictedPerfence(context.Context, *UserJobSearchPredictedPerfence) (*PredictedPerfenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserJobSearchPredictedPerfence not implemented")
}
func (UnimplementedDataStoreServiceServer) GetUserJobSearchPredictedPerfence(context.Context, *GetPredictedPerfence) (*UserJobSearchPredictedPerfence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJobSearchPredictedPerfence not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveJobApply(context.Context, *JobApply) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJobApply not implemented")
}
func (UnimplementedDataStoreServiceServer) GetJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobApply not implemented")
}
func (UnimplementedDataStoreServiceServer) ListJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobApply not implemented")
}
func (UnimplementedDataStoreServiceServer) DeleteJobApply(context.Context, *JobApply) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobApply not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveBookmarkJob(context.Context, *BookmarkJob) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBookmarkJob not implemented")
}
func (UnimplementedDataStoreServiceServer) GetBookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmarkJob not implemented")
}
func (UnimplementedDataStoreServiceServer) ListBookmarkJob(context.Context, *BookmarkJobRequest) (*ListBookmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkJob not implemented")
}
func (UnimplementedDataStoreServiceServer) DeleteBookmarkJob(context.Context, *BookmarkJobRequest) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkJob not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveJob(context.Context, *Job) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJob not implemented")
}
func (UnimplementedDataStoreServiceServer) BatchSaveJob(DataStoreService_BatchSaveJobServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchSaveJob not implemented")
}
func (UnimplementedDataStoreServiceServer) SearchJob(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchJob not implemented")
}
func (UnimplementedDataStoreServiceServer) DeleteJob(context.Context, *Job) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedDataStoreServiceServer) DropExpiredJob(context.Context, *Job) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropExpiredJob not implemented")
}
func (UnimplementedDataStoreServiceServer) ListCachedJobSearch(context.Context, *DataStoreRequest) (*CacheJobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCachedJobSearch not implemented")
}
func (UnimplementedDataStoreServiceServer) CreateCachedJobSearchList(context.Context, *JobSearchRequest) (*JobSearchRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCachedJobSearchList not implemented")
}
func (UnimplementedDataStoreServiceServer) GetCachedJobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCachedJobSearch not implemented")
}
func (UnimplementedDataStoreServiceServer) SaveCompanyDetail(context.Context, *CompanyDetail) (*DataStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCompanyDetail not implemented")
}
func (UnimplementedDataStoreServiceServer) BatchSaveCompanyDetail(DataStoreService_BatchSaveCompanyDetailServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchSaveCompanyDetail not implemented")
}
func (UnimplementedDataStoreServiceServer) GetCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDetail not implemented")
}
func (UnimplementedDataStoreServiceServer) mustEmbedUnimplementedDataStoreServiceServer() {}

// UnsafeDataStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStoreServiceServer will
// result in compilation errors.
type UnsafeDataStoreServiceServer interface {
	mustEmbedUnimplementedDataStoreServiceServer()
}

func RegisterDataStoreServiceServer(s grpc.ServiceRegistrar, srv DataStoreServiceServer) {
	s.RegisterService(&DataStoreService_ServiceDesc, srv)
}

func _DataStoreService_SaveUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveUserAccount(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetUserAccount(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveUserSearchPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchPerfence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveUserSearchPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveUserSearchPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveUserSearchPerfence(ctx, req.(*UserSearchPerfence))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetUserSearchPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetUserSearchPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetUserSearchPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetUserSearchPerfence(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveUserJobSearchPredictedPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJobSearchPredictedPerfence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveUserJobSearchPredictedPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveUserJobSearchPredictedPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveUserJobSearchPredictedPerfence(ctx, req.(*UserJobSearchPredictedPerfence))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetUserJobSearchPredictedPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictedPerfence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetUserJobSearchPredictedPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetUserJobSearchPredictedPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetUserJobSearchPredictedPerfence(ctx, req.(*GetPredictedPerfence))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveJobApply(ctx, req.(*JobApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetJobApply(ctx, req.(*GetJobApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_ListJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).ListJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_ListJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).ListJobApply(ctx, req.(*GetJobApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_DeleteJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).DeleteJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_DeleteJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).DeleteJobApply(ctx, req.(*JobApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveBookmarkJob(ctx, req.(*BookmarkJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetBookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_ListBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).ListBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_ListBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).ListBookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_DeleteBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).DeleteBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_DeleteBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).DeleteBookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_BatchSaveJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataStoreServiceServer).BatchSaveJob(&dataStoreServiceBatchSaveJobServer{ServerStream: stream})
}

type DataStoreService_BatchSaveJobServer interface {
	Send(*JobSearchResponse) error
	Recv() (*Job, error)
	grpc.ServerStream
}

type dataStoreServiceBatchSaveJobServer struct {
	grpc.ServerStream
}

func (x *dataStoreServiceBatchSaveJobServer) Send(m *JobSearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataStoreServiceBatchSaveJobServer) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataStoreService_SearchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SearchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SearchJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SearchJob(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).DeleteJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_DropExpiredJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).DropExpiredJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_DropExpiredJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).DropExpiredJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_ListCachedJobSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).ListCachedJobSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_ListCachedJobSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).ListCachedJobSearch(ctx, req.(*DataStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_CreateCachedJobSearchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).CreateCachedJobSearchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_CreateCachedJobSearchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).CreateCachedJobSearchList(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetCachedJobSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetCachedJobSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetCachedJobSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetCachedJobSearch(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SaveCompanyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SaveCompanyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SaveCompanyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SaveCompanyDetail(ctx, req.(*CompanyDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_BatchSaveCompanyDetail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataStoreServiceServer).BatchSaveCompanyDetail(&dataStoreServiceBatchSaveCompanyDetailServer{ServerStream: stream})
}

type DataStoreService_BatchSaveCompanyDetailServer interface {
	Send(*CompanyDetailResponse) error
	Recv() (*CompanyDetail, error)
	grpc.ServerStream
}

type dataStoreServiceBatchSaveCompanyDetailServer struct {
	grpc.ServerStream
}

func (x *dataStoreServiceBatchSaveCompanyDetailServer) Send(m *CompanyDetailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataStoreServiceBatchSaveCompanyDetailServer) Recv() (*CompanyDetail, error) {
	m := new(CompanyDetail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataStoreService_GetCompanyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetCompanyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetCompanyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetCompanyDetail(ctx, req.(*CompanyDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStoreService_ServiceDesc is the grpc.ServiceDesc for DataStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_seek.data_store.DataStoreService",
	HandlerType: (*DataStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserAccount",
			Handler:    _DataStoreService_SaveUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccount",
			Handler:    _DataStoreService_GetUserAccount_Handler,
		},
		{
			MethodName: "SaveUserSearchPerfence",
			Handler:    _DataStoreService_SaveUserSearchPerfence_Handler,
		},
		{
			MethodName: "GetUserSearchPerfence",
			Handler:    _DataStoreService_GetUserSearchPerfence_Handler,
		},
		{
			MethodName: "SaveUserJobSearchPredictedPerfence",
			Handler:    _DataStoreService_SaveUserJobSearchPredictedPerfence_Handler,
		},
		{
			MethodName: "GetUserJobSearchPredictedPerfence",
			Handler:    _DataStoreService_GetUserJobSearchPredictedPerfence_Handler,
		},
		{
			MethodName: "SaveJobApply",
			Handler:    _DataStoreService_SaveJobApply_Handler,
		},
		{
			MethodName: "GetJobApply",
			Handler:    _DataStoreService_GetJobApply_Handler,
		},
		{
			MethodName: "ListJobApply",
			Handler:    _DataStoreService_ListJobApply_Handler,
		},
		{
			MethodName: "DeleteJobApply",
			Handler:    _DataStoreService_DeleteJobApply_Handler,
		},
		{
			MethodName: "SaveBookmarkJob",
			Handler:    _DataStoreService_SaveBookmarkJob_Handler,
		},
		{
			MethodName: "GetBookmarkJob",
			Handler:    _DataStoreService_GetBookmarkJob_Handler,
		},
		{
			MethodName: "ListBookmarkJob",
			Handler:    _DataStoreService_ListBookmarkJob_Handler,
		},
		{
			MethodName: "DeleteBookmarkJob",
			Handler:    _DataStoreService_DeleteBookmarkJob_Handler,
		},
		{
			MethodName: "SaveJob",
			Handler:    _DataStoreService_SaveJob_Handler,
		},
		{
			MethodName: "SearchJob",
			Handler:    _DataStoreService_SearchJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _DataStoreService_DeleteJob_Handler,
		},
		{
			MethodName: "DropExpiredJob",
			Handler:    _DataStoreService_DropExpiredJob_Handler,
		},
		{
			MethodName: "ListCachedJobSearch",
			Handler:    _DataStoreService_ListCachedJobSearch_Handler,
		},
		{
			MethodName: "CreateCachedJobSearchList",
			Handler:    _DataStoreService_CreateCachedJobSearchList_Handler,
		},
		{
			MethodName: "GetCachedJobSearch",
			Handler:    _DataStoreService_GetCachedJobSearch_Handler,
		},
		{
			MethodName: "SaveCompanyDetail",
			Handler:    _DataStoreService_SaveCompanyDetail_Handler,
		},
		{
			MethodName: "GetCompanyDetail",
			Handler:    _DataStoreService_GetCompanyDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchSaveJob",
			Handler:       _DataStoreService_BatchSaveJob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchSaveCompanyDetail",
			Handler:       _DataStoreService_BatchSaveCompanyDetail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data-store.proto",
}
