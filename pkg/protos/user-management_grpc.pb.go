// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: user-management.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserManagementService_CreateUserAccount_FullMethodName       = "/job_seek.user_management.UserManagementService/CreateUserAccount"
	UserManagementService_GetUserAccount_FullMethodName          = "/job_seek.user_management.UserManagementService/GetUserAccount"
	UserManagementService_UpdateUserAccount_FullMethodName       = "/job_seek.user_management.UserManagementService/UpdateUserAccount"
	UserManagementService_CreateUserProfile_FullMethodName       = "/job_seek.user_management.UserManagementService/CreateUserProfile"
	UserManagementService_GetUserProfile_FullMethodName          = "/job_seek.user_management.UserManagementService/GetUserProfile"
	UserManagementService_ListUserProfile_FullMethodName         = "/job_seek.user_management.UserManagementService/ListUserProfile"
	UserManagementService_UpdateUserProfile_FullMethodName       = "/job_seek.user_management.UserManagementService/UpdateUserProfile"
	UserManagementService_DeleteUserProfile_FullMethodName       = "/job_seek.user_management.UserManagementService/DeleteUserProfile"
	UserManagementService_ImportUserProfileFromCV_FullMethodName = "/job_seek.user_management.UserManagementService/ImportUserProfileFromCV"
	UserManagementService_CreateUserCVProfile_FullMethodName     = "/job_seek.user_management.UserManagementService/CreateUserCVProfile"
	UserManagementService_GetUserCVProfile_FullMethodName        = "/job_seek.user_management.UserManagementService/GetUserCVProfile"
)

// UserManagementServiceClient is the client API for UserManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementServiceClient interface {
	// from user management
	CreateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserAccount(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserAccount, error)
	UpdateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserProfile, error)
	ListUserProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*ListUserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUserProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ImportUserProfileFromCV(ctx context.Context, in *UserCVProfile, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUserCVProfile(ctx context.Context, in *UserCVProfile, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserCVProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserCVProfile, error)
}

type userManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementServiceClient(cc grpc.ClientConnInterface) UserManagementServiceClient {
	return &userManagementServiceClient{cc}
}

func (c *userManagementServiceClient) CreateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_CreateUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetUserAccount(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, UserManagementService_GetUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateUserAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) CreateUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_CreateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, UserManagementService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) ListUserProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*ListUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserProfileResponse)
	err := c.cc.Invoke(ctx, UserManagementService_ListUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UpdateUserProfile(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) DeleteUserProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_DeleteUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) ImportUserProfileFromCV(ctx context.Context, in *UserCVProfile, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_ImportUserProfileFromCV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) CreateUserCVProfile(ctx context.Context, in *UserCVProfile, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_CreateUserCVProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) GetUserCVProfile(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserCVProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCVProfile)
	err := c.cc.Invoke(ctx, UserManagementService_GetUserCVProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServiceServer is the server API for UserManagementService service.
// All implementations must embed UnimplementedUserManagementServiceServer
// for forward compatibility.
type UserManagementServiceServer interface {
	// from user management
	CreateUserAccount(context.Context, *UserAccount) (*UserResponse, error)
	GetUserAccount(context.Context, *GetUserRequest) (*UserAccount, error)
	UpdateUserAccount(context.Context, *UserAccount) (*UserResponse, error)
	CreateUserProfile(context.Context, *UserProfile) (*UserResponse, error)
	GetUserProfile(context.Context, *UserProfile) (*UserProfile, error)
	ListUserProfile(context.Context, *GetUserRequest) (*ListUserProfileResponse, error)
	UpdateUserProfile(context.Context, *UserProfile) (*UserResponse, error)
	DeleteUserProfile(context.Context, *GetUserRequest) (*UserResponse, error)
	ImportUserProfileFromCV(context.Context, *UserCVProfile) (*UserResponse, error)
	CreateUserCVProfile(context.Context, *UserCVProfile) (*UserResponse, error)
	GetUserCVProfile(context.Context, *GetUserRequest) (*UserCVProfile, error)
	mustEmbedUnimplementedUserManagementServiceServer()
}

// UnimplementedUserManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserManagementServiceServer struct{}

func (UnimplementedUserManagementServiceServer) CreateUserAccount(context.Context, *UserAccount) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAccount not implemented")
}
func (UnimplementedUserManagementServiceServer) GetUserAccount(context.Context, *GetUserRequest) (*UserAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccount not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateUserAccount(context.Context, *UserAccount) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAccount not implemented")
}
func (UnimplementedUserManagementServiceServer) CreateUserProfile(context.Context, *UserProfile) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) GetUserProfile(context.Context, *UserProfile) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) ListUserProfile(context.Context, *GetUserRequest) (*ListUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) UpdateUserProfile(context.Context, *UserProfile) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) DeleteUserProfile(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) ImportUserProfileFromCV(context.Context, *UserCVProfile) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserProfileFromCV not implemented")
}
func (UnimplementedUserManagementServiceServer) CreateUserCVProfile(context.Context, *UserCVProfile) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCVProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) GetUserCVProfile(context.Context, *GetUserRequest) (*UserCVProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCVProfile not implemented")
}
func (UnimplementedUserManagementServiceServer) mustEmbedUnimplementedUserManagementServiceServer() {}
func (UnimplementedUserManagementServiceServer) testEmbeddedByValue()                               {}

// UnsafeUserManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServiceServer will
// result in compilation errors.
type UnsafeUserManagementServiceServer interface {
	mustEmbedUnimplementedUserManagementServiceServer()
}

func RegisterUserManagementServiceServer(s grpc.ServiceRegistrar, srv UserManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserManagementService_ServiceDesc, srv)
}

func _UserManagementService_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_CreateUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).CreateUserAccount(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetUserAccount(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateUserAccount(ctx, req.(*UserAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_CreateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).CreateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_CreateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).CreateUserProfile(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetUserProfile(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_ListUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).ListUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_ListUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).ListUserProfile(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UpdateUserProfile(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_DeleteUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).DeleteUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_DeleteUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).DeleteUserProfile(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_ImportUserProfileFromCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCVProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).ImportUserProfileFromCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_ImportUserProfileFromCV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).ImportUserProfileFromCV(ctx, req.(*UserCVProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_CreateUserCVProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCVProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).CreateUserCVProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_CreateUserCVProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).CreateUserCVProfile(ctx, req.(*UserCVProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_GetUserCVProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).GetUserCVProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_GetUserCVProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).GetUserCVProfile(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagementService_ServiceDesc is the grpc.ServiceDesc for UserManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_seek.user_management.UserManagementService",
	HandlerType: (*UserManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAccount",
			Handler:    _UserManagementService_CreateUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccount",
			Handler:    _UserManagementService_GetUserAccount_Handler,
		},
		{
			MethodName: "UpdateUserAccount",
			Handler:    _UserManagementService_UpdateUserAccount_Handler,
		},
		{
			MethodName: "CreateUserProfile",
			Handler:    _UserManagementService_CreateUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserManagementService_GetUserProfile_Handler,
		},
		{
			MethodName: "ListUserProfile",
			Handler:    _UserManagementService_ListUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserManagementService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "DeleteUserProfile",
			Handler:    _UserManagementService_DeleteUserProfile_Handler,
		},
		{
			MethodName: "ImportUserProfileFromCV",
			Handler:    _UserManagementService_ImportUserProfileFromCV_Handler,
		},
		{
			MethodName: "CreateUserCVProfile",
			Handler:    _UserManagementService_CreateUserCVProfile_Handler,
		},
		{
			MethodName: "GetUserCVProfile",
			Handler:    _UserManagementService_GetUserCVProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-management.proto",
}
