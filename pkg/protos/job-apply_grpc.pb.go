// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: job-apply.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JobExtendsionService_ApplyJob_FullMethodName          = "/job_seek.job_apply.JobExtendsionService/ApplyJob"
	JobExtendsionService_UpdateJobApply_FullMethodName    = "/job_seek.job_apply.JobExtendsionService/UpdateJobApply"
	JobExtendsionService_ListJobApply_FullMethodName      = "/job_seek.job_apply.JobExtendsionService/ListJobApply"
	JobExtendsionService_GetJobApply_FullMethodName       = "/job_seek.job_apply.JobExtendsionService/GetJobApply"
	JobExtendsionService_BookmarkJob_FullMethodName       = "/job_seek.job_apply.JobExtendsionService/BookmarkJob"
	JobExtendsionService_ListBookmarkJob_FullMethodName   = "/job_seek.job_apply.JobExtendsionService/ListBookmarkJob"
	JobExtendsionService_DeleteBookmarkJob_FullMethodName = "/job_seek.job_apply.JobExtendsionService/DeleteBookmarkJob"
)

// JobExtendsionServiceClient is the client API for JobExtendsionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobExtendsionServiceClient interface {
	// should at least:   job_id and user_id
	ApplyJob(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*JobResponse, error)
	// should at least:   job_id and user_id
	UpdateJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*JobResponse, error)
	// should at least: user_id
	ListJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error)
	// should at least: job_id and user_ids
	GetJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*JobApply, error)
	// bookmark job
	// should at least:   job_id and user_id
	BookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJobResponse, error)
	// should at least:   user_id
	ListBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*ListBookmarkJobResponse, error)
	// should at least:   job_id and user_id
	DeleteBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJobResponse, error)
}

type jobExtendsionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobExtendsionServiceClient(cc grpc.ClientConnInterface) JobExtendsionServiceClient {
	return &jobExtendsionServiceClient{cc}
}

func (c *jobExtendsionServiceClient) ApplyJob(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_ApplyJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) UpdateJobApply(ctx context.Context, in *JobApply, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_UpdateJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) ListJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*GetJobApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobApplyResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_ListJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) GetJobApply(ctx context.Context, in *GetJobApplyRequest, opts ...grpc.CallOption) (*JobApply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobApply)
	err := c.cc.Invoke(ctx, JobExtendsionService_GetJobApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) BookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookmarkJobResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_BookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) ListBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*ListBookmarkJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookmarkJobResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_ListBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobExtendsionServiceClient) DeleteBookmarkJob(ctx context.Context, in *BookmarkJobRequest, opts ...grpc.CallOption) (*BookmarkJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookmarkJobResponse)
	err := c.cc.Invoke(ctx, JobExtendsionService_DeleteBookmarkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobExtendsionServiceServer is the server API for JobExtendsionService service.
// All implementations must embed UnimplementedJobExtendsionServiceServer
// for forward compatibility
type JobExtendsionServiceServer interface {
	// should at least:   job_id and user_id
	ApplyJob(context.Context, *JobApply) (*JobResponse, error)
	// should at least:   job_id and user_id
	UpdateJobApply(context.Context, *JobApply) (*JobResponse, error)
	// should at least: user_id
	ListJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error)
	// should at least: job_id and user_ids
	GetJobApply(context.Context, *GetJobApplyRequest) (*JobApply, error)
	// bookmark job
	// should at least:   job_id and user_id
	BookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJobResponse, error)
	// should at least:   user_id
	ListBookmarkJob(context.Context, *BookmarkJobRequest) (*ListBookmarkJobResponse, error)
	// should at least:   job_id and user_id
	DeleteBookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJobResponse, error)
	mustEmbedUnimplementedJobExtendsionServiceServer()
}

// UnimplementedJobExtendsionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobExtendsionServiceServer struct {
}

func (UnimplementedJobExtendsionServiceServer) ApplyJob(context.Context, *JobApply) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJob not implemented")
}
func (UnimplementedJobExtendsionServiceServer) UpdateJobApply(context.Context, *JobApply) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobApply not implemented")
}
func (UnimplementedJobExtendsionServiceServer) ListJobApply(context.Context, *GetJobApplyRequest) (*GetJobApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobApply not implemented")
}
func (UnimplementedJobExtendsionServiceServer) GetJobApply(context.Context, *GetJobApplyRequest) (*JobApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobApply not implemented")
}
func (UnimplementedJobExtendsionServiceServer) BookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkJob not implemented")
}
func (UnimplementedJobExtendsionServiceServer) ListBookmarkJob(context.Context, *BookmarkJobRequest) (*ListBookmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkJob not implemented")
}
func (UnimplementedJobExtendsionServiceServer) DeleteBookmarkJob(context.Context, *BookmarkJobRequest) (*BookmarkJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookmarkJob not implemented")
}
func (UnimplementedJobExtendsionServiceServer) mustEmbedUnimplementedJobExtendsionServiceServer() {}

// UnsafeJobExtendsionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobExtendsionServiceServer will
// result in compilation errors.
type UnsafeJobExtendsionServiceServer interface {
	mustEmbedUnimplementedJobExtendsionServiceServer()
}

func RegisterJobExtendsionServiceServer(s grpc.ServiceRegistrar, srv JobExtendsionServiceServer) {
	s.RegisterService(&JobExtendsionService_ServiceDesc, srv)
}

func _JobExtendsionService_ApplyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).ApplyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_ApplyJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).ApplyJob(ctx, req.(*JobApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_UpdateJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).UpdateJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_UpdateJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).UpdateJobApply(ctx, req.(*JobApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_ListJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).ListJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_ListJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).ListJobApply(ctx, req.(*GetJobApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_GetJobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).GetJobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_GetJobApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).GetJobApply(ctx, req.(*GetJobApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_BookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).BookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_BookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).BookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_ListBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).ListBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_ListBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).ListBookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobExtendsionService_DeleteBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobExtendsionServiceServer).DeleteBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobExtendsionService_DeleteBookmarkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobExtendsionServiceServer).DeleteBookmarkJob(ctx, req.(*BookmarkJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobExtendsionService_ServiceDesc is the grpc.ServiceDesc for JobExtendsionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobExtendsionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_seek.job_apply.JobExtendsionService",
	HandlerType: (*JobExtendsionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyJob",
			Handler:    _JobExtendsionService_ApplyJob_Handler,
		},
		{
			MethodName: "UpdateJobApply",
			Handler:    _JobExtendsionService_UpdateJobApply_Handler,
		},
		{
			MethodName: "ListJobApply",
			Handler:    _JobExtendsionService_ListJobApply_Handler,
		},
		{
			MethodName: "GetJobApply",
			Handler:    _JobExtendsionService_GetJobApply_Handler,
		},
		{
			MethodName: "BookmarkJob",
			Handler:    _JobExtendsionService_BookmarkJob_Handler,
		},
		{
			MethodName: "ListBookmarkJob",
			Handler:    _JobExtendsionService_ListBookmarkJob_Handler,
		},
		{
			MethodName: "DeleteBookmarkJob",
			Handler:    _JobExtendsionService_DeleteBookmarkJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job-apply.proto",
}
