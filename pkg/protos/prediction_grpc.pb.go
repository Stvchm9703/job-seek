// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: prediction.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PredictionService_SurveyUserPerfence_FullMethodName         = "/job_seek.prediction.PredictionService/SurveyUserPerfence"
	PredictionService_GetSurveyJob_FullMethodName               = "/job_seek.prediction.PredictionService/GetSurveyJob"
	PredictionService_SurveyJobPerfence_FullMethodName          = "/job_seek.prediction.PredictionService/SurveyJobPerfence"
	PredictionService_PredictJobMatchScore_FullMethodName       = "/job_seek.prediction.PredictionService/PredictJobMatchScore"
	PredictionService_ExtractJobKeywords_FullMethodName         = "/job_seek.prediction.PredictionService/ExtractJobKeywords"
	PredictionService_ExtractUserProfileKeywords_FullMethodName = "/job_seek.prediction.PredictionService/ExtractUserProfileKeywords"
	PredictionService_GenerateCoverLetter_FullMethodName        = "/job_seek.prediction.PredictionService/GenerateCoverLetter"
	PredictionService_GenerateCV_FullMethodName                 = "/job_seek.prediction.PredictionService/GenerateCV"
)

// PredictionServiceClient is the client API for PredictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PredictionServiceClient interface {
	// rpc SurveyUserPersona() returns (UserResponse);
	SurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetSurveyJob(ctx context.Context, in *GetSurveyJobRequest, opts ...grpc.CallOption) (*GetSurveyJobResponse, error)
	SurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest, opts ...grpc.CallOption) (*UserResponse, error)
	PredictJobMatchScore(ctx context.Context, in *JobMatchScore, opts ...grpc.CallOption) (*JobMatchScore, error)
	ExtractJobKeywords(ctx context.Context, in *ExtractKeywords, opts ...grpc.CallOption) (*ExtractKeywords, error)
	ExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords, opts ...grpc.CallOption) (*ExtractKeywords, error)
	GenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest, opts ...grpc.CallOption) (*GenerateCoverLetterResponse, error)
	GenerateCV(ctx context.Context, in *GenerateCoverLetterRequest, opts ...grpc.CallOption) (*GenerateCoverLetterResponse, error)
}

type predictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictionServiceClient(cc grpc.ClientConnInterface) PredictionServiceClient {
	return &predictionServiceClient{cc}
}

func (c *predictionServiceClient) SurveyUserPerfence(ctx context.Context, in *SurveyUserPerfenceRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, PredictionService_SurveyUserPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GetSurveyJob(ctx context.Context, in *GetSurveyJobRequest, opts ...grpc.CallOption) (*GetSurveyJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurveyJobResponse)
	err := c.cc.Invoke(ctx, PredictionService_GetSurveyJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) SurveyJobPerfence(ctx context.Context, in *SurveyJobPerfenceRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, PredictionService_SurveyJobPerfence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) PredictJobMatchScore(ctx context.Context, in *JobMatchScore, opts ...grpc.CallOption) (*JobMatchScore, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobMatchScore)
	err := c.cc.Invoke(ctx, PredictionService_PredictJobMatchScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) ExtractJobKeywords(ctx context.Context, in *ExtractKeywords, opts ...grpc.CallOption) (*ExtractKeywords, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractKeywords)
	err := c.cc.Invoke(ctx, PredictionService_ExtractJobKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) ExtractUserProfileKeywords(ctx context.Context, in *ExtractKeywords, opts ...grpc.CallOption) (*ExtractKeywords, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractKeywords)
	err := c.cc.Invoke(ctx, PredictionService_ExtractUserProfileKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GenerateCoverLetter(ctx context.Context, in *GenerateCoverLetterRequest, opts ...grpc.CallOption) (*GenerateCoverLetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCoverLetterResponse)
	err := c.cc.Invoke(ctx, PredictionService_GenerateCoverLetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictionServiceClient) GenerateCV(ctx context.Context, in *GenerateCoverLetterRequest, opts ...grpc.CallOption) (*GenerateCoverLetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCoverLetterResponse)
	err := c.cc.Invoke(ctx, PredictionService_GenerateCV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictionServiceServer is the server API for PredictionService service.
// All implementations must embed UnimplementedPredictionServiceServer
// for forward compatibility
type PredictionServiceServer interface {
	// rpc SurveyUserPersona() returns (UserResponse);
	SurveyUserPerfence(context.Context, *SurveyUserPerfenceRequest) (*UserResponse, error)
	GetSurveyJob(context.Context, *GetSurveyJobRequest) (*GetSurveyJobResponse, error)
	SurveyJobPerfence(context.Context, *SurveyJobPerfenceRequest) (*UserResponse, error)
	PredictJobMatchScore(context.Context, *JobMatchScore) (*JobMatchScore, error)
	ExtractJobKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error)
	ExtractUserProfileKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error)
	GenerateCoverLetter(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error)
	GenerateCV(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error)
	mustEmbedUnimplementedPredictionServiceServer()
}

// UnimplementedPredictionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPredictionServiceServer struct {
}

func (UnimplementedPredictionServiceServer) SurveyUserPerfence(context.Context, *SurveyUserPerfenceRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyUserPerfence not implemented")
}
func (UnimplementedPredictionServiceServer) GetSurveyJob(context.Context, *GetSurveyJobRequest) (*GetSurveyJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyJob not implemented")
}
func (UnimplementedPredictionServiceServer) SurveyJobPerfence(context.Context, *SurveyJobPerfenceRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyJobPerfence not implemented")
}
func (UnimplementedPredictionServiceServer) PredictJobMatchScore(context.Context, *JobMatchScore) (*JobMatchScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictJobMatchScore not implemented")
}
func (UnimplementedPredictionServiceServer) ExtractJobKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractJobKeywords not implemented")
}
func (UnimplementedPredictionServiceServer) ExtractUserProfileKeywords(context.Context, *ExtractKeywords) (*ExtractKeywords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractUserProfileKeywords not implemented")
}
func (UnimplementedPredictionServiceServer) GenerateCoverLetter(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCoverLetter not implemented")
}
func (UnimplementedPredictionServiceServer) GenerateCV(context.Context, *GenerateCoverLetterRequest) (*GenerateCoverLetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCV not implemented")
}
func (UnimplementedPredictionServiceServer) mustEmbedUnimplementedPredictionServiceServer() {}

// UnsafePredictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PredictionServiceServer will
// result in compilation errors.
type UnsafePredictionServiceServer interface {
	mustEmbedUnimplementedPredictionServiceServer()
}

func RegisterPredictionServiceServer(s grpc.ServiceRegistrar, srv PredictionServiceServer) {
	s.RegisterService(&PredictionService_ServiceDesc, srv)
}

func _PredictionService_SurveyUserPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyUserPerfenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).SurveyUserPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_SurveyUserPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).SurveyUserPerfence(ctx, req.(*SurveyUserPerfenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GetSurveyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GetSurveyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_GetSurveyJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GetSurveyJob(ctx, req.(*GetSurveyJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_SurveyJobPerfence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyJobPerfenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).SurveyJobPerfence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_SurveyJobPerfence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).SurveyJobPerfence(ctx, req.(*SurveyJobPerfenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_PredictJobMatchScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMatchScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).PredictJobMatchScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_PredictJobMatchScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).PredictJobMatchScore(ctx, req.(*JobMatchScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_ExtractJobKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractKeywords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).ExtractJobKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_ExtractJobKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).ExtractJobKeywords(ctx, req.(*ExtractKeywords))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_ExtractUserProfileKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractKeywords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).ExtractUserProfileKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_ExtractUserProfileKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).ExtractUserProfileKeywords(ctx, req.(*ExtractKeywords))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GenerateCoverLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCoverLetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GenerateCoverLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_GenerateCoverLetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GenerateCoverLetter(ctx, req.(*GenerateCoverLetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PredictionService_GenerateCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCoverLetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictionServiceServer).GenerateCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PredictionService_GenerateCV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictionServiceServer).GenerateCV(ctx, req.(*GenerateCoverLetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PredictionService_ServiceDesc is the grpc.ServiceDesc for PredictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PredictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_seek.prediction.PredictionService",
	HandlerType: (*PredictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SurveyUserPerfence",
			Handler:    _PredictionService_SurveyUserPerfence_Handler,
		},
		{
			MethodName: "GetSurveyJob",
			Handler:    _PredictionService_GetSurveyJob_Handler,
		},
		{
			MethodName: "SurveyJobPerfence",
			Handler:    _PredictionService_SurveyJobPerfence_Handler,
		},
		{
			MethodName: "PredictJobMatchScore",
			Handler:    _PredictionService_PredictJobMatchScore_Handler,
		},
		{
			MethodName: "ExtractJobKeywords",
			Handler:    _PredictionService_ExtractJobKeywords_Handler,
		},
		{
			MethodName: "ExtractUserProfileKeywords",
			Handler:    _PredictionService_ExtractUserProfileKeywords_Handler,
		},
		{
			MethodName: "GenerateCoverLetter",
			Handler:    _PredictionService_GenerateCoverLetter_Handler,
		},
		{
			MethodName: "GenerateCV",
			Handler:    _PredictionService_GenerateCV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}
