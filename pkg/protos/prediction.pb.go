// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: prediction.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobMatchScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JobId        string  `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	PredictScore float32 `protobuf:"fixed32,3,opt,name=predict_score,json=predictScore,proto3" json:"predict_score,omitempty"`
	// should be inside the job details
	HittedKeywords []*PreferenceKeyword `protobuf:"bytes,4,rep,name=hitted_keywords,json=hittedKeywords,proto3" json:"hitted_keywords,omitempty"`
	Job            *Job                 `protobuf:"bytes,5,opt,name=job,proto3,oneof" json:"job,omitempty"`
	UserProfile    *UserProfile         `protobuf:"bytes,6,opt,name=user_profile,json=userProfile,proto3,oneof" json:"user_profile,omitempty"`
}

func (x *JobMatchScore) Reset() {
	*x = JobMatchScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobMatchScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMatchScore) ProtoMessage() {}

func (x *JobMatchScore) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMatchScore.ProtoReflect.Descriptor instead.
func (*JobMatchScore) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{0}
}

func (x *JobMatchScore) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobMatchScore) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobMatchScore) GetPredictScore() float32 {
	if x != nil {
		return x.PredictScore
	}
	return 0
}

func (x *JobMatchScore) GetHittedKeywords() []*PreferenceKeyword {
	if x != nil {
		return x.HittedKeywords
	}
	return nil
}

func (x *JobMatchScore) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobMatchScore) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

type SurveyUserPerfenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SurveyId string               `protobuf:"bytes,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
	Keywords []*PreferenceKeyword `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *SurveyUserPerfenceRequest) Reset() {
	*x = SurveyUserPerfenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyUserPerfenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyUserPerfenceRequest) ProtoMessage() {}

func (x *SurveyUserPerfenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyUserPerfenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyUserPerfenceRequest) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyUserPerfenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SurveyUserPerfenceRequest) GetSurveyId() string {
	if x != nil {
		return x.SurveyId
	}
	return ""
}

func (x *SurveyUserPerfenceRequest) GetKeywords() []*PreferenceKeyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type SurveyJobPerfenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SurveyId string           `protobuf:"bytes,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
	JobScore []*JobMatchScore `protobuf:"bytes,3,rep,name=job_score,json=jobScore,proto3" json:"job_score,omitempty"`
}

func (x *SurveyJobPerfenceRequest) Reset() {
	*x = SurveyJobPerfenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyJobPerfenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyJobPerfenceRequest) ProtoMessage() {}

func (x *SurveyJobPerfenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyJobPerfenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyJobPerfenceRequest) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{2}
}

func (x *SurveyJobPerfenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SurveyJobPerfenceRequest) GetSurveyId() string {
	if x != nil {
		return x.SurveyId
	}
	return ""
}

func (x *SurveyJobPerfenceRequest) GetJobScore() []*JobMatchScore {
	if x != nil {
		return x.JobScore
	}
	return nil
}

type ExtractKeywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId   string       `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserProfile *UserProfile `protobuf:"bytes,3,opt,name=user_profile,json=userProfile,proto3,oneof" json:"user_profile,omitempty"`
	Job         *Job         `protobuf:"bytes,4,opt,name=job,proto3,oneof" json:"job,omitempty"`
}

func (x *ExtractKeywords) Reset() {
	*x = ExtractKeywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractKeywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractKeywords) ProtoMessage() {}

func (x *ExtractKeywords) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractKeywords.ProtoReflect.Descriptor instead.
func (*ExtractKeywords) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{3}
}

func (x *ExtractKeywords) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExtractKeywords) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExtractKeywords) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

func (x *ExtractKeywords) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type GenerateCoverLetterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JobId       string       `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	SessionId   string       `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserProfile *UserProfile `protobuf:"bytes,4,opt,name=user_profile,json=userProfile,proto3,oneof" json:"user_profile,omitempty"`
	Job         *Job         `protobuf:"bytes,5,opt,name=job,proto3,oneof" json:"job,omitempty"`
}

func (x *GenerateCoverLetterRequest) Reset() {
	*x = GenerateCoverLetterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCoverLetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCoverLetterRequest) ProtoMessage() {}

func (x *GenerateCoverLetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCoverLetterRequest.ProtoReflect.Descriptor instead.
func (*GenerateCoverLetterRequest) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateCoverLetterRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GenerateCoverLetterRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GenerateCoverLetterRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GenerateCoverLetterRequest) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

func (x *GenerateCoverLetterRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type GenerateCoverLetterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JobId     string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GenerateCoverLetterResponse) Reset() {
	*x = GenerateCoverLetterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCoverLetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCoverLetterResponse) ProtoMessage() {}

func (x *GenerateCoverLetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCoverLetterResponse.ProtoReflect.Descriptor instead.
func (*GenerateCoverLetterResponse) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateCoverLetterResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GenerateCoverLetterResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GenerateCoverLetterResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GenerateCoverLetterResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetSurveyJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SurveyId string `protobuf:"bytes,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
}

func (x *GetSurveyJobRequest) Reset() {
	*x = GetSurveyJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyJobRequest) ProtoMessage() {}

func (x *GetSurveyJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyJobRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyJobRequest) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{6}
}

func (x *GetSurveyJobRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSurveyJobRequest) GetSurveyId() string {
	if x != nil {
		return x.SurveyId
	}
	return ""
}

type SurveyJobSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId               string            `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	UserPreferenceScore float32           `protobuf:"fixed32,2,opt,name=user_preference_score,json=userPreferenceScore,proto3" json:"user_preference_score,omitempty"`
	Features            *SurveyJobFeature `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *SurveyJobSet) Reset() {
	*x = SurveyJobSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyJobSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyJobSet) ProtoMessage() {}

func (x *SurveyJobSet) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyJobSet.ProtoReflect.Descriptor instead.
func (*SurveyJobSet) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{7}
}

func (x *SurveyJobSet) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SurveyJobSet) GetUserPreferenceScore() float32 {
	if x != nil {
		return x.UserPreferenceScore
	}
	return 0
}

func (x *SurveyJobSet) GetFeatures() *SurveyJobFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

type SurveyJobFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjustedJobTitleSimilarity     float32 `protobuf:"fixed32,1,opt,name=adjusted_job_title_similarity,json=adjustedJobTitleSimilarity,proto3" json:"adjusted_job_title_similarity,omitempty"`
	AdjustedJobIndustrySimilarity  float32 `protobuf:"fixed32,2,opt,name=adjusted_job_industry_similarity,json=adjustedJobIndustrySimilarity,proto3" json:"adjusted_job_industry_similarity,omitempty"`
	AdjustedCompanySize            float32 `protobuf:"fixed32,3,opt,name=adjusted_company_size,json=adjustedCompanySize,proto3" json:"adjusted_company_size,omitempty"`
	AdjustedJobSector              float32 `protobuf:"fixed32,4,opt,name=adjusted_job_sector,json=adjustedJobSector,proto3" json:"adjusted_job_sector,omitempty"`
	AdjustedCompanyCulture         float32 `protobuf:"fixed32,5,opt,name=adjusted_company_culture,json=adjustedCompanyCulture,proto3" json:"adjusted_company_culture,omitempty"`
	AdjustedWorkModel              float32 `protobuf:"fixed32,6,opt,name=adjusted_work_model,json=adjustedWorkModel,proto3" json:"adjusted_work_model,omitempty"`
	AdjustedSalaryExpectation      float32 `protobuf:"fixed32,7,opt,name=adjusted_salary_expectation,json=adjustedSalaryExpectation,proto3" json:"adjusted_salary_expectation,omitempty"`
	AdjustedRoleType               float32 `protobuf:"fixed32,8,opt,name=adjusted_role_type,json=adjustedRoleType,proto3" json:"adjusted_role_type,omitempty"`
	AdjustedDistanceScore          float32 `protobuf:"fixed32,9,opt,name=adjusted_distance_score,json=adjustedDistanceScore,proto3" json:"adjusted_distance_score,omitempty"`
	PayAverageNorm                 float32 `protobuf:"fixed32,10,opt,name=pay_average_norm,json=payAverageNorm,proto3" json:"pay_average_norm,omitempty"`
	DescriptionsSimilarityToResume float32 `protobuf:"fixed32,11,opt,name=descriptions_similarity_to_resume,json=descriptionsSimilarityToResume,proto3" json:"descriptions_similarity_to_resume,omitempty"`
}

func (x *SurveyJobFeature) Reset() {
	*x = SurveyJobFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyJobFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyJobFeature) ProtoMessage() {}

func (x *SurveyJobFeature) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyJobFeature.ProtoReflect.Descriptor instead.
func (*SurveyJobFeature) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{8}
}

func (x *SurveyJobFeature) GetAdjustedJobTitleSimilarity() float32 {
	if x != nil {
		return x.AdjustedJobTitleSimilarity
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedJobIndustrySimilarity() float32 {
	if x != nil {
		return x.AdjustedJobIndustrySimilarity
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedCompanySize() float32 {
	if x != nil {
		return x.AdjustedCompanySize
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedJobSector() float32 {
	if x != nil {
		return x.AdjustedJobSector
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedCompanyCulture() float32 {
	if x != nil {
		return x.AdjustedCompanyCulture
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedWorkModel() float32 {
	if x != nil {
		return x.AdjustedWorkModel
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedSalaryExpectation() float32 {
	if x != nil {
		return x.AdjustedSalaryExpectation
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedRoleType() float32 {
	if x != nil {
		return x.AdjustedRoleType
	}
	return 0
}

func (x *SurveyJobFeature) GetAdjustedDistanceScore() float32 {
	if x != nil {
		return x.AdjustedDistanceScore
	}
	return 0
}

func (x *SurveyJobFeature) GetPayAverageNorm() float32 {
	if x != nil {
		return x.PayAverageNorm
	}
	return 0
}

func (x *SurveyJobFeature) GetDescriptionsSimilarityToResume() float32 {
	if x != nil {
		return x.DescriptionsSimilarityToResume
	}
	return 0
}

type SurveyJobQuestionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairId            string        `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	JobA              *SurveyJobSet `protobuf:"bytes,2,opt,name=job_a,json=jobA,proto3" json:"job_a,omitempty"`
	JobB              *SurveyJobSet `protobuf:"bytes,3,opt,name=job_b,json=jobB,proto3" json:"job_b,omitempty"`
	Similarities      []string      `protobuf:"bytes,4,rep,name=similarities,proto3" json:"similarities,omitempty"`
	Differences       []string      `protobuf:"bytes,5,rep,name=differences,proto3" json:"differences,omitempty"`
	OverallSimilarity *float32      `protobuf:"fixed32,6,opt,name=overall_similarity,json=overallSimilarity,proto3,oneof" json:"overall_similarity,omitempty"`
}

func (x *SurveyJobQuestionSet) Reset() {
	*x = SurveyJobQuestionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyJobQuestionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyJobQuestionSet) ProtoMessage() {}

func (x *SurveyJobQuestionSet) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyJobQuestionSet.ProtoReflect.Descriptor instead.
func (*SurveyJobQuestionSet) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{9}
}

func (x *SurveyJobQuestionSet) GetPairId() string {
	if x != nil {
		return x.PairId
	}
	return ""
}

func (x *SurveyJobQuestionSet) GetJobA() *SurveyJobSet {
	if x != nil {
		return x.JobA
	}
	return nil
}

func (x *SurveyJobQuestionSet) GetJobB() *SurveyJobSet {
	if x != nil {
		return x.JobB
	}
	return nil
}

func (x *SurveyJobQuestionSet) GetSimilarities() []string {
	if x != nil {
		return x.Similarities
	}
	return nil
}

func (x *SurveyJobQuestionSet) GetDifferences() []string {
	if x != nil {
		return x.Differences
	}
	return nil
}

func (x *SurveyJobQuestionSet) GetOverallSimilarity() float32 {
	if x != nil && x.OverallSimilarity != nil {
		return *x.OverallSimilarity
	}
	return 0
}

type GetSurveyJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string                  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SurveyId           string                  `protobuf:"bytes,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
	Jobs               []*Job                  `protobuf:"bytes,3,rep,name=jobs,proto3" json:"jobs,omitempty"`
	SurveyJobQuestions []*SurveyJobQuestionSet `protobuf:"bytes,4,rep,name=survey_job_questions,json=surveyJobQuestions,proto3" json:"survey_job_questions,omitempty"`
}

func (x *GetSurveyJobResponse) Reset() {
	*x = GetSurveyJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prediction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyJobResponse) ProtoMessage() {}

func (x *GetSurveyJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prediction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyJobResponse.ProtoReflect.Descriptor instead.
func (*GetSurveyJobResponse) Descriptor() ([]byte, []int) {
	return file_prediction_proto_rawDescGZIP(), []int{10}
}

func (x *GetSurveyJobResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSurveyJobResponse) GetSurveyId() string {
	if x != nil {
		return x.SurveyId
	}
	return ""
}

func (x *GetSurveyJobResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GetSurveyJobResponse) GetSurveyJobQuestions() []*SurveyJobQuestionSet {
	if x != nil {
		return x.SurveyJobQuestions
	}
	return nil
}

var File_prediction_proto protoreflect.FileDescriptor

var file_prediction_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x6a, 0x6f, 0x62, 0x2d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd3, 0x02, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x68, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x68,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f,
	0x62, 0x50, 0x65, 0x72, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x01, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x22, 0x84, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62,
	0x48, 0x01, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6a, 0x6f, 0x62, 0x22, 0x86, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x87, 0x05, 0x0a, 0x10, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x41, 0x0a,
	0x1d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4a, 0x6f,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x20, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x16, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x41, 0x12, 0x36, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x42, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x12, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xe9, 0x06, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x4a, 0x6f, 0x62, 0x12, 0x28, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x4a, 0x6f, 0x62, 0x50, 0x65, 0x72, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4a, 0x6f, 0x62, 0x50, 0x65, 0x72,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4a,
	0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x22, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a,
	0x6f, 0x62, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x24, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x68, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x24, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x78, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x56, 0x12, 0x2f, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15, 0x5a, 0x13, 0x6a,
	0x6f, 0x62, 0x2d, 0x73, 0x65, 0x65, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prediction_proto_rawDescOnce sync.Once
	file_prediction_proto_rawDescData = file_prediction_proto_rawDesc
)

func file_prediction_proto_rawDescGZIP() []byte {
	file_prediction_proto_rawDescOnce.Do(func() {
		file_prediction_proto_rawDescData = protoimpl.X.CompressGZIP(file_prediction_proto_rawDescData)
	})
	return file_prediction_proto_rawDescData
}

var file_prediction_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_prediction_proto_goTypes = []any{
	(*JobMatchScore)(nil),               // 0: job_seek.prediction.JobMatchScore
	(*SurveyUserPerfenceRequest)(nil),   // 1: job_seek.prediction.SurveyUserPerfenceRequest
	(*SurveyJobPerfenceRequest)(nil),    // 2: job_seek.prediction.SurveyJobPerfenceRequest
	(*ExtractKeywords)(nil),             // 3: job_seek.prediction.ExtractKeywords
	(*GenerateCoverLetterRequest)(nil),  // 4: job_seek.prediction.GenerateCoverLetterRequest
	(*GenerateCoverLetterResponse)(nil), // 5: job_seek.prediction.GenerateCoverLetterResponse
	(*GetSurveyJobRequest)(nil),         // 6: job_seek.prediction.GetSurveyJobRequest
	(*SurveyJobSet)(nil),                // 7: job_seek.prediction.SurveyJobSet
	(*SurveyJobFeature)(nil),            // 8: job_seek.prediction.SurveyJobFeature
	(*SurveyJobQuestionSet)(nil),        // 9: job_seek.prediction.SurveyJobQuestionSet
	(*GetSurveyJobResponse)(nil),        // 10: job_seek.prediction.GetSurveyJobResponse
	(*PreferenceKeyword)(nil),           // 11: job_seek.user_management.PreferenceKeyword
	(*Job)(nil),                         // 12: job_seek.job_search.Job
	(*UserProfile)(nil),                 // 13: job_seek.user_management.UserProfile
	(*UserResponse)(nil),                // 14: job_seek.user_management.UserResponse
}
var file_prediction_proto_depIdxs = []int32{
	11, // 0: job_seek.prediction.JobMatchScore.hitted_keywords:type_name -> job_seek.user_management.PreferenceKeyword
	12, // 1: job_seek.prediction.JobMatchScore.job:type_name -> job_seek.job_search.Job
	13, // 2: job_seek.prediction.JobMatchScore.user_profile:type_name -> job_seek.user_management.UserProfile
	11, // 3: job_seek.prediction.SurveyUserPerfenceRequest.keywords:type_name -> job_seek.user_management.PreferenceKeyword
	0,  // 4: job_seek.prediction.SurveyJobPerfenceRequest.job_score:type_name -> job_seek.prediction.JobMatchScore
	13, // 5: job_seek.prediction.ExtractKeywords.user_profile:type_name -> job_seek.user_management.UserProfile
	12, // 6: job_seek.prediction.ExtractKeywords.job:type_name -> job_seek.job_search.Job
	13, // 7: job_seek.prediction.GenerateCoverLetterRequest.user_profile:type_name -> job_seek.user_management.UserProfile
	12, // 8: job_seek.prediction.GenerateCoverLetterRequest.job:type_name -> job_seek.job_search.Job
	8,  // 9: job_seek.prediction.SurveyJobSet.features:type_name -> job_seek.prediction.SurveyJobFeature
	7,  // 10: job_seek.prediction.SurveyJobQuestionSet.job_a:type_name -> job_seek.prediction.SurveyJobSet
	7,  // 11: job_seek.prediction.SurveyJobQuestionSet.job_b:type_name -> job_seek.prediction.SurveyJobSet
	12, // 12: job_seek.prediction.GetSurveyJobResponse.jobs:type_name -> job_seek.job_search.Job
	9,  // 13: job_seek.prediction.GetSurveyJobResponse.survey_job_questions:type_name -> job_seek.prediction.SurveyJobQuestionSet
	1,  // 14: job_seek.prediction.PredictionService.SurveyUserPerfence:input_type -> job_seek.prediction.SurveyUserPerfenceRequest
	6,  // 15: job_seek.prediction.PredictionService.GetSurveyJob:input_type -> job_seek.prediction.GetSurveyJobRequest
	2,  // 16: job_seek.prediction.PredictionService.SurveyJobPerfence:input_type -> job_seek.prediction.SurveyJobPerfenceRequest
	0,  // 17: job_seek.prediction.PredictionService.PredictJobMatchScore:input_type -> job_seek.prediction.JobMatchScore
	3,  // 18: job_seek.prediction.PredictionService.ExtractJobKeywords:input_type -> job_seek.prediction.ExtractKeywords
	3,  // 19: job_seek.prediction.PredictionService.ExtractUserProfileKeywords:input_type -> job_seek.prediction.ExtractKeywords
	4,  // 20: job_seek.prediction.PredictionService.GenerateCoverLetter:input_type -> job_seek.prediction.GenerateCoverLetterRequest
	4,  // 21: job_seek.prediction.PredictionService.GenerateCV:input_type -> job_seek.prediction.GenerateCoverLetterRequest
	14, // 22: job_seek.prediction.PredictionService.SurveyUserPerfence:output_type -> job_seek.user_management.UserResponse
	10, // 23: job_seek.prediction.PredictionService.GetSurveyJob:output_type -> job_seek.prediction.GetSurveyJobResponse
	14, // 24: job_seek.prediction.PredictionService.SurveyJobPerfence:output_type -> job_seek.user_management.UserResponse
	0,  // 25: job_seek.prediction.PredictionService.PredictJobMatchScore:output_type -> job_seek.prediction.JobMatchScore
	3,  // 26: job_seek.prediction.PredictionService.ExtractJobKeywords:output_type -> job_seek.prediction.ExtractKeywords
	3,  // 27: job_seek.prediction.PredictionService.ExtractUserProfileKeywords:output_type -> job_seek.prediction.ExtractKeywords
	5,  // 28: job_seek.prediction.PredictionService.GenerateCoverLetter:output_type -> job_seek.prediction.GenerateCoverLetterResponse
	5,  // 29: job_seek.prediction.PredictionService.GenerateCV:output_type -> job_seek.prediction.GenerateCoverLetterResponse
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_prediction_proto_init() }
func file_prediction_proto_init() {
	if File_prediction_proto != nil {
		return
	}
	file_job_search_proto_init()
	file_user_management_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prediction_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*JobMatchScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyUserPerfenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyJobPerfenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ExtractKeywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateCoverLetterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateCoverLetterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetSurveyJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyJobSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyJobFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyJobQuestionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prediction_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetSurveyJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prediction_proto_msgTypes[0].OneofWrappers = []any{}
	file_prediction_proto_msgTypes[3].OneofWrappers = []any{}
	file_prediction_proto_msgTypes[4].OneofWrappers = []any{}
	file_prediction_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prediction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prediction_proto_goTypes,
		DependencyIndexes: file_prediction_proto_depIdxs,
		MessageInfos:      file_prediction_proto_msgTypes,
	}.Build()
	File_prediction_proto = out.File
	file_prediction_proto_rawDesc = nil
	file_prediction_proto_goTypes = nil
	file_prediction_proto_depIdxs = nil
}
