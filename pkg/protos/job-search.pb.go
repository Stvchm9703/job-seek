// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.1
// source: job-search.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SalaryType int32

const (
	SalaryType_ANNUAL  SalaryType = 0
	SalaryType_MONTHLY SalaryType = 1
	SalaryType_HOURLY  SalaryType = 2
)

// Enum value maps for SalaryType.
var (
	SalaryType_name = map[int32]string{
		0: "ANNUAL",
		1: "MONTHLY",
		2: "HOURLY",
	}
	SalaryType_value = map[string]int32{
		"ANNUAL":  0,
		"MONTHLY": 1,
		"HOURLY":  2,
	}
)

func (x SalaryType) Enum() *SalaryType {
	p := new(SalaryType)
	*p = x
	return p
}

func (x SalaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_job_search_proto_enumTypes[0].Descriptor()
}

func (SalaryType) Type() protoreflect.EnumType {
	return &file_job_search_proto_enumTypes[0]
}

func (x SalaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalaryType.Descriptor instead.
func (SalaryType) EnumDescriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{0}
}

type WorkType int32

const (
	WorkType_FULL_TIME      WorkType = 0
	WorkType_PART_TIME      WorkType = 1
	WorkType_CASUAL         WorkType = 2
	WorkType_CONTRACT       WorkType = 3
	WorkType_TEMPORARY      WorkType = 4
	WorkType_INTERNSHIP     WorkType = 5
	WorkType_VOLUNTEER      WorkType = 6
	WorkType_APPRENTICESHIP WorkType = 7
)

// Enum value maps for WorkType.
var (
	WorkType_name = map[int32]string{
		0: "FULL_TIME",
		1: "PART_TIME",
		2: "CASUAL",
		3: "CONTRACT",
		4: "TEMPORARY",
		5: "INTERNSHIP",
		6: "VOLUNTEER",
		7: "APPRENTICESHIP",
	}
	WorkType_value = map[string]int32{
		"FULL_TIME":      0,
		"PART_TIME":      1,
		"CASUAL":         2,
		"CONTRACT":       3,
		"TEMPORARY":      4,
		"INTERNSHIP":     5,
		"VOLUNTEER":      6,
		"APPRENTICESHIP": 7,
	}
)

func (x WorkType) Enum() *WorkType {
	p := new(WorkType)
	*p = x
	return p
}

func (x WorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_job_search_proto_enumTypes[1].Descriptor()
}

func (WorkType) Type() protoreflect.EnumType {
	return &file_job_search_proto_enumTypes[1]
}

func (x WorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkType.Descriptor instead.
func (WorkType) EnumDescriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{1}
}

type CompanySize int32

const (
	CompanySize_SIZE_A CompanySize = 0 // "1_10"
	CompanySize_SIZE_B CompanySize = 1 // "11-50",
	CompanySize_SIZE_C CompanySize = 2 // "51-200",
	CompanySize_SIZE_D CompanySize = 3 // "201-500",
	CompanySize_SIZE_E CompanySize = 4 // "501-1000",
	CompanySize_SIZE_F CompanySize = 5 // "1001-5000",
	CompanySize_SIZE_G CompanySize = 6 // "5001-10000",
	CompanySize_SIZE_H CompanySize = 7 // "10001+"
)

// Enum value maps for CompanySize.
var (
	CompanySize_name = map[int32]string{
		0: "SIZE_A",
		1: "SIZE_B",
		2: "SIZE_C",
		3: "SIZE_D",
		4: "SIZE_E",
		5: "SIZE_F",
		6: "SIZE_G",
		7: "SIZE_H",
	}
	CompanySize_value = map[string]int32{
		"SIZE_A": 0,
		"SIZE_B": 1,
		"SIZE_C": 2,
		"SIZE_D": 3,
		"SIZE_E": 4,
		"SIZE_F": 5,
		"SIZE_G": 6,
		"SIZE_H": 7,
	}
)

func (x CompanySize) Enum() *CompanySize {
	p := new(CompanySize)
	*p = x
	return p
}

func (x CompanySize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanySize) Descriptor() protoreflect.EnumDescriptor {
	return file_job_search_proto_enumTypes[2].Descriptor()
}

func (CompanySize) Type() protoreflect.EnumType {
	return &file_job_search_proto_enumTypes[2]
}

func (x CompanySize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanySize.Descriptor instead.
func (CompanySize) EnumDescriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{2}
}

type JobSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SalaryType     *SalaryType  `protobuf:"varint,2,opt,name=salary_type,json=salaryType,proto3,enum=job_seek.job_search.SalaryType,oneof" json:"salary_type,omitempty"`
	MinSalary      *int32       `protobuf:"varint,3,opt,name=min_salary,json=minSalary,proto3,oneof" json:"min_salary,omitempty"`
	MaxSalary      *int32       `protobuf:"varint,4,opt,name=max_salary,json=maxSalary,proto3,oneof" json:"max_salary,omitempty"`
	WorkType       *WorkType    `protobuf:"varint,5,opt,name=work_type,json=workType,proto3,enum=job_seek.job_search.WorkType,oneof" json:"work_type,omitempty"`
	Classification *int32       `protobuf:"varint,6,opt,name=classification,proto3,oneof" json:"classification,omitempty"`
	CompanySize    *CompanySize `protobuf:"varint,7,opt,name=company_size,json=companySize,proto3,enum=job_seek.job_search.CompanySize,oneof" json:"company_size,omitempty"`
	WorkLocale     *string      `protobuf:"bytes,8,opt,name=work_locale,json=workLocale,proto3,oneof" json:"work_locale,omitempty"`
	PostId         *string      `protobuf:"bytes,9,opt,name=post_id,json=postId,proto3,oneof" json:"post_id,omitempty"`
	CompanyId      *string      `protobuf:"bytes,10,opt,name=company_id,json=companyId,proto3,oneof" json:"company_id,omitempty"`
	Keywords       []string     `protobuf:"bytes,11,rep,name=keywords,proto3" json:"keywords,omitempty"`
	TotalCount     *int32       `protobuf:"varint,12,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PageNumber     *int32       `protobuf:"varint,13,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	PageSize       *int32       `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	CacheRef       *string      `protobuf:"bytes,15,opt,name=cache_ref,json=cacheRef,proto3,oneof" json:"cache_ref,omitempty"`
	AllowMixCache  *bool        `protobuf:"varint,16,opt,name=allow_mix_cache,json=allowMixCache,proto3,oneof" json:"allow_mix_cache,omitempty"`
}

func (x *JobSearchRequest) Reset() {
	*x = JobSearchRequest{}
	mi := &file_job_search_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSearchRequest) ProtoMessage() {}

func (x *JobSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSearchRequest.ProtoReflect.Descriptor instead.
func (*JobSearchRequest) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{0}
}

func (x *JobSearchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobSearchRequest) GetSalaryType() SalaryType {
	if x != nil && x.SalaryType != nil {
		return *x.SalaryType
	}
	return SalaryType_ANNUAL
}

func (x *JobSearchRequest) GetMinSalary() int32 {
	if x != nil && x.MinSalary != nil {
		return *x.MinSalary
	}
	return 0
}

func (x *JobSearchRequest) GetMaxSalary() int32 {
	if x != nil && x.MaxSalary != nil {
		return *x.MaxSalary
	}
	return 0
}

func (x *JobSearchRequest) GetWorkType() WorkType {
	if x != nil && x.WorkType != nil {
		return *x.WorkType
	}
	return WorkType_FULL_TIME
}

func (x *JobSearchRequest) GetClassification() int32 {
	if x != nil && x.Classification != nil {
		return *x.Classification
	}
	return 0
}

func (x *JobSearchRequest) GetCompanySize() CompanySize {
	if x != nil && x.CompanySize != nil {
		return *x.CompanySize
	}
	return CompanySize_SIZE_A
}

func (x *JobSearchRequest) GetWorkLocale() string {
	if x != nil && x.WorkLocale != nil {
		return *x.WorkLocale
	}
	return ""
}

func (x *JobSearchRequest) GetPostId() string {
	if x != nil && x.PostId != nil {
		return *x.PostId
	}
	return ""
}

func (x *JobSearchRequest) GetCompanyId() string {
	if x != nil && x.CompanyId != nil {
		return *x.CompanyId
	}
	return ""
}

func (x *JobSearchRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *JobSearchRequest) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *JobSearchRequest) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *JobSearchRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *JobSearchRequest) GetCacheRef() string {
	if x != nil && x.CacheRef != nil {
		return *x.CacheRef
	}
	return ""
}

func (x *JobSearchRequest) GetAllowMixCache() bool {
	if x != nil && x.AllowMixCache != nil {
		return *x.AllowMixCache
	}
	return false
}

type JobSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job        []*Job  `protobuf:"bytes,1,rep,name=job,proto3" json:"job,omitempty"`
	TotalCount *int32  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PageNumber *int32  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	TotalPage  *int32  `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"`
	Message    *string `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	CacheRef   *string `protobuf:"bytes,6,opt,name=cache_ref,json=cacheRef,proto3,oneof" json:"cache_ref,omitempty"`
}

func (x *JobSearchResponse) Reset() {
	*x = JobSearchResponse{}
	mi := &file_job_search_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSearchResponse) ProtoMessage() {}

func (x *JobSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSearchResponse.ProtoReflect.Descriptor instead.
func (*JobSearchResponse) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{1}
}

func (x *JobSearchResponse) GetJob() []*Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobSearchResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *JobSearchResponse) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *JobSearchResponse) GetTotalPage() int32 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *JobSearchResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *JobSearchResponse) GetCacheRef() string {
	if x != nil && x.CacheRef != nil {
		return *x.CacheRef
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId         string         `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	PostTitle      string         `protobuf:"bytes,2,opt,name=post_title,json=postTitle,proto3" json:"post_title,omitempty"`
	PostUrl        string         `protobuf:"bytes,3,opt,name=post_url,json=postUrl,proto3" json:"post_url,omitempty"`
	PayRange       string         `protobuf:"bytes,4,opt,name=pay_range,json=payRange,proto3" json:"pay_range,omitempty"`
	DebugText      string         `protobuf:"bytes,5,opt,name=debug_text,json=debugText,proto3" json:"debug_text,omitempty"`
	HittedKeywords []string       `protobuf:"bytes,6,rep,name=hitted_keywords,json=hittedKeywords,proto3" json:"hitted_keywords,omitempty"`
	Score          *int32         `protobuf:"varint,7,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Role           string         `protobuf:"bytes,8,opt,name=role,proto3" json:"role,omitempty"`
	WorkType       string         `protobuf:"bytes,9,opt,name=work_type,json=workType,proto3" json:"work_type,omitempty"`
	CompanyDetail  *CompanyDetail `protobuf:"bytes,10,opt,name=company_detail,json=companyDetail,proto3,oneof" json:"company_detail,omitempty"`
	Locations      string         `protobuf:"bytes,11,opt,name=locations,proto3" json:"locations,omitempty"`
	ExpiringDate   string         `protobuf:"bytes,12,opt,name=expiring_date,json=expiringDate,proto3" json:"expiring_date,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_job_search_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{2}
}

func (x *Job) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Job) GetPostTitle() string {
	if x != nil {
		return x.PostTitle
	}
	return ""
}

func (x *Job) GetPostUrl() string {
	if x != nil {
		return x.PostUrl
	}
	return ""
}

func (x *Job) GetPayRange() string {
	if x != nil {
		return x.PayRange
	}
	return ""
}

func (x *Job) GetDebugText() string {
	if x != nil {
		return x.DebugText
	}
	return ""
}

func (x *Job) GetHittedKeywords() []string {
	if x != nil {
		return x.HittedKeywords
	}
	return nil
}

func (x *Job) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Job) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Job) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *Job) GetCompanyDetail() *CompanyDetail {
	if x != nil {
		return x.CompanyDetail
	}
	return nil
}

func (x *Job) GetLocations() string {
	if x != nil {
		return x.Locations
	}
	return ""
}

func (x *Job) GetExpiringDate() string {
	if x != nil {
		return x.ExpiringDate
	}
	return ""
}

type CompanyDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId  string      `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url          string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Linkedin     string      `protobuf:"bytes,4,opt,name=linkedin,proto3" json:"linkedin,omitempty"`
	Description  string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Industry     string      `protobuf:"bytes,6,opt,name=industry,proto3" json:"industry,omitempty"`
	JobPosted    int32       `protobuf:"varint,7,opt,name=job_posted,json=jobPosted,proto3" json:"job_posted,omitempty"`
	GroupSize    CompanySize `protobuf:"varint,8,opt,name=group_size,json=groupSize,proto3,enum=job_seek.job_search.CompanySize" json:"group_size,omitempty"`
	HeadQuarters string      `protobuf:"bytes,9,opt,name=head_quarters,json=headQuarters,proto3" json:"head_quarters,omitempty"`
	Specialties  []string    `protobuf:"bytes,10,rep,name=specialties,proto3" json:"specialties,omitempty"`
	Locations    string      `protobuf:"bytes,11,opt,name=locations,proto3" json:"locations,omitempty"`
	LastUpdate   string      `protobuf:"bytes,12,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
}

func (x *CompanyDetail) Reset() {
	*x = CompanyDetail{}
	mi := &file_job_search_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyDetail) ProtoMessage() {}

func (x *CompanyDetail) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyDetail.ProtoReflect.Descriptor instead.
func (*CompanyDetail) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyDetail) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *CompanyDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CompanyDetail) GetLinkedin() string {
	if x != nil {
		return x.Linkedin
	}
	return ""
}

func (x *CompanyDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompanyDetail) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CompanyDetail) GetJobPosted() int32 {
	if x != nil {
		return x.JobPosted
	}
	return 0
}

func (x *CompanyDetail) GetGroupSize() CompanySize {
	if x != nil {
		return x.GroupSize
	}
	return CompanySize_SIZE_A
}

func (x *CompanyDetail) GetHeadQuarters() string {
	if x != nil {
		return x.HeadQuarters
	}
	return ""
}

func (x *CompanyDetail) GetSpecialties() []string {
	if x != nil {
		return x.Specialties
	}
	return nil
}

func (x *CompanyDetail) GetLocations() string {
	if x != nil {
		return x.Locations
	}
	return ""
}

func (x *CompanyDetail) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

type CompanyDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId *string       `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3,oneof" json:"reference_id,omitempty"`
	Name        *string       `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Industry    *string       `protobuf:"bytes,3,opt,name=industry,proto3,oneof" json:"industry,omitempty"`
	Location    *string       `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	GroupSize   []CompanySize `protobuf:"varint,5,rep,packed,name=group_size,json=groupSize,proto3,enum=job_seek.job_search.CompanySize" json:"group_size,omitempty"`
	Specialties []string      `protobuf:"bytes,6,rep,name=specialties,proto3" json:"specialties,omitempty"`
	CacheRef    *string       `protobuf:"bytes,7,opt,name=cache_ref,json=cacheRef,proto3,oneof" json:"cache_ref,omitempty"`
	PageNumber  *int32        `protobuf:"varint,8,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	PageSize    *int32        `protobuf:"varint,9,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *CompanyDetailRequest) Reset() {
	*x = CompanyDetailRequest{}
	mi := &file_job_search_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyDetailRequest) ProtoMessage() {}

func (x *CompanyDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyDetailRequest.ProtoReflect.Descriptor instead.
func (*CompanyDetailRequest) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyDetailRequest) GetReferenceId() string {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return ""
}

func (x *CompanyDetailRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CompanyDetailRequest) GetIndustry() string {
	if x != nil && x.Industry != nil {
		return *x.Industry
	}
	return ""
}

func (x *CompanyDetailRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *CompanyDetailRequest) GetGroupSize() []CompanySize {
	if x != nil {
		return x.GroupSize
	}
	return nil
}

func (x *CompanyDetailRequest) GetSpecialties() []string {
	if x != nil {
		return x.Specialties
	}
	return nil
}

func (x *CompanyDetailRequest) GetCacheRef() string {
	if x != nil && x.CacheRef != nil {
		return *x.CacheRef
	}
	return ""
}

func (x *CompanyDetailRequest) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *CompanyDetailRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type CompanyDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyDetails []*CompanyDetail `protobuf:"bytes,1,rep,name=company_details,json=companyDetails,proto3" json:"company_details,omitempty"`
	TotalCount     *int32           `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PageNumber     *int32           `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	TotalPage      *int32           `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"`
	Message        *string          `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	CacheRef       *string          `protobuf:"bytes,6,opt,name=cache_ref,json=cacheRef,proto3,oneof" json:"cache_ref,omitempty"`
}

func (x *CompanyDetailResponse) Reset() {
	*x = CompanyDetailResponse{}
	mi := &file_job_search_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyDetailResponse) ProtoMessage() {}

func (x *CompanyDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_search_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyDetailResponse.ProtoReflect.Descriptor instead.
func (*CompanyDetailResponse) Descriptor() ([]byte, []int) {
	return file_job_search_proto_rawDescGZIP(), []int{5}
}

func (x *CompanyDetailResponse) GetCompanyDetails() []*CompanyDetail {
	if x != nil {
		return x.CompanyDetails
	}
	return nil
}

func (x *CompanyDetailResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CompanyDetailResponse) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *CompanyDetailResponse) GetTotalPage() int32 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *CompanyDetailResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CompanyDetailResponse) GetCacheRef() string {
	if x != nil && x.CacheRef != nil {
		return *x.CacheRef
	}
	return ""
}

var File_job_search_proto protoreflect.FileDescriptor

var file_job_search_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x8e, 0x07, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6c, 0x61, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0b, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x78, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x4a, 0x6f, 0x62,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x22, 0xb9, 0x03, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x98, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x2a, 0x31, 0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x84, 0x01, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x45, 0x45, 0x52, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x50, 0x50, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x45, 0x53, 0x48, 0x49, 0x50, 0x10, 0x07, 0x2a,
	0x6d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x43,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x44, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x46, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x47,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x48, 0x10, 0x07, 0x32, 0xe2,
	0x04, 0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b,
	0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x15, 0x5a, 0x13, 0x6a, 0x6f, 0x62, 0x2d, 0x73, 0x65, 0x65, 0x6b, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_job_search_proto_rawDescOnce sync.Once
	file_job_search_proto_rawDescData = file_job_search_proto_rawDesc
)

func file_job_search_proto_rawDescGZIP() []byte {
	file_job_search_proto_rawDescOnce.Do(func() {
		file_job_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_search_proto_rawDescData)
	})
	return file_job_search_proto_rawDescData
}

var file_job_search_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_job_search_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_job_search_proto_goTypes = []any{
	(SalaryType)(0),               // 0: job_seek.job_search.SalaryType
	(WorkType)(0),                 // 1: job_seek.job_search.WorkType
	(CompanySize)(0),              // 2: job_seek.job_search.CompanySize
	(*JobSearchRequest)(nil),      // 3: job_seek.job_search.JobSearchRequest
	(*JobSearchResponse)(nil),     // 4: job_seek.job_search.JobSearchResponse
	(*Job)(nil),                   // 5: job_seek.job_search.Job
	(*CompanyDetail)(nil),         // 6: job_seek.job_search.CompanyDetail
	(*CompanyDetailRequest)(nil),  // 7: job_seek.job_search.CompanyDetailRequest
	(*CompanyDetailResponse)(nil), // 8: job_seek.job_search.CompanyDetailResponse
}
var file_job_search_proto_depIdxs = []int32{
	0,  // 0: job_seek.job_search.JobSearchRequest.salary_type:type_name -> job_seek.job_search.SalaryType
	1,  // 1: job_seek.job_search.JobSearchRequest.work_type:type_name -> job_seek.job_search.WorkType
	2,  // 2: job_seek.job_search.JobSearchRequest.company_size:type_name -> job_seek.job_search.CompanySize
	5,  // 3: job_seek.job_search.JobSearchResponse.job:type_name -> job_seek.job_search.Job
	6,  // 4: job_seek.job_search.Job.company_detail:type_name -> job_seek.job_search.CompanyDetail
	2,  // 5: job_seek.job_search.CompanyDetail.group_size:type_name -> job_seek.job_search.CompanySize
	2,  // 6: job_seek.job_search.CompanyDetailRequest.group_size:type_name -> job_seek.job_search.CompanySize
	6,  // 7: job_seek.job_search.CompanyDetailResponse.company_details:type_name -> job_seek.job_search.CompanyDetail
	3,  // 8: job_seek.job_search.JobSearchService.JobSearch:input_type -> job_seek.job_search.JobSearchRequest
	3,  // 9: job_seek.job_search.JobSearchService.UserJobSearch:input_type -> job_seek.job_search.JobSearchRequest
	3,  // 10: job_seek.job_search.JobSearchService.GetJobByPostId:input_type -> job_seek.job_search.JobSearchRequest
	3,  // 11: job_seek.job_search.JobSearchService.GetJobByCompanyId:input_type -> job_seek.job_search.JobSearchRequest
	7,  // 12: job_seek.job_search.JobSearchService.ListCompanyDetail:input_type -> job_seek.job_search.CompanyDetailRequest
	7,  // 13: job_seek.job_search.JobSearchService.GetCompanyDetail:input_type -> job_seek.job_search.CompanyDetailRequest
	4,  // 14: job_seek.job_search.JobSearchService.JobSearch:output_type -> job_seek.job_search.JobSearchResponse
	4,  // 15: job_seek.job_search.JobSearchService.UserJobSearch:output_type -> job_seek.job_search.JobSearchResponse
	4,  // 16: job_seek.job_search.JobSearchService.GetJobByPostId:output_type -> job_seek.job_search.JobSearchResponse
	4,  // 17: job_seek.job_search.JobSearchService.GetJobByCompanyId:output_type -> job_seek.job_search.JobSearchResponse
	8,  // 18: job_seek.job_search.JobSearchService.ListCompanyDetail:output_type -> job_seek.job_search.CompanyDetailResponse
	6,  // 19: job_seek.job_search.JobSearchService.GetCompanyDetail:output_type -> job_seek.job_search.CompanyDetail
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_job_search_proto_init() }
func file_job_search_proto_init() {
	if File_job_search_proto != nil {
		return
	}
	file_job_search_proto_msgTypes[0].OneofWrappers = []any{}
	file_job_search_proto_msgTypes[1].OneofWrappers = []any{}
	file_job_search_proto_msgTypes[2].OneofWrappers = []any{}
	file_job_search_proto_msgTypes[4].OneofWrappers = []any{}
	file_job_search_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_search_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_search_proto_goTypes,
		DependencyIndexes: file_job_search_proto_depIdxs,
		EnumInfos:         file_job_search_proto_enumTypes,
		MessageInfos:      file_job_search_proto_msgTypes,
	}.Build()
	File_job_search_proto = out.File
	file_job_search_proto_rawDesc = nil
	file_job_search_proto_goTypes = nil
	file_job_search_proto_depIdxs = nil
}
