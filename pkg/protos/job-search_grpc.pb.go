// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: job-search.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JobSearchService_JobSearch_FullMethodName         = "/job_seek.job_search.JobSearchService/JobSearch"
	JobSearchService_UserJobSearch_FullMethodName     = "/job_seek.job_search.JobSearchService/UserJobSearch"
	JobSearchService_GetJobByPostId_FullMethodName    = "/job_seek.job_search.JobSearchService/GetJobByPostId"
	JobSearchService_GetJobByCompanyId_FullMethodName = "/job_seek.job_search.JobSearchService/GetJobByCompanyId"
	JobSearchService_ListCompanyDetail_FullMethodName = "/job_seek.job_search.JobSearchService/ListCompanyDetail"
	JobSearchService_GetCompanyDetail_FullMethodName  = "/job_seek.job_search.JobSearchService/GetCompanyDetail"
)

// JobSearchServiceClient is the client API for JobSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSearchServiceClient interface {
	JobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	UserJobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	GetJobByPostId(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	GetJobByCompanyId(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error)
	ListCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetailResponse, error)
	GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetail, error)
}

type jobSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSearchServiceClient(cc grpc.ClientConnInterface) JobSearchServiceClient {
	return &jobSearchServiceClient{cc}
}

func (c *jobSearchServiceClient) JobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, JobSearchService_JobSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSearchServiceClient) UserJobSearch(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, JobSearchService_UserJobSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSearchServiceClient) GetJobByPostId(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, JobSearchService_GetJobByPostId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSearchServiceClient) GetJobByCompanyId(ctx context.Context, in *JobSearchRequest, opts ...grpc.CallOption) (*JobSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobSearchResponse)
	err := c.cc.Invoke(ctx, JobSearchService_GetJobByCompanyId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSearchServiceClient) ListCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompanyDetailResponse)
	err := c.cc.Invoke(ctx, JobSearchService_ListCompanyDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSearchServiceClient) GetCompanyDetail(ctx context.Context, in *CompanyDetailRequest, opts ...grpc.CallOption) (*CompanyDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompanyDetail)
	err := c.cc.Invoke(ctx, JobSearchService_GetCompanyDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSearchServiceServer is the server API for JobSearchService service.
// All implementations must embed UnimplementedJobSearchServiceServer
// for forward compatibility
type JobSearchServiceServer interface {
	JobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	UserJobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	GetJobByPostId(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	GetJobByCompanyId(context.Context, *JobSearchRequest) (*JobSearchResponse, error)
	ListCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetailResponse, error)
	GetCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetail, error)
	mustEmbedUnimplementedJobSearchServiceServer()
}

// UnimplementedJobSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobSearchServiceServer struct {
}

func (UnimplementedJobSearchServiceServer) JobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSearch not implemented")
}
func (UnimplementedJobSearchServiceServer) UserJobSearch(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserJobSearch not implemented")
}
func (UnimplementedJobSearchServiceServer) GetJobByPostId(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByPostId not implemented")
}
func (UnimplementedJobSearchServiceServer) GetJobByCompanyId(context.Context, *JobSearchRequest) (*JobSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByCompanyId not implemented")
}
func (UnimplementedJobSearchServiceServer) ListCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyDetail not implemented")
}
func (UnimplementedJobSearchServiceServer) GetCompanyDetail(context.Context, *CompanyDetailRequest) (*CompanyDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDetail not implemented")
}
func (UnimplementedJobSearchServiceServer) mustEmbedUnimplementedJobSearchServiceServer() {}

// UnsafeJobSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobSearchServiceServer will
// result in compilation errors.
type UnsafeJobSearchServiceServer interface {
	mustEmbedUnimplementedJobSearchServiceServer()
}

func RegisterJobSearchServiceServer(s grpc.ServiceRegistrar, srv JobSearchServiceServer) {
	s.RegisterService(&JobSearchService_ServiceDesc, srv)
}

func _JobSearchService_JobSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).JobSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_JobSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).JobSearch(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSearchService_UserJobSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).UserJobSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_UserJobSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).UserJobSearch(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSearchService_GetJobByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).GetJobByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_GetJobByPostId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).GetJobByPostId(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSearchService_GetJobByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).GetJobByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_GetJobByCompanyId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).GetJobByCompanyId(ctx, req.(*JobSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSearchService_ListCompanyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).ListCompanyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_ListCompanyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).ListCompanyDetail(ctx, req.(*CompanyDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSearchService_GetCompanyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSearchServiceServer).GetCompanyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSearchService_GetCompanyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSearchServiceServer).GetCompanyDetail(ctx, req.(*CompanyDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobSearchService_ServiceDesc is the grpc.ServiceDesc for JobSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_seek.job_search.JobSearchService",
	HandlerType: (*JobSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobSearch",
			Handler:    _JobSearchService_JobSearch_Handler,
		},
		{
			MethodName: "UserJobSearch",
			Handler:    _JobSearchService_UserJobSearch_Handler,
		},
		{
			MethodName: "GetJobByPostId",
			Handler:    _JobSearchService_GetJobByPostId_Handler,
		},
		{
			MethodName: "GetJobByCompanyId",
			Handler:    _JobSearchService_GetJobByCompanyId_Handler,
		},
		{
			MethodName: "ListCompanyDetail",
			Handler:    _JobSearchService_ListCompanyDetail_Handler,
		},
		{
			MethodName: "GetCompanyDetail",
			Handler:    _JobSearchService_GetCompanyDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job-search.proto",
}
