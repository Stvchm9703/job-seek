// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: job-apply.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobStatus int32

const (
	JobStatus_PENDING   JobStatus = 0
	JobStatus_SENT      JobStatus = 1
	JobStatus_ACCEPTED  JobStatus = 2
	JobStatus_REJECTED  JobStatus = 3
	JobStatus_CANCELLED JobStatus = 4
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "PENDING",
		1: "SENT",
		2: "ACCEPTED",
		3: "REJECTED",
		4: "CANCELLED",
	}
	JobStatus_value = map[string]int32{
		"PENDING":   0,
		"SENT":      1,
		"ACCEPTED":  2,
		"REJECTED":  3,
		"CANCELLED": 4,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_job_apply_proto_enumTypes[0].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_job_apply_proto_enumTypes[0]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{0}
}

type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{0}
}

func (x *JobResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JobApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId       string     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	UserId      string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status      *JobStatus `protobuf:"varint,3,opt,name=status,proto3,enum=job_seek.job_apply.JobStatus,oneof" json:"status,omitempty"`
	CreatedAt   *string    `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt   *string    `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	CoverLetter *string    `protobuf:"bytes,6,opt,name=cover_letter,json=coverLetter,proto3,oneof" json:"cover_letter,omitempty"`
	CvContent   *string    `protobuf:"bytes,7,opt,name=cv_content,json=cvContent,proto3,oneof" json:"cv_content,omitempty"`
	CvFile      []byte     `protobuf:"bytes,8,opt,name=cv_file,json=cvFile,proto3,oneof" json:"cv_file,omitempty"`
	Job         *Job       `protobuf:"bytes,9,opt,name=job,proto3,oneof" json:"job,omitempty"`
	// for update
	DeletedAt *string `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Message   *string `protobuf:"bytes,11,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *JobApply) Reset() {
	*x = JobApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobApply) ProtoMessage() {}

func (x *JobApply) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobApply.ProtoReflect.Descriptor instead.
func (*JobApply) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{1}
}

func (x *JobApply) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobApply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobApply) GetStatus() JobStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return JobStatus_PENDING
}

func (x *JobApply) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *JobApply) GetUpdatedAt() string {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return ""
}

func (x *JobApply) GetCoverLetter() string {
	if x != nil && x.CoverLetter != nil {
		return *x.CoverLetter
	}
	return ""
}

func (x *JobApply) GetCvContent() string {
	if x != nil && x.CvContent != nil {
		return *x.CvContent
	}
	return ""
}

func (x *JobApply) GetCvFile() []byte {
	if x != nil {
		return x.CvFile
	}
	return nil
}

func (x *JobApply) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobApply) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

func (x *JobApply) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type GetJobApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId      *string     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"`
	UserId     *string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Status     []JobStatus `protobuf:"varint,3,rep,packed,name=status,proto3,enum=job_seek.job_apply.JobStatus" json:"status,omitempty"`
	PageNumber *int32      `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	PageSize   *int32      `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *GetJobApplyRequest) Reset() {
	*x = GetJobApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobApplyRequest) ProtoMessage() {}

func (x *GetJobApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobApplyRequest.ProtoReflect.Descriptor instead.
func (*GetJobApplyRequest) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{2}
}

func (x *GetJobApplyRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *GetJobApplyRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetJobApplyRequest) GetStatus() []JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetJobApplyRequest) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *GetJobApplyRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type GetJobApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobApplies    []*JobApply `protobuf:"bytes,1,rep,name=job_applies,json=jobApplies,proto3" json:"job_applies,omitempty"`
	TotalCount    *int32      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PageNumber    *int32      `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	TotalPage     *int32      `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"`
	Message       *string     `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	RequestStatus *string     `protobuf:"bytes,6,opt,name=request_status,json=requestStatus,proto3,oneof" json:"request_status,omitempty"`
}

func (x *GetJobApplyResponse) Reset() {
	*x = GetJobApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobApplyResponse) ProtoMessage() {}

func (x *GetJobApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobApplyResponse.ProtoReflect.Descriptor instead.
func (*GetJobApplyResponse) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{3}
}

func (x *GetJobApplyResponse) GetJobApplies() []*JobApply {
	if x != nil {
		return x.JobApplies
	}
	return nil
}

func (x *GetJobApplyResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *GetJobApplyResponse) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *GetJobApplyResponse) GetTotalPage() int32 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *GetJobApplyResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GetJobApplyResponse) GetRequestStatus() string {
	if x != nil && x.RequestStatus != nil {
		return *x.RequestStatus
	}
	return ""
}

type JobBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     string  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	UserId    string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt *string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt *string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	DeletedAt *string `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
	Job       *Job    `protobuf:"bytes,6,opt,name=job,proto3,oneof" json:"job,omitempty"`
}

func (x *JobBookmark) Reset() {
	*x = JobBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBookmark) ProtoMessage() {}

func (x *JobBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBookmark.ProtoReflect.Descriptor instead.
func (*JobBookmark) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{4}
}

func (x *JobBookmark) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobBookmark) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobBookmark) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *JobBookmark) GetUpdatedAt() string {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return ""
}

func (x *JobBookmark) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

func (x *JobBookmark) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type JobBookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId         *string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"`
	UserId        *string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	IsDeleted     *bool   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3,oneof" json:"is_deleted,omitempty"`
	ShouldShowAll *bool   `protobuf:"varint,4,opt,name=should_show_all,json=shouldShowAll,proto3,oneof" json:"should_show_all,omitempty"`
}

func (x *JobBookmarkRequest) Reset() {
	*x = JobBookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBookmarkRequest) ProtoMessage() {}

func (x *JobBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBookmarkRequest.ProtoReflect.Descriptor instead.
func (*JobBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{5}
}

func (x *JobBookmarkRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *JobBookmarkRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *JobBookmarkRequest) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *JobBookmarkRequest) GetShouldShowAll() bool {
	if x != nil && x.ShouldShowAll != nil {
		return *x.ShouldShowAll
	}
	return false
}

type JobBookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobBookmarkResponse) Reset() {
	*x = JobBookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBookmarkResponse) ProtoMessage() {}

func (x *JobBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBookmarkResponse.ProtoReflect.Descriptor instead.
func (*JobBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{6}
}

func (x *JobBookmarkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListJobBookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookmarkedJobs []*JobBookmark `protobuf:"bytes,1,rep,name=bookmarked_jobs,json=bookmarkedJobs,proto3" json:"bookmarked_jobs,omitempty"`
	TotalCount     *int32         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	PageNumber     *int32         `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"`
	TotalPage      *int32         `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3,oneof" json:"total_page,omitempty"`
	Message        *string        `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
	RequestStatus  *string        `protobuf:"bytes,6,opt,name=request_status,json=requestStatus,proto3,oneof" json:"request_status,omitempty"`
}

func (x *ListJobBookmarkResponse) Reset() {
	*x = ListJobBookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_apply_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobBookmarkResponse) ProtoMessage() {}

func (x *ListJobBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_apply_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobBookmarkResponse.ProtoReflect.Descriptor instead.
func (*ListJobBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_job_apply_proto_rawDescGZIP(), []int{7}
}

func (x *ListJobBookmarkResponse) GetBookmarkedJobs() []*JobBookmark {
	if x != nil {
		return x.BookmarkedJobs
	}
	return nil
}

func (x *ListJobBookmarkResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ListJobBookmarkResponse) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *ListJobBookmarkResponse) GetTotalPage() int32 {
	if x != nil && x.TotalPage != nil {
		return *x.TotalPage
	}
	return 0
}

func (x *ListJobBookmarkResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListJobBookmarkResponse) GetRequestStatus() string {
	if x != nil && x.RequestStatus != nil {
		return *x.RequestStatus
	}
	return ""
}

var File_job_apply_proto protoreflect.FileDescriptor

var file_job_apply_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x2d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x10, 0x6a, 0x6f, 0x62, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x94, 0x04, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x76, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x09, 0x63, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x63, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05,
	0x52, 0x06, 0x63, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a,
	0x6f, 0x62, 0x48, 0x06, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x76,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x76, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xdd, 0x02, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a,
	0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x0b, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b,
	0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x62, 0x48,
	0x03, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x22, 0xd9,
	0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0x2f, 0x0a, 0x13, 0x4a, 0x6f,
	0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4a, 0x6f, 0x62,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x4d, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0x96, 0x05, 0x0a, 0x14, 0x4a, 0x6f,
	0x62, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x1c,
	0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x1f, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x1a, 0x1f, 0x2e,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x26,
	0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x26,
	0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a,
	0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6f,
	0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x26, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x6f, 0x62, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x2e, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x4a,
	0x6f, 0x62, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x15, 0x5a, 0x13, 0x6a, 0x6f, 0x62, 0x2d, 0x73, 0x65, 0x65, 0x6b, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_job_apply_proto_rawDescOnce sync.Once
	file_job_apply_proto_rawDescData = file_job_apply_proto_rawDesc
)

func file_job_apply_proto_rawDescGZIP() []byte {
	file_job_apply_proto_rawDescOnce.Do(func() {
		file_job_apply_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_apply_proto_rawDescData)
	})
	return file_job_apply_proto_rawDescData
}

var file_job_apply_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_job_apply_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_job_apply_proto_goTypes = []any{
	(JobStatus)(0),                  // 0: job_seek.job_apply.JobStatus
	(*JobResponse)(nil),             // 1: job_seek.job_apply.JobResponse
	(*JobApply)(nil),                // 2: job_seek.job_apply.JobApply
	(*GetJobApplyRequest)(nil),      // 3: job_seek.job_apply.GetJobApplyRequest
	(*GetJobApplyResponse)(nil),     // 4: job_seek.job_apply.GetJobApplyResponse
	(*JobBookmark)(nil),             // 5: job_seek.job_apply.JobBookmark
	(*JobBookmarkRequest)(nil),      // 6: job_seek.job_apply.JobBookmarkRequest
	(*JobBookmarkResponse)(nil),     // 7: job_seek.job_apply.JobBookmarkResponse
	(*ListJobBookmarkResponse)(nil), // 8: job_seek.job_apply.ListJobBookmarkResponse
	(*Job)(nil),                     // 9: job_seek.job_search.Job
}
var file_job_apply_proto_depIdxs = []int32{
	0,  // 0: job_seek.job_apply.JobApply.status:type_name -> job_seek.job_apply.JobStatus
	9,  // 1: job_seek.job_apply.JobApply.job:type_name -> job_seek.job_search.Job
	0,  // 2: job_seek.job_apply.GetJobApplyRequest.status:type_name -> job_seek.job_apply.JobStatus
	2,  // 3: job_seek.job_apply.GetJobApplyResponse.job_applies:type_name -> job_seek.job_apply.JobApply
	9,  // 4: job_seek.job_apply.JobBookmark.job:type_name -> job_seek.job_search.Job
	5,  // 5: job_seek.job_apply.ListJobBookmarkResponse.bookmarked_jobs:type_name -> job_seek.job_apply.JobBookmark
	2,  // 6: job_seek.job_apply.JobExtendsionService.ApplyJob:input_type -> job_seek.job_apply.JobApply
	2,  // 7: job_seek.job_apply.JobExtendsionService.UpdateJobApply:input_type -> job_seek.job_apply.JobApply
	3,  // 8: job_seek.job_apply.JobExtendsionService.ListJobApply:input_type -> job_seek.job_apply.GetJobApplyRequest
	3,  // 9: job_seek.job_apply.JobExtendsionService.GetJobApply:input_type -> job_seek.job_apply.GetJobApplyRequest
	6,  // 10: job_seek.job_apply.JobExtendsionService.JobBookmark:input_type -> job_seek.job_apply.JobBookmarkRequest
	6,  // 11: job_seek.job_apply.JobExtendsionService.ListJobBookmark:input_type -> job_seek.job_apply.JobBookmarkRequest
	6,  // 12: job_seek.job_apply.JobExtendsionService.DeleteJobBookmark:input_type -> job_seek.job_apply.JobBookmarkRequest
	1,  // 13: job_seek.job_apply.JobExtendsionService.ApplyJob:output_type -> job_seek.job_apply.JobResponse
	1,  // 14: job_seek.job_apply.JobExtendsionService.UpdateJobApply:output_type -> job_seek.job_apply.JobResponse
	4,  // 15: job_seek.job_apply.JobExtendsionService.ListJobApply:output_type -> job_seek.job_apply.GetJobApplyResponse
	2,  // 16: job_seek.job_apply.JobExtendsionService.GetJobApply:output_type -> job_seek.job_apply.JobApply
	7,  // 17: job_seek.job_apply.JobExtendsionService.JobBookmark:output_type -> job_seek.job_apply.JobBookmarkResponse
	8,  // 18: job_seek.job_apply.JobExtendsionService.ListJobBookmark:output_type -> job_seek.job_apply.ListJobBookmarkResponse
	7,  // 19: job_seek.job_apply.JobExtendsionService.DeleteJobBookmark:output_type -> job_seek.job_apply.JobBookmarkResponse
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_job_apply_proto_init() }
func file_job_apply_proto_init() {
	if File_job_apply_proto != nil {
		return
	}
	file_job_search_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_job_apply_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JobApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetJobApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetJobApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JobBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*JobBookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*JobBookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_apply_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListJobBookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_job_apply_proto_msgTypes[1].OneofWrappers = []any{}
	file_job_apply_proto_msgTypes[2].OneofWrappers = []any{}
	file_job_apply_proto_msgTypes[3].OneofWrappers = []any{}
	file_job_apply_proto_msgTypes[4].OneofWrappers = []any{}
	file_job_apply_proto_msgTypes[5].OneofWrappers = []any{}
	file_job_apply_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_apply_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_apply_proto_goTypes,
		DependencyIndexes: file_job_apply_proto_depIdxs,
		EnumInfos:         file_job_apply_proto_enumTypes,
		MessageInfos:      file_job_apply_proto_msgTypes,
	}.Build()
	File_job_apply_proto = out.File
	file_job_apply_proto_rawDesc = nil
	file_job_apply_proto_goTypes = nil
	file_job_apply_proto_depIdxs = nil
}
