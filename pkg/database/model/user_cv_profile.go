// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"job-seek/pkg/protos"
	"strings"
	"text/template"

	"github.com/k0kubun/pp/v3"
	"github.com/samber/lo"
	surrealdb "github.com/surrealdb/surrealdb.go"
)

type UserCVProfileModel struct {
	Id         string   `json:"id"`
	UserId     string   `json:"user_id"`
	CvData     []byte   `json:"cv_data"`
	CvKeywords []string `json:"cv_keywords"`
}

type UserCVProfileUnmarshalModel struct {
	Id         string                   `json:"id"`
	UserId     string                   `json:"user_id"`
	CvData     []byte                   `json:"cv_data"`
	CvKeywords []PreferenceKeywordModel `json:"cv_keywords"`
}

func (m *UserCVProfileUnmarshalModel) ToProto() *protos.UserCVProfile {
	return &protos.UserCVProfile{
		UserId:     m.UserId,
		CvId:       m.Id,
		CvData:     m.CvData,
		CvKeywords: lo.Map(m.CvKeywords, func(x PreferenceKeywordModel, _ int) *protos.PreferenceKeyword { return x.ToProto() }),
	}
}

func (m *UserCVProfileModel) FromProto(p *protos.UserCVProfile) {
	m.UserId = p.UserId
	m.Id = p.CvId
	m.CvData = p.CvData
	m.CvKeywords = lo.Map(p.CvKeywords, func(x *protos.PreferenceKeyword, _ int) string { return x.KwId })
}

func (m *UserCVProfileModel) GetModel(db *surrealdb.DB) (*protos.UserCVProfile, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	query := fmt.Sprintf(`
	SELECT *, (SELECT * FROM PreferenceKeyword WHERE id INSIDE $parent.CvKeywords) AS CvKeywords
	FROM UserCVProfile:%s;`, m.Id)
	result, err := db.Query(query, nil)
	if err != nil {

		return nil, err
	}

	var queryResult []QueryResult[UserCVProfileUnmarshalModel]
	// err = surrealdb.Unmarshal(result, jobqueryResult)
	jsonResult, _ := json.Marshal(result)
	err = json.Unmarshal(jsonResult, &queryResult)
	if err != nil {
		errorWrap := errors.Join(err, fmt.Errorf("query: %s", query), fmt.Errorf("raw: %s", jsonResult))
		// log.Fatalf("error: %v", errorWrap)
		return nil, errorWrap
		// return nil, err
	}
	// pp.Println("jobs:", jobqueryResult)
	if len(queryResult) == 0 || len(queryResult[0].Result) == 0 {
		return nil, fmt.Errorf("no data found")
	}
	// pp.Println("jobs:", jobqueryResult[0].Result[0])
	return queryResult[0].Result[0].ToProto(), nil
}

func (m *UserCVProfileModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	queryTemplate, _ := template.New("createUserCVProfile").Parse(`
INSERT INTO UserCVProfile {
	UserId   : r"{{.UserId}}",   
	CvData     : b"{{.CvData}}",   
	CvKeywords : r"{{.CvKeywords}}",
}	`)
	var doc bytes.Buffer
	var err error
	err = queryTemplate.Execute(&doc, m)
	if err != nil {
		return err
	}
	// _, err := sd.Create(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	query := strings.ReplaceAll(doc.String(), "\n", " ")
	query = strings.ReplaceAll(query, "\t", " ")
	query = strings.ReplaceAll(query, "\r", " ")
	query = strings.ReplaceAll(query, `\"`, `"`)
	query = strings.Join(strings.Fields(strings.TrimSpace(query)), " ")

	result, err := sd.Query(query, m)
	var message map[string]interface{}
	surrealdb.Unmarshal(result, message)
	if err != nil {
		fmt.Println("query:", query)
		pp.Println("message:", message)
		return errors.Join(err, fmt.Errorf("query: %s", query), pp.Errorf("message: %v", message))
	}
	return nil
}

func (m *UserCVProfileModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("UserCVProfile:%s", m.Id), m)
	return err
}

func (m *UserCVProfileModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	query := `
DEFINE TABLE IF NOT EXISTS UserCVProfile SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	UserId 					ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	CvData 					ON TABLE UserAccount TYPE		bytes;
	DEFINE FIELD IF NOT EXISTS	CvKeywords			ON TABLE UserAccount TYPE		array<record<PreferenceKeyword>>;
`
	_, err := sd.Query(query, nil)
	return err
}
