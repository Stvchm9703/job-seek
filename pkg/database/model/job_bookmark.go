// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"
	"strconv"
	"time"

	"github.com/samber/lo"
	"gorm.io/gorm"
)

type JobBookmarkModel struct {
	gorm.Model
	JobID  int `json:"job_id"`
	Job    JobModel
	UserID int `json:"user_id"`
	User   UserAccountModel
}

func (JobBookmarkModel) TableName() string {
	return "job_bookmark"
}

func (m *JobBookmarkModel) ToProto() *protos.JobBookmark {
	createdAt := m.CreatedAt.Format(time.RFC3339)
	updatedAt := m.UpdatedAt.Format(time.RFC3339)
	deleteAt := ""
	return &protos.JobBookmark{
		JobId:     m.Job.PostId,
		UserId:    fmt.Sprintf("%d", m.User.ID),
		CreatedAt: &createdAt,
		UpdatedAt: &updatedAt,
		DeletedAt: &deleteAt,
		Job:       nil,
	}
}

func (m *JobBookmarkModel) FromProto(p *protos.JobBookmark) {
	jid, _ := strconv.Atoi(p.GetJobId())
	m.JobID = int(jid)

	uid, _ := strconv.Atoi(p.GetUserId())
	m.UserID = int(uid)

}

func (m *JobBookmarkModel) GetModel(db *gorm.DB) (*protos.JobBookmark, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	if err := db.Model(&JobBookmarkModel{}).Preload("Job").First(m).Error; err != nil {
		// db.Model(&JobBookmarkModel{}).Preload("Job").Where("user_id = ? AND job_id = ?", m.User.ID, m.Job.PostId).First(m)
		return nil, err
	}
	return m.ToProto(), nil

	// query := fmt.Sprintf(`
	// SELECT *,
	// 	(SELECT *,
	// 		(SELECT * FROM CompanyDetail  WHERE id = $parent.CompanyDetail Limit 1)[0] AS CompanyDetail
	// 		FROM Job
	// 		WHERE PostId = $parent.JobId
	// 	)[0] AS Job
	// FROM JobBookmark:[%s, %s];
	// `, m.UserId, m.JobId)
	// result, err := db.Query(query, nil)

	// resultMap := result.([]map[string]map[string][]interface{})

	// var queryResult []QueryResult[JobBookmarkUnmarshalModel]
	// // err = surrealdb.Unmarshal(result, jobqueryResult)
	// jsonResult, _ := json.Marshal(result)
	// err = json.Unmarshal(jsonResult, &queryResult)
	// if err != nil {
	// 	errorWrap := errors.Join(err, fmt.Errorf("query: %s", query), fmt.Errorf("raw: %s", jsonResult))
	// 	log.Fatalf("error: %v", errorWrap)
	// 	return nil, errorWrap
	// 	// return nil, err
	// }
	// // pp.Println("jobs:", jobqueryResult)
	// if len(queryResult) == 0 || len(queryResult[0].Result) == 0 {
	// 	return nil, fmt.Errorf("no data found")
	// }
	// // pp.Println("jobs:", jobqueryResult[0].Result[0])
	// return queryResult[0].Result[0].ToProto(), nil

}

func (m *JobBookmarkModel) GetModelByUser(db *gorm.DB) ([]*protos.JobBookmark, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	var result []JobBookmarkModel
	if err := db.Model(&JobBookmarkModel{}).Preload("Job").Where("user_id = ?", m.UserID).Find(&result).Error; err != nil {
		return nil, err
	}

	// query := `
	// SELECT
	// 	*,
	// 	(SELECT *,
	// 		(SELECT * FROM CompanyDetail  WHERE id = $parent.CompanyDetail Limit 1)[0] AS CompanyDetail
	// 		FROM Job
	// 		WHERE PostId = $parent.JobId
	// 	)[0] AS Job
	// FROM JobBookmark
	// WHERE UserId = $user_id
	// ;
	// `

	// result, err := db.Query(query, map[string]interface{}{
	// 	"user_id": m.UserId,
	// })

	// if err != nil {
	// 	return nil, err
	// }
	// var queryResult []QueryResult[JobBookmarkUnmarshalModel]
	// // err = surrealdb.Unmarshal(result, jobqueryResult)
	// jsonResult, _ := json.Marshal(result)
	// err = json.Unmarshal(jsonResult, &queryResult)
	// if err != nil {
	// 	errorWrap := errors.Join(err, fmt.Errorf("query: %s", query), fmt.Errorf("raw: %s", jsonResult))
	// 	log.Fatalf("error: %v", errorWrap)
	// 	return nil, errorWrap
	// 	// return nil, err
	// }
	// // pp.Println("jobs:", jobqueryResult)
	// if len(queryResult) == 0 || len(queryResult[0].Result) == 0 {
	// 	return nil, fmt.Errorf("no data found")
	// }
	// // pp.Println("jobs:", jobqueryResult[0].Result[0])

	protoed := lo.Map(result, func(x JobBookmarkModel, _ int) *protos.JobBookmark {
		return x.ToProto()
	})
	return protoed, nil
}

func (m *JobBookmarkModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if err := sd.Create(m).Error; err != nil {
		return err
	}

	// 	queryTemplate, _ := template.New("createJobBookmark").Parse(`
	// INSERT INTO JobBookmark {
	// JobId     : r"{{.JobId}}",
	// UserId    : r"{{.UserId}}",
	// CreatedAt : s"",
	// UpdatedAt : s"",
	// DeletedAt : s"",
	// }	`)
	// 	var doc bytes.Buffer
	// 	var err error
	// 	err = queryTemplate.Execute(&doc, m)
	// 	if err != nil {
	// 		return err
	// 	}
	// 	// _, err := sd.Create(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	// 	query := strings.ReplaceAll(doc.String(), "\n", " ")
	// 	query = strings.ReplaceAll(query, "\t", " ")
	// 	query = strings.ReplaceAll(query, "\r", " ")
	// 	query = strings.ReplaceAll(query, `\"`, `"`)
	// 	query = strings.Join(strings.Fields(strings.TrimSpace(query)), " ")

	// 	result, err := sd.Query(query, m)
	// 	var message map[string]interface{}
	// 	surrealdb.Unmarshal(result, message)
	// 	if err != nil {
	// 		fmt.Println("query:", query)
	// 		pp.Println("message:", message)
	// 		return errors.Join(err, fmt.Errorf("query: %s", query), pp.Errorf("message: %v", message))
	// 	}
	return nil
}

func (m *JobBookmarkModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	err := sd.Save(m).Error
	return err
}

func (m JobBookmarkModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	// 	query := `
	// -- Table definition
	// DEFINE TABLE IF NOT EXISTS JobBookmark SCHEMAFULL;
	// -- Field definition
	// 	DEFINE FIELD IF NOT EXISTS	JobId 					ON TABLE JobBookmark TYPE		record<Job>;
	// 	DEFINE FIELD IF NOT EXISTS	UserId 					ON TABLE JobBookmark TYPE		record<UserAccount>;
	// 	DEFINE FIELD IF NOT EXISTS	CreatedAt 			ON TABLE JobBookmark TYPE		string;
	// 	DEFINE FIELD IF NOT EXISTS	UpdatedAt 			ON TABLE JobBookmark TYPE		string;
	// 	DEFINE FIELD IF NOT EXISTS	DeletedAt 			ON TABLE JobBookmark TYPE		string;
	// -- Index definition
	// 	DEFINE INDEX IF NOT EXISTS	id							ON TABLE JobBookmark COLUMNS UserId,JobId;
	// -- Event definition
	// 	DEFINE EVENT IF NOT EXISTS CreateHook ON TABLE JobBookmark
	// 		WHEN $event = "CREATE" OR $event = "INSERT"
	// 		THEN (
	// 			UPDATE JobBookmark SET CreatedAt = time::format(time::now(),"%+")
	// 				WHERE JobId = $after.JobId AND UserId = $after.UserId
	// 		);
	// 	DEFINE EVENT IF NOT EXISTS UpdateHook ON TABLE JobBookmark
	// 		WHEN $event = "CREATE" OR $event = "INSERT"
	// 		THEN (
	// 			UPDATE JobBookmark SET UpdatedAt = time::format(time::now(),"%+")
	// 				WHERE JobId = $after.JobId AND UserId = $after.UserId
	// 		);
	// -- END OF table definition
	// 		`
	// 	_, err := sd.Query(query, nil)
	return sd.AutoMigrate(&JobBookmarkModel{})

}
