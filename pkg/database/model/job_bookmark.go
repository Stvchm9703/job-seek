// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

type JobBookmarkModel struct {
	JobId     string `json:"job_id"`
	UserId    string `json:"user_id"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at,omitempty"`
	DeletedAt string `json:"deleted_at,omitempty"`
	// Job       string `json:"job,omitempty"`
}

func (m *JobBookmarkModel) ToProto() protos.JobBookmark {
	return protos.JobBookmark{
		JobId:     m.JobId,
		UserId:    m.UserId,
		CreatedAt: &m.CreatedAt,
		UpdatedAt: &m.UpdatedAt,
		DeletedAt: &m.DeletedAt,
		Job:       nil,
	}
}

func (m *JobBookmarkModel) FromProto(p *protos.JobBookmark) {
	m.JobId = p.JobId
	m.UserId = p.UserId
	m.CreatedAt = p.GetCreatedAt()
	m.UpdatedAt = p.GetUpdatedAt()
	m.DeletedAt = p.GetDeletedAt()
	// m.Job = p.GetJob().PostId
}

func (m *JobBookmarkModel) GetModel(db *surrealdb.DB) (*protos.JobBookmark, error) {
	result, err := db.Query(
		`
	SELECT *, (SELECT * FROM Job WHERE PostId = $parent.JobId) AS Job
	FROM JobBookmark:[$user_id,$job_id];
	`, map[string]interface{}{
			"job_id":  m.JobId,
			"user_id": m.UserId,
		})

	if err != nil {
		return nil, err
	}

	var data *protos.JobBookmark
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *JobBookmarkModel) GetModelByUser(db *surrealdb.DB) ([]*protos.JobBookmark, error) {
	result, err := db.Query(
		`
	SELECT *, (SELECT * FROM Job WHERE PostId = $parent.JobId) AS Job
	FROM JobBookmark 
	WHERE UserId = $user_id
	;
	`, map[string]interface{}{
			"user_id": m.UserId,
		})

	if err != nil {
		return nil, err
	}

	var data []*protos.JobBookmark
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *JobBookmarkModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Create(
		fmt.Sprintf("JobBookmark:[%s,%s]", m.UserId, m.JobId),
		m)
	return err
}

func (m *JobBookmarkModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("JobBookmark:[%s,%s]", m.UserId, m.JobId), m)
	return err
}

func (m JobBookmarkModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	query := `
-- Table definition
DEFINE TABLE IF NOT EXISTS JobBookmark SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	JobId 					ON TABLE JobBookmark TYPE		record<Job>;
	DEFINE FIELD IF NOT EXISTS	UserId 					ON TABLE JobBookmark TYPE		record<UserAccount>;
	DEFINE FIELD IF NOT EXISTS	CreatedAt 			ON TABLE JobBookmark TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UpdatedAt 			ON TABLE JobBookmark TYPE		string;
	DEFINE FIELD IF NOT EXISTS	DeletedAt 			ON TABLE JobBookmark TYPE		string;
-- Index definition
	DEFINE INDEX IF NOT EXISTS	id							ON TABLE JobBookmark COLUMNS UserId,JobId;
-- Event definition
	DEFINE EVENT IF NOT EXISTS CreateHook ON TABLE JobBookmark 
		WHEN $event = "CREATE" OR $event = "INSERT"
		THEN (
			UPDATE JobBookmark SET CreatedAt = time::format(time::now(),"%+") 
				WHERE JobId = $after.JobId AND UserId = $after.UserId
		);
	DEFINE EVENT IF NOT EXISTS UpdateHook ON TABLE JobBookmark 
		WHEN $event = "CREATE" OR $event = "INSERT"
		THEN (
			UPDATE JobBookmark SET UpdatedAt = time::format(time::now(),"%+") 
				WHERE JobId = $after.JobId AND UserId = $after.UserId
		);
-- END OF table definition
		`
	_, err := sd.Query(query, nil)
	return err

}
