// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"
	"strconv"
	"time"

	"github.com/samber/lo"
	"gorm.io/gorm"
)

type JobBookmarkModel struct {
	gorm.Model
	JobID  int `json:"job_id"`
	Job    JobModel
	UserID int `json:"user_id"`
	User   UserAccountModel
}

func (JobBookmarkModel) TableName() string {
	return "job_bookmark"
}

func (m *JobBookmarkModel) ToProto() *protos.JobBookmark {
	createdAt := m.CreatedAt.Format(time.RFC3339)
	updatedAt := m.UpdatedAt.Format(time.RFC3339)
	deleteAt := ""
	return &protos.JobBookmark{
		JobId:     m.Job.PostId,
		UserId:    fmt.Sprintf("%d", m.User.ID),
		CreatedAt: &createdAt,
		UpdatedAt: &updatedAt,
		DeletedAt: &deleteAt,
		Job:       nil,
	}
}

func (m *JobBookmarkModel) FromProto(p *protos.JobBookmark) {
	jid, _ := strconv.Atoi(p.GetJobId())
	m.JobID = int(jid)

	uid, _ := strconv.Atoi(p.GetUserId())
	m.UserID = int(uid)

}

func (m *JobBookmarkModel) GetModel(db *gorm.DB) (*protos.JobBookmark, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	if err := db.Model(&JobBookmarkModel{}).Preload("Job").First(m).Error; err != nil {
		// db.Model(&JobBookmarkModel{}).Preload("Job").Where("user_id = ? AND job_id = ?", m.User.ID, m.Job.PostId).First(m)
		return nil, err
	}
	return m.ToProto(), nil

}

func (m *JobBookmarkModel) GetModelByUser(db *gorm.DB) ([]*protos.JobBookmark, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	var result []JobBookmarkModel
	if err := db.Model(&JobBookmarkModel{}).Preload("Job").Where("user_id = ?", m.UserID).Find(&result).Error; err != nil {
		return nil, err
	}

	protoed := lo.Map(result, func(x JobBookmarkModel, _ int) *protos.JobBookmark {
		return x.ToProto()
	})
	return protoed, nil
}

func (m *JobBookmarkModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if err := sd.Create(m).Error; err != nil {
		return err
	}

	return nil
}

func (m *JobBookmarkModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	err := sd.Save(m).Error
	return err
}

func (m JobBookmarkModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	return sd.AutoMigrate(&JobBookmarkModel{})

}
