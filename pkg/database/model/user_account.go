// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"
	"strconv"

	"gorm.io/gorm"
)

type UserAccountModel struct {
	gorm.Model
	UserName     string `json:"UserName"`
	UserPassword string `json:"UserPassword"`
	UserEmail    string `json:"UserEmail"`
	UserPhone    string `json:"UserPhone"`
	UserAddress  string `json:"UserAddress"`
}

func (UserAccountModel) TableName() string {
	return "user_account"
}

func (m *UserAccountModel) ToProto() *protos.UserAccount {
	return &protos.UserAccount{
		Id:           fmt.Sprintf("%d", m.ID),
		UserName:     m.UserName,
		UserPassword: m.UserPassword,
		UserEmail:    m.UserEmail,
		UserPhone:    m.UserPhone,
		UserAddress:  m.UserAddress,
	}
}

func (m *UserAccountModel) FromProto(p *protos.UserAccount) {
	if p.Id == "" || p.Id == "-1" {
		m.ID = 0
	} else {
		idv, _ := strconv.Atoi(p.Id)
		m.ID = uint(idv)
	}
	m.UserName = p.UserName
	m.UserPassword = p.UserPassword
	m.UserEmail = p.UserEmail
	m.UserPhone = p.UserPhone
	m.UserAddress = p.UserAddress
}

func (m *UserAccountModel) GetModel(db *gorm.DB) (*protos.UserAccount, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	if m.ID == 0 {
		return nil, fmt.Errorf("ID is empty")
	}
	if err := db.First(m, m.ID).Error; err != nil {
		return nil, err
	}

	return m.ToProto(), nil
}

func (m *UserAccountModel) GetModelByWildKey(db *gorm.DB) (*protos.UserAccount, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	// query := fmt.Sprintf(`
	// SELECT * FROM UserAccount
	// 	WHERE UserName = '%s'
	// 	OR UserEmail = '%s'
	// 	OR id = '%s';
	// `, m.UserName, m.UserEmail, m.ID)

	// var result UserAccountModel
	if m.ID > 0 {
		if err := db.First(m).Error; err == nil {
			return m.ToProto(), nil
		}
	}

	if m.UserName == "" && m.UserEmail == "" {
		return nil, fmt.Errorf("UserName and UserEmail is empty")
	}

	if err := db.Where("user_name = ? OR user_email = ?", m.UserName, m.UserEmail).First(m).Error; err != nil {
		return nil, err
	}
	return m.ToProto(), nil

}

func (m *UserAccountModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if m.UserName == "" {
		return fmt.Errorf("UserName is empty")
	}
	if m.UserEmail == "" {
		return fmt.Errorf("UserEmail is empty")
	}
	if err := sd.Create(m).Error; err != nil {
		return err
	}
	return nil

}

func (m *UserAccountModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if m.ID == 0 {
		return fmt.Errorf("ID is empty")
	}

	if err := sd.Save(m).Error; err != nil {
		return err
	}

	return nil
}

func (m *UserAccountModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	return sd.AutoMigrate(&UserAccountModel{})
}
