// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

type UserAccountModel struct {
	UserId       string `json:"user_id"`
	UserName     string `json:"user_name"`
	UserPassword string `json:"user_password"`
	UserEmail    string `json:"user_email"`
	UserPhone    string `json:"user_phone"`
	UserAddress  string `json:"user_address"`
}

func (m *UserAccountModel) ToProto() protos.UserAccount {
	return protos.UserAccount{
		UserId:       m.UserId,
		UserName:     m.UserName,
		UserPassword: m.UserPassword,
		UserEmail:    m.UserEmail,
		UserPhone:    m.UserPhone,
		UserAddress:  m.UserAddress,
	}
}

func (m *UserAccountModel) FromProto(p *protos.UserAccount) {
	m.UserId = p.UserId
	m.UserName = p.UserName
	m.UserPassword = p.UserPassword
	m.UserEmail = p.UserEmail
	m.UserPhone = p.UserPhone
	m.UserAddress = p.UserAddress
}

func (m *UserAccountModel) GetModel(db *surrealdb.DB) (*protos.UserAccount, error) {
	result, err := db.Select(fmt.Sprintf("UserAccount:%s", m.UserId))
	if err != nil {
		return nil, err
	}

	var data *protos.UserAccount
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return nil, err
	}

	return data, nil

}

func (m *UserAccountModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Create(fmt.Sprintf("UserAccount:%s", m.UserId), m)
	return err
}

func (m *UserAccountModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("UserAccount:%s", m.UserId), m)
	return err
}

func (m *UserAccountModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	query := `
DEFINE  TABLE IF NOT EXISTS UserAccount SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	UserId 					ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UserName 				ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UserPassword		ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UserEmail 			ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UserPhone 			ON TABLE UserAccount TYPE		string;
	DEFINE FIELD IF NOT EXISTS	UserAddress 		ON TABLE UserAccount TYPE		string;
`
	_, err := sd.Query(query, nil)
	return err
}
