// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	"github.com/samber/lo"
	surrealdb "github.com/surrealdb/surrealdb.go"
)

type UserJobSearchPredictedPreferenceModel struct {
	Id         string   `json:"id"`
	UserId     string   `json:"user_id"`
	JobId      string   `json:"job_id"`
	SiteKey    string   `json:"site_key"`
	Locale     string   `json:"locale"`
	JobKeyword []string `json:"job_keyword"`
	Score      int      `json:"score"`
	Count      int      `json:"count"`
}

func (m *UserJobSearchPredictedPreferenceModel) ToProto() protos.UserJobSearchPredictedPreference {
	return protos.UserJobSearchPredictedPreference{
		RecordId:   m.Id,
		UserId:     m.UserId,
		JobId:      m.JobId,
		SiteKey:    m.SiteKey,
		Locale:     m.Locale,
		JobKeyword: []*protos.PreferenceKeyword{},
		Score:      int32(m.Score),
		Count:      int32(m.Count),
	}
}

func (m *UserJobSearchPredictedPreferenceModel) FromProto(p *protos.UserJobSearchPredictedPreference) {
	m.Id = p.RecordId
	m.UserId = p.UserId
	m.JobId = p.JobId
	m.SiteKey = p.SiteKey
	m.Locale = p.Locale
	m.JobKeyword = lo.Map(p.JobKeyword, func(x *protos.PreferenceKeyword, _ int) string { return x.KwId })
	m.Score = int(p.Score)
	m.Count = int(p.Count)
}

func (m *UserJobSearchPredictedPreferenceModel) GetModel(db *surrealdb.DB) (*protos.UserJobSearchPredictedPreference, error) {
	result, err := db.Query(fmt.Sprintf(`
	SELECT 
		*, 
		(SELECT * FROM PreferenceKeyword WHERE KwId INSIDE $parent.JobKeyword) AS JobKeyword
	FROM UserJobSearchPredictedPreference:%s;`, m.Id), nil)

	if err != nil {
		return nil, err
	}

	var data *protos.UserJobSearchPredictedPreference
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return nil, err
	}

	return data, nil

}

func (m *UserJobSearchPredictedPreferenceModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	result, err := sd.Create(
		"UserJobSearchPredictedPreference",
		map[string]interface{}{
			"UserId":     m.UserId,
			"JobId":      m.JobId,
			"SiteKey":    m.SiteKey,
			"Locale":     m.Locale,
			"JobKeyword": m.JobKeyword,
			"Score":      m.Score,
			"Count":      m.Count,
		})

	if err != nil {
		return err
	}
	var data *UserJobSearchPredictedPreferenceModel
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return err
	}
	m.Id = data.Id
	return nil
}

func (m *UserJobSearchPredictedPreferenceModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("UserJobSearchPredictedPreference:%s", m.Id), m)
	return err
}

func (m *UserJobSearchPredictedPreferenceModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	query := `
DEFINE TABLE IF NOT EXISTS UserJobSearchPredictedPreference SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	UserId 				ON TABLE UserJobSearchPredictedPreference TYPE		record<UserAccount>;
	DEFINE FIELD IF NOT EXISTS	JobId 				ON TABLE UserJobSearchPredictedPreference TYPE		record<Job>;
	DEFINE FIELD IF NOT EXISTS	SiteKey 			ON TABLE UserJobSearchPredictedPreference TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Locale 				ON TABLE UserJobSearchPredictedPreference TYPE		string;
	DEFINE FIELD IF NOT EXISTS	JobKeyword		ON TABLE UserJobSearchPredictedPreference TYPE		record<PreferenceKeyword>;
	DEFINE FIELD IF NOT EXISTS	Score					ON TABLE UserJobSearchPredictedPreference TYPE		number;
	DEFINE FIELD IF NOT EXISTS	Count					ON TABLE UserJobSearchPredictedPreference TYPE		number;
	`
	_, err := sd.Query(query, nil)
	return err
}
