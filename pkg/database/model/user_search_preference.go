// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	"github.com/samber/lo"
	surrealdb "github.com/surrealdb/surrealdb.go"
)

type UserSearchPreferenceModel struct {
	Id       string   `json:"id"`
	UserId   string   `json:"user_id"`
	JobId    string   `json:"job_id"`
	Keywords []string `json:"keywords"`
}

func (m *UserSearchPreferenceModel) ToProto() protos.UserSearchPreference {
	return protos.UserSearchPreference{
		RecordId: m.Id,
		UserId:   m.UserId,
		JobId:    m.JobId,
		Keywords: []*protos.PreferenceKeyword{},
	}
}

func (m *UserSearchPreferenceModel) FromProto(p *protos.UserSearchPreference) {
	m.Id = p.RecordId
	m.UserId = p.UserId
	m.JobId = p.JobId
	m.Keywords = lo.Map(p.Keywords, func(x *protos.PreferenceKeyword, _ int) string { return x.KwId })
}

func (m *UserSearchPreferenceModel) GetModel(db *surrealdb.DB) (*protos.UserSearchPreference, error) {
	result, err := db.Query(
		fmt.Sprintf(`SELECT *, (SELECT * FROM PreferenceKeyword WHERE KwId INSIDE $parent.Keywords) AS Keywords
		FROM UserSearchPreference:%s;`, m.Id), nil)

	if err != nil {
		return nil, err
	}

	var data *protos.UserSearchPreference
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return nil, err
	}
	return data, nil
}

func (m *UserSearchPreferenceModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	result, err := sd.Create("UserSearchPreference", m)
	if err != nil {
		return err
	}
	var data *UserSearchPreferenceModel
	err = surrealdb.Unmarshal(result, data)
	if err != nil {
		return err
	}
	if data != nil {
		m.Id = data.Id
	}
	return nil
}

func (m *UserSearchPreferenceModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("UserSearchPreference:%s", m.Id), m)
	return err
}

func (m *UserSearchPreferenceModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	query := `
DEFINE TABLE IF NOT EXISTS  UserSearchPreference SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	UserId 		ON TABLE UserSearchPreference TYPE	record<UserAccount>;
	DEFINE FIELD IF NOT EXISTS	JobId 		ON TABLE UserSearchPreference TYPE	record<Job>;
	DEFINE FIELD IF NOT EXISTS	Keywords 	ON TABLE UserSearchPreference TYPE	array<record<PreferenceKeyword>>;
	`
	_, err := sd.Query(query, nil)
	return err
}
