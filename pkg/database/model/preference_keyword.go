// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"errors"
	"fmt"
	"job-seek/pkg/protos"
	"strconv"

	"github.com/k0kubun/pp/v3"
	"github.com/samber/lo"
	"gorm.io/gorm"
)

type PreferenceKeywordModel struct {
	gorm.Model
	UserID     *uint64           `json:"-" gorm:"default:null"`
	User       *UserAccountModel `gorm:"default:NULL,foreignKey:UserID,references:ID"`
	Keyword    string            `json:"keyword"`
	Value      string            `json:"value"`
	Type       string            `json:"type"`
	IsPositive bool              `json:"is_positive"`
}

func (PreferenceKeywordModel) TableName() string {
	return "preference_keyword"
}

func (m *PreferenceKeywordModel) ToProto() *protos.PreferenceKeyword {
	return &protos.PreferenceKeyword{
		KwId:       fmt.Sprintf("%d", m.ID),
		UserId:     fmt.Sprintf("%d", m.User.ID),
		Keyword:    m.Keyword,
		Value:      m.Value,
		Type:       m.Type,
		IsPositive: m.IsPositive,
	}
}

func (m *PreferenceKeywordModel) FromProto(p *protos.PreferenceKeyword) {
	idv, _ := strconv.Atoi(p.GetUserId())
	m.User = &UserAccountModel{}
	m.User.ID = uint(idv)
	m.Keyword = p.Keyword
	m.Value = p.Value
	m.Type = p.Type
	m.IsPositive = p.IsPositive
}

func (m *PreferenceKeywordModel) GetModel(db *gorm.DB) (*protos.PreferenceKeyword, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}

	// result :=
	if err := db.First(m).Error; err != nil {
		return nil, err
	}

	return m.ToProto(), nil

}

func (m *PreferenceKeywordModel) ListModel(db *gorm.DB) ([]*protos.PreferenceKeyword, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	// query := fmt.Sprintf(`
	// SELECT * , search::score(1) as score FROM PreferenceKeyword WHERE Value @1@ "%s" ORDER BY score DESC;
	// `, m.Value)

	var details []*PreferenceKeywordModel

	result := db.Find(&details)
	if result.Error != nil {
		return nil, result.Error
	}

	fun := lo.Map(details, func(item *PreferenceKeywordModel, index int) *protos.PreferenceKeyword {
		return item.ToProto()
	})
	return fun, nil
}

func (m *PreferenceKeywordModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	result := sd.Create(m)
	if result.Error != nil {
		return errors.Join(result.Error, pp.Errorf("result:", result))
	}
	pp.Println(result)

	return nil
}

func (m *PreferenceKeywordModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	result := sd.Save(m)
	if result.Error != nil {
		return errors.Join(result.Error, pp.Errorf("result:", result))
	}
	return nil
}

func (m *PreferenceKeywordModel) DeleteModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if m.ID == 0 {
		return fmt.Errorf("ID is empty")
	}
	if err := sd.Delete(m).Error; err != nil {
		return err
	}
	return nil
}

func (PreferenceKeywordModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	return sd.AutoMigrate(&PreferenceKeywordModel{})
}
