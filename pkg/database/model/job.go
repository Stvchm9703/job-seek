// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"

	surrealdb "github.com/surrealdb/surrealdb.go"
	// "job-seek/pkg/config"
	// "job-seek/pkg/database"
	"job-seek/pkg/protos"
)

type JobModel struct {
	PostId         string   `json:"post_id"`
	PostTitle      string   `json:"post_title"`
	PostUrl        string   `json:"post_url"`
	PayRange       string   `json:"pay_range"`
	DebugText      string   `json:"debug_text"`
	HittedKeywords []string `json:"hitted_keywords"`
	Score          int      `json:"score,omitempty"`
	Role           string   `json:"role"`
	WorkType       string   `json:"work_type"`
	CompanyDetail  string   `json:"company_detail,omitempty"`
	Locations      string   `json:"locations"`
	ExpiringDate   string   `json:"expiring_date"`
}

func (m *JobModel) ToProto() protos.Job {
	score := int32(m.Score)
	return protos.Job{
		PostId:         m.PostId,
		PostTitle:      m.PostTitle,
		PostUrl:        m.PostUrl,
		PayRange:       m.PayRange,
		DebugText:      m.DebugText,
		HittedKeywords: m.HittedKeywords,
		Score:          &score,
		Role:           m.Role,
		WorkType:       m.WorkType,
		CompanyDetail:  nil,
		Locations:      m.Locations,
		ExpiringDate:   m.ExpiringDate,
	}
}

func (m *JobModel) FromProto(p *protos.Job) {
	m.PostId = p.PostId
	m.PostTitle = p.PostTitle
	m.PostUrl = p.PostUrl
	m.PayRange = p.PayRange
	m.DebugText = p.DebugText
	m.HittedKeywords = p.HittedKeywords
	m.Score = int(p.GetScore())
	m.Role = p.Role
	m.WorkType = p.WorkType
	m.CompanyDetail = p.CompanyDetail.ReferenceId
	m.Locations = p.Locations
	m.ExpiringDate = p.ExpiringDate
}

func (m *JobModel) GetModel(db *surrealdb.DB) (*protos.Job, error) {
	result, err := db.Query(fmt.Sprintf(`
	SELECT *, (SELECT * FROM CompanyDetail WHERE ReferenceId = $parent.CompanyDetail) AS CompanyDetail
	FROM Job:%s;`, m.PostId), nil)

	if err != nil {
		return nil, err
	}

	var job *protos.Job
	err = surrealdb.Unmarshal(result, job)
	if err != nil {
		return nil, err
	}

	return job, nil

}

func (m *JobModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Create(fmt.Sprintf("Job:%s", m.PostId), m)
	return err
}

func (m *JobModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("Job:%s", m.PostId), m)
	return err
}

func (m *JobModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	query := `
-- Table definition
DEFINE TABLE IF NOT EXISTS Job SCHEMAFULL;
-- Field definition
	DEFINE FIELD IF NOT EXISTS	PostId 					ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	PostTitle				ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	PostUrl 				ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	PayRange 				ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	DebugText 			ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	HittedKeywords 	ON TABLE Job TYPE		array<string>;
	DEFINE FIELD IF NOT EXISTS	Score 					ON TABLE Job TYPE		number;
	DEFINE FIELD IF NOT EXISTS	Role 					ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	WorkType 				ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	CompanyDetail 	ON TABLE Job TYPE		record<CompanyDetail>;
	DEFINE FIELD IF NOT EXISTS	Locations 			ON TABLE Job TYPE		string;
	DEFINE FIELD IF NOT EXISTS	ExpiringDate 		ON TABLE Job TYPE		string;
-- Index definition
	DEFINE INDEX IF NOT EXISTS	id							ON TABLE Job COLUMNS PostId UNIQUE;
-- END OF table definition
		`
	_, err := sd.Query(query, nil)
	return err

}
