// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"errors"
	"fmt"
	"strings"

	"gorm.io/gorm"

	// "job-seek/pkg/config"
	// "job-seek/pkg/database"
	"job-seek/pkg/protos"
)

type JobModel struct {
	gorm.Model
	PostId          string              `json:"post_id"`
	PostTitle       string              `json:"post_title"`
	PostUrl         string              `json:"post_url"`
	PayRange        string              `json:"pay_range"`
	DebugText       string              `json:"debug_text"`
	HittedKeywords  string              `json:"hitted_keywords"`
	Score           int                 `json:"score,omitempty"`
	Role            string              `json:"role"`
	WorkType        string              `json:"work_type"`
	CompanyDetailID *uint64             `json:"-" gorm:"default:null"`
	CompanyDetail   *CompanyDetailModel `gorm:"default:NULL,foreignKey:CompanyDetailID,references:ID,OnDelete:SET NULL;"`
	Locations       string              `json:"locations"`
	ExpiringDate    string              `json:"expiring_date"`
}

func (JobModel) TableName() string {
	return "job"
}

// survey_user_preference
// type JobUnmarshalModel struct {
// 	Id             string              `json:"id"`
// 	PostId         string              `json:"PostId"`
// 	PostTitle      string              `json:"PostTitle"`
// 	PostUrl        string              `json:"PostUrl"`
// 	PayRange       string              `json:"PayRange"`
// 	DebugText      string              `json:"DebugText"`
// 	HittedKeywords []string            `json:"HittedKeywords"`
// 	Score          int                 `json:"Score,omitempty"`
// 	Role           string              `json:"Role"`
// 	WorkType       string              `json:"WorkType"`
// 	CompanyDetail  *CompanyDetailModel `json:"CompanyDetail,omitempty"`
// 	Locations      string              `json:"Locations"`
// 	ExpiringDate   string              `json:"ExpiringDate"`
// }

// func (m *JobUnmarshalModel) ToProto() *protos.Job {
// 	score := int32(m.Score)
// 	var companyProto *protos.CompanyDetail = nil
// 	if m.CompanyDetail != nil {
// 		companyProto = m.CompanyDetail.ToProto()
// 	}
// 	return &protos.Job{
// 		PostId:         m.PostId,
// 		PostTitle:      m.PostTitle,
// 		PostUrl:        m.PostUrl,
// 		PayRange:       m.PayRange,
// 		DebugText:      m.DebugText,
// 		HittedKeywords: m.HittedKeywords,
// 		Score:          &score,
// 		Role:           m.Role,
// 		WorkType:       m.WorkType,
// 		CompanyDetail:  companyProto,
// 		Locations:      m.Locations,
// 		ExpiringDate:   m.ExpiringDate,
// 	}
// }

func (m *JobModel) ToProto() *protos.Job {
	score := int32(m.Score)
	return &protos.Job{
		PostId:         m.PostId,
		PostTitle:      m.PostTitle,
		PostUrl:        m.PostUrl,
		PayRange:       m.PayRange,
		DebugText:      m.DebugText,
		HittedKeywords: strings.Split(m.HittedKeywords, ", "),
		Score:          &score,
		Role:           m.Role,
		WorkType:       m.WorkType,
		CompanyDetail:  m.CompanyDetail.ToProto(),
		Locations:      m.Locations,
		ExpiringDate:   m.ExpiringDate,
	}
}

func (m *JobModel) FromProto(p *protos.Job) {
	m.PostId = p.PostId
	m.PostTitle = p.PostTitle
	m.PostUrl = p.PostUrl
	m.PayRange = p.PayRange
	m.DebugText = p.DebugText
	m.HittedKeywords = strings.Join(p.HittedKeywords, ", ")
	m.Score = int(p.GetScore())
	m.Role = p.Role
	m.WorkType = p.WorkType
	// m.CompanyDetail = "CompanyDetail:" + p.CompanyDetail.ReferenceId
	m.CompanyDetail = &CompanyDetailModel{
		ReferenceId: p.CompanyDetail.ReferenceId,
	}
	m.Locations = p.Locations
	m.ExpiringDate = p.ExpiringDate
}

func (m *JobModel) GetModel(db *gorm.DB) (*protos.Job, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	result := db.First(m)
	if result.Error != nil {
		return nil, result.Error
	}
	return m.ToProto(), nil
}

func (m *JobModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	// fmt.Println("CreateModel")
	// pp.Println(m)
	if m.PostId == "" || m.PostTitle == "" {
		return fmt.Errorf("empty data")
	}
	result := sd.Create(m)
	if result.Error != nil {
		return errors.New(result.Error.Error())
	}
	return nil
}

func (m *JobModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	result := sd.Save(m)
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (JobModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	return sd.AutoMigrate(&JobModel{})
}
