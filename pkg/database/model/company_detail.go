// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	schema "job-seek/pkg/database/schema"
	"job-seek/pkg/protos"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

type CompanyDetailModel struct {
	schema.DataModelImpl
	ReferenceId  string   `json:"reference_id" surrealdb:"mapTo:id,primaryId"`
	Name         string   `json:"name" surrealdb:"skipUpdate"`
	Url          string   `json:"url"`
	Linkedin     string   `json:"linkedin"`
	Description  string   `json:"description"`
	Industry     string   `json:"industry"`
	JobPosted    int      `json:"job_posted"`
	GroupSize    string   `json:"group_size"`
	HeadQuarters string   `json:"head_quarters"`
	Specialties  []string `json:"specialties"`
	Locations    string   `json:"locations"`
	LastUpdate   string   `json:"last_update" surrealdb:"autoUpdateTime"`
}

func (m *CompanyDetailModel) ToProto() protos.CompanyDetail {
	groupSize := protos.CompanySize(protos.CompanySize_value[m.GroupSize])
	return protos.CompanyDetail{
		ReferenceId:  m.ReferenceId,
		Name:         m.Name,
		Url:          m.Url,
		Linkedin:     m.Linkedin,
		Description:  m.Description,
		Industry:     m.Industry,
		JobPosted:    int32(m.JobPosted),
		GroupSize:    groupSize,
		HeadQuarters: m.HeadQuarters,
		Specialties:  m.Specialties,
		Locations:    m.Locations,
		LastUpdate:   m.LastUpdate,
	}
}

func (m *CompanyDetailModel) FromProto(p *protos.CompanyDetail) {
	m.ReferenceId = p.ReferenceId
	m.Name = p.Name
	m.Url = p.Url
	m.Linkedin = p.Linkedin
	m.Description = p.Description
	m.Industry = p.Industry
	m.JobPosted = int(p.JobPosted)
	m.GroupSize = p.GroupSize.String()
	m.HeadQuarters = p.HeadQuarters
	m.Specialties = p.Specialties
	m.Locations = p.Locations
}

func (m *CompanyDetailModel) GetModel(db *surrealdb.DB) (*protos.CompanyDetail, error) {
	result, err := db.Select(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId))

	if err != nil {
		return nil, err
	}

	var job *protos.CompanyDetail
	err = surrealdb.Unmarshal(result, job)
	if err != nil {
		return nil, err
	}

	return job, nil

}

func (m *CompanyDetailModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	// 	query := `
	// INSERT INTO CompanyDetail:$ReferenceId
	//     (ReferenceId, Name, Url, Linkedin, Description, Industry, JobPosted, GroupSize, HeadQuarters, Specialties, Locations)
	// VALUES
	//     ($ReferenceId, $Name, $Url, $Linkedin, $Description, $Industry, $JobPosted, $GroupSize, $HeadQuarters, $Specialties, $Locations )
	// ON DUPLICATE KEY UPDATE
	//     Url = $input.Url,
	//     Linkedin = $input.Linkedin,
	//     Description = $input.Description,
	//     Industry = $input.Industry,
	//     JobsPosted = $input.JobsPosted,
	//     GroupSize = $input.GroupSize,
	//     HeadQuarters = $input.HeadQuarters,
	//     Specialties = $input.Specialties,
	//     Locations = $input.Locations,
	// ;;
	// 	`
	_, err := sd.Create(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	return err
}

func (m *CompanyDetailModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	return err
}

func (m CompanyDetailModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	query := `
DEFINE TABLE IF NOT EXISTS CompanyDetail SCHEMAFULL;
	DEFINE FIELD IF NOT EXISTS	ReferenceId 		ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Name						ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Url							ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Linkedin				ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Description			ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Industry				ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	JobPosted				ON TABLE CompanyDetail TYPE		number;
	DEFINE FIELD IF NOT EXISTS	GroupSize				ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	HeadQuarters		ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS	Specialties			ON TABLE CompanyDetail TYPE		array<string>;
	DEFINE FIELD IF NOT EXISTS	Locations				ON TABLE CompanyDetail TYPE		string;
	DEFINE FIELD IF NOT EXISTS 	LastUpdate			ON TABLE CompanyDetail TYPE		string;
	DEFINE INDEX IF NOT EXISTS	id							ON TABLE CompanyDetail COLUMNS ReferenceId UNIQUE;
	DEFINE EVENT IF NOT EXISTS UpdateHook ON TABLE CompanyDetail 
		WHEN $event = "CREATE" OR $event = "INSERT"
		THEN (
			UPDATE CompanyDetail SET LastUpdate = time::format(time::now(),"%+") 
				WHERE id = $after.post_id
		);;
		`

	_, err := sd.Query(query, nil)
	return err

}
