// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

type CompanyDetailModel struct {
	ReferenceId  string   `json:"reference_id"`
	Name         string   `json:"name"`
	Url          string   `json:"url"`
	Linkedin     string   `json:"linkedin"`
	Description  string   `json:"description"`
	Industry     string   `json:"industry"`
	JobPosted    int      `json:"job_posted"`
	GroupSize    string   `json:"group_size"`
	HeadQuarters string   `json:"head_quarters"`
	Specialties  []string `json:"specialties"`
	Locations    string   `json:"locations"`
}

func (m *CompanyDetailModel) ToProto() protos.CompanyDetail {
	groupSize := protos.CompanySize(protos.CompanySize_value[m.GroupSize])
	return protos.CompanyDetail{
		ReferenceId:  m.ReferenceId,
		Name:         m.Name,
		Url:          m.Url,
		Linkedin:     m.Linkedin,
		Description:  m.Description,
		Industry:     m.Industry,
		JobPosted:    int32(m.JobPosted),
		GroupSize:    groupSize,
		HeadQuarters: m.HeadQuarters,
		Specialties:  m.Specialties,
		Locations:    m.Locations,
	}
}

func (m *CompanyDetailModel) FromProto(p *protos.CompanyDetail) {
	m.ReferenceId = p.ReferenceId
	m.Name = p.Name
	m.Url = p.Url
	m.Linkedin = p.Linkedin
	m.Description = p.Description
	m.Industry = p.Industry
	m.JobPosted = int(p.JobPosted)
	m.GroupSize = p.GroupSize.String()
	m.HeadQuarters = p.HeadQuarters
	m.Specialties = p.Specialties
	m.Locations = p.Locations
}

func (m *CompanyDetailModel) GetModel(db *surrealdb.DB) (*protos.CompanyDetail, error) {
	result, err := db.Select(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId))

	if err != nil {
		return nil, err
	}

	var job *protos.CompanyDetail
	err = surrealdb.Unmarshal(result, job)
	if err != nil {
		return nil, err
	}

	return job, nil

}

func (m *CompanyDetailModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Create(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	return err
}

func (m *CompanyDetailModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("CompanyDetail:%s", m.ReferenceId), m)
	return err
}
