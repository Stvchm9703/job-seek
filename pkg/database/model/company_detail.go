// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"errors"
	"fmt"
	"job-seek/pkg/protos"
	"strings"

	"github.com/k0kubun/pp/v3"
	"gorm.io/gorm"
)

type CompanyDetailModel struct {
	gorm.Model
	ReferenceId  string
	Name         string
	Url          string
	Linkedin     string
	Description  string
	Industry     string
	JobPosted    int
	GroupSize    string
	HeadQuarters string
	Specialties  string
	Locations    string
}

func (CompanyDetailModel) TableName() string {
	return "company_detail"
}

func (m *CompanyDetailModel) ToProto() *protos.CompanyDetail {
	groupSize := protos.CompanySize(protos.CompanySize_value[m.GroupSize])
	return &protos.CompanyDetail{
		// Id:           m.Id,
		ReferenceId:  m.ReferenceId,
		Name:         m.Name,
		Url:          m.Url,
		Linkedin:     m.Linkedin,
		Description:  m.Description,
		Industry:     m.Industry,
		JobPosted:    int32(m.JobPosted),
		GroupSize:    groupSize,
		HeadQuarters: m.HeadQuarters,
		Specialties:  strings.Split(m.Specialties, ", "),
		Locations:    m.Locations,
	}
}

func (m *CompanyDetailModel) FromProto(p *protos.CompanyDetail) {

	m.ReferenceId = p.ReferenceId
	m.Name = p.Name
	m.Url = p.Url
	m.Linkedin = p.Linkedin
	m.Description = p.Description
	m.Industry = p.Industry
	m.JobPosted = int(p.JobPosted)
	m.GroupSize = p.GroupSize.String()
	m.HeadQuarters = p.HeadQuarters
	m.Specialties = strings.Join(p.Specialties, ", ")
	m.Locations = p.Locations
}

func (m *CompanyDetailModel) GetModel(db *gorm.DB) (*protos.CompanyDetail, error) {
	if db == nil {
		return nil, fmt.Errorf("database connection is nil")
	}
	var result CompanyDetailModel
	db.First(&result, m.ReferenceId)

	return result.ToProto(), nil
}

// func (m *CompanyDetailModel) ListModel(db *gorm.DB) (*protos.CompanyDetail, error) {
// 	query := fmt.Sprintf(`
// 	SELECT * , search::score(1) as score FROM CompanyDetail WHERE Name @1@ "%s" ORDER BY score DESC;
// 	`, m.Name)
// 	result, err := db.Query(query, nil)
// 	if err != nil {
// 		return nil, err
// 	}
// 	detail := new(CompanyDetailModel)
// 	err = surrealdb.Unmarshal(result, detail)

// 	if err != nil {
// 		return nil, errors.Join(fmt.Errorf("failed to unmarshal CompanyDetailModel"), err, pp.Errorf("result", result))
// 	}
// 	return detail.ToProto(), nil
// }

func (m *CompanyDetailModel) CreateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	if m.ReferenceId == "" {
		return fmt.Errorf("ReferenceId is empty")
	}

	result := sd.Create(m)
	if result.Error != nil {
		return errors.Join(result.Error, pp.Errorf("result:", result))
	}
	pp.Println(result)

	return nil
}

func (m *CompanyDetailModel) UpdateModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	result := sd.Save(m)

	if result.Error != nil {
		return errors.Join(result.Error, pp.Errorf("result:", result))
	}

	pp.Println(result)

	return nil
}

func (m CompanyDetailModel) DefineModel(sd *gorm.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	return sd.AutoMigrate(&CompanyDetailModel{})

}
