// Path: job-seek/pkg/database/model/
// code generated by tools/generate_db_model_query/main.go

package model

import (
	"fmt"
	"job-seek/pkg/protos"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

type JobApplyModel struct {
	JobId       string `json:"job_id"`
	UserId      string `json:"user_id"`
	Status      string `json:"status,omitempty"`
	CreatedAt   string `json:"created_at,omitempty"`
	UpdatedAt   string `json:"updated_at,omitempty"`
	DeletedAt   string `json:"deleted_at,omitempty"`
	CoverLetter string `json:"cover_letter,omitempty"`
	CvContent   string `json:"cv_content,omitempty"`
	CvFile      []byte `json:"cv_file,omitempty"`
	Message     string `json:"message,omitempty"`
}

func (m *JobApplyModel) ToProto() protos.JobApply {
	var status = protos.JobStatus(protos.JobStatus_value[m.Status])

	return protos.JobApply{
		JobId:       m.JobId,
		UserId:      m.UserId,
		Status:      &status,
		CreatedAt:   &m.CreatedAt,
		UpdatedAt:   &m.UpdatedAt,
		CoverLetter: &m.CoverLetter,
		CvContent:   &m.CvContent,
		CvFile:      m.CvFile,
		Job:         nil,
		DeletedAt:   &m.DeletedAt,
		Message:     &m.Message,
	}
}

func (m *JobApplyModel) FromProto(p *protos.JobApply) {
	m.JobId = p.JobId
	m.UserId = p.UserId
	m.Status = p.GetStatus().String()
	m.CreatedAt = p.GetCreatedAt()
	m.UpdatedAt = p.GetUpdatedAt()
	m.CoverLetter = p.GetCoverLetter()
	m.CvContent = p.GetCvContent()
	m.CvFile = p.GetCvFile()
	m.DeletedAt = p.GetDeletedAt()
	m.Message = p.GetMessage()
}

func (m *JobApplyModel) GetModel(db *surrealdb.DB) (*protos.JobApply, error) {
	result, err := db.Query(`
  SELECT *, (SELECT * FROM Job WHERE PostId = $parent.JobId) AS Job
  FROM JobApply:[$user_id,$job_id];
  `, map[string]interface{}{
		"user_id": m.UserId,
		"job_id":  m.JobId,
	})

	if err != nil {
		return nil, err
	}

	var job *protos.JobApply
	err = surrealdb.Unmarshal(result, job)
	if err != nil {
		return nil, err
	}

	return job, nil

}

func (m *JobApplyModel) CreateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Create(fmt.Sprintf("JobApply:[%s,%s]", m.UserId, m.JobId), m)
	return err
}

func (m *JobApplyModel) UpdateModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}
	_, err := sd.Update(fmt.Sprintf("JobApply:[%s,%s]", m.UserId, m.JobId), m)
	return err
}

func (m JobApplyModel) DefineModel(sd *surrealdb.DB) error {
	if sd == nil {
		return fmt.Errorf("database connection is nil")
	}

	query := `
-- Table definition
DEFINE TABLE IF NOT EXISTS JobApply SCHEMAFULL;
-- Field definition
  DEFINE FIELD IF NOT EXISTS JobId      ON TABLE JobApply TYPE  record<Job>;
  DEFINE FIELD IF NOT EXISTS UserId     ON TABLE JobApply TYPE  record<UserAccount>;
  DEFINE FIELD IF NOT EXISTS Status     ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS CreatedAt    ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS UpdatedAt    ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS DeletedAt    ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS CoverLetter   ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS CVContent    ON TABLE JobApply TYPE  string;
  DEFINE FIELD IF NOT EXISTS CvFile     ON TABLE JobApply TYPE  bytes;
  DEFINE FIELD IF NOT EXISTS Message     ON TABLE JobApply TYPE  string;
-- Index definition
  DEFINE INDEX IF NOT EXISTS id       ON TABLE JobApply COLUMNS ReferenceId UNIQUE;
-- Event definition
  DEFINE EVENT IF NOT EXISTS CreateHook ON TABLE JobBookmark 
    WHEN $event = "CREATE" OR $event = "INSERT"
    THEN (
      UPDATE JobBookmark SET CreatedAt = time::format(time::now(),"%+") 
        WHERE JobId = $after.JobId AND UserId = $after.UserId
    );
  DEFINE EVENT IF NOT EXISTS UpdateHook ON TABLE JobBookmark 
    WHEN $event = "CREATE" OR $event = "INSERT"
    THEN (
      UPDATE JobBookmark SET UpdatedAt = time::format(time::now(),"%+") 
        WHERE JobId = $after.JobId AND UserId = $after.UserId
    );
-- END OF table definition
`
	_, err := sd.Query(query, nil)
	return err
}
