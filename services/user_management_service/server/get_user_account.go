// source: UserManagementService.proto
// Version: 1.0.0

package server

import (
	"context"
	"job-seek/pkg/database/model"
	"job-seek/pkg/protos"

	"github.com/sirupsen/logrus"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// GetUserAccount implements GetUserAccount from UserManagementServiceServer
// generated by protoc-gen-go-grpc.UserManagementServiceServer
func (s UserManagementServiceServerImpl) GetUserAccount(ctx context.Context, req *protos.GetUserRequest) (*protos.UserAccount, error) {
	s.log.WithFields(logrus.Fields{
		"request": req,
	}).Info("GetUserAccount")

	if err := checkFetchUserAccountEmptyFields(req); err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("Failed to fetch user account, empty fields")
		return nil, err
	}

	user, err := s.fetchUserAccount(req.GetUserId(), req.GetUserName(), req.GetUserEmail())
	if err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("Failed to fetch user account")
		return nil, status.Errorf(codes.Internal, "Failed to fetch user account: %v", err)
	}

	return user, nil

	// return nil, status.Errorf(codes.Unimplemented, "method  GetUserAccount  not implemented")
}

func checkFetchUserAccountEmptyFields(req *protos.GetUserRequest) error {
	// You can use a database query or any other method to check the email
	// Return true if the email is registered, false otherwise

	if req.GetUserId() == "" && req.GetUserName() == "" && req.GetUserEmail() == "" && req.GetUserPhone() == "" {
		return status.Errorf(codes.InvalidArgument, "reference field cannot be empty")
	}
	if req.GetUserPassword() == "" {
		return status.Errorf(codes.InvalidArgument, "Password cannot be empty")
	}
	return nil
}

func (s UserManagementServiceServerImpl) fetchUserAccount(userId string, userName string, userEmail string) (*protos.UserAccount, error) {
	// You can use a database query or any other method to save the user
	// Return an error if the save operation fails, nil otherwise
	instanceModel := &model.UserAccountModel{
		// UserId:    userId,
		ID:        userId,
		UserName:  userName,
		UserEmail: userEmail,
	}
	model, err := instanceModel.GetModelByWildKey(s.dbClient)

	if err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("Failed to fetch user account")
		return nil, err
	}
	return model, nil
	// Save the user account to the database
}
