// source: UserManagementService.proto
// Version: 1.0.0

package server

import (
	"context"
	"job-seek/pkg/database/model"
	"job-seek/pkg/protos"

	logrus "github.com/sirupsen/logrus"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// DeleteUserProfile implements DeleteUserProfile from UserManagementServiceServer
// generated by protoc-gen-go-grpc.UserManagementServiceServer
func (s UserManagementServiceServerImpl) DeleteUserProfile(ctx context.Context, req *protos.GetUserRequest) (*protos.UserResponse, error) {
	s.log.WithFields(logrus.Fields{
		"request": req,
	}).Info("DeleteUserProfile")

	if req.UserId == nil && req.ReferenceId == nil {
		s.log.WithFields(logrus.Fields{
			"request": req,
		}).Error("Failed to delete user profile, empty fields")
		return nil, status.Errorf(codes.InvalidArgument, "Failed to delete user profile")
	}

	// Delete the user profile

	// todo()
	return nil, status.Errorf(codes.Unimplemented, "method  DeleteUserProfile  not implemented")
}

func (s UserManagementServiceServerImpl) deleteUserProfileByProfileId(profielId string) (*protos.UserResponse, error) {
	// You can use a database query or any other method to delete the user
	// Return an error if the delete operation fails, nil otherwise
	// todo()
	instanceModel := &model.UserProfileModel{
		Id: profielId,
	}
	user, err := instanceModel.GetModel(s.dbClient)
	if err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("Failed to fetch user profile")
		return nil, err
	}

	err = instanceModel.DeleteModel(s.dbClient)
	if err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("Failed to delete user profile")
		return nil, err
	}

	return &protos.UserResponse{
		UserId: user.Id,
	}, nil

	// return nil, status.Errorf(codes.Unimplemented, "method  deleteUserProfile  not implemented")
}
