// source: JobSearchService.proto
// Version: 1.0.0

package server

import (
	"context"
	"job-seek/pkg/database/model"
	"job-seek/pkg/protos"
	"job-seek/pkg/request"
	linkedin "job-seek/pkg/request/linkedin_search"

	logrus "github.com/sirupsen/logrus"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// GetCompanyDetail implements GetCompanyDetail from JobSearchServiceServer
// generated by protoc-gen-go-grpc.JobSearchServiceServer
func (s JobSearchServiceServerImpl) GetCompanyDetail(ctx context.Context, req *protos.CompanyDetailRequest) (*protos.CompanyDetail, error) {

	s.mut.TryLock()
	defer s.mut.Unlock()
	s.log.WithFields(logrus.Fields{
		"method": "GetCompanyDetail",
		"req":    req,
	}).Info("GetCompanyDetail called")

	var companyDetail *protos.CompanyDetail
	var err error
	companyId := req.GetReferenceId()

	if companyId != "" {
		companyDetail, err = s.getCompanyDetailFromDB(companyId)
		if err != nil {
			s.log.WithFields(logrus.Fields{
				"error": err,
			}).Error("fail to fetch company detail from cache")
			return nil, status.Errorf(codes.Internal, "fail to fetch company detail from DB")
		}
		return companyDetail, nil
	}

	companyName := req.GetName()
	if companyName == "" {
		s.log.Error("fail to fetch company detail from cache, company name is required")
		return nil, status.Errorf(codes.InvalidArgument, "company name is required")
	}
	// todo: call the search engine to get company detail

	// from nil data, scrape the company detail from the linkedin profile
	companyDetail, err = s.getCompanyDetailFromAPI(companyName)
	if err != nil {
		s.log.WithFields(logrus.Fields{
			"error": err,
		}).Error("fail to fetch company detail from api")
		return nil, status.Errorf(codes.Internal, "Failed to get company detail from API")
	}

	var jobPostCount int
	jobPostCount, err = linkedin.GetCompanyPostListForApi(&s.config.SeekService, companyId)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "Failed to get company post list from API")
	}

	companyDetail.JobPosted = int32(jobPostCount)

	return companyDetail, nil

}

func (s JobSearchServiceServerImpl) getCompanyDetailFromDB(company_id string) (*protos.CompanyDetail, error) {
	companyModel := model.CompanyDetailModel{
		ReferenceId: company_id,
	}
	s.log.WithFields(map[string]interface{}{
		"company_id": company_id,
		"model":      companyModel,
		"method":     "getCompanyDetailFromDB",
	}).Trace("called getCompanyDetailFromDB")
	data, err := companyModel.GetModel(s.dbClient)
	if err != nil {
		s.log.WithFields(map[string]interface{}{
			"company_id": company_id,
			"error":      err,
			"method":     "getCompanyDetailFromDB",
		}).Error("Failed to get company detail from DB")
		return nil, err
	}
	s.log.WithFields(map[string]interface{}{
		"company_id": company_id,
		"model":      companyModel,
		"data":       data,
		"method":     "getCompanyDetailFromDB",
	}).Trace("getCompanyDetailFromDB result")
	return data, nil
}

func (s JobSearchServiceServerImpl) getCompanyDetailFromAPI(company_name string) (*protos.CompanyDetail, error) {

	companyDetail := request.SeekCompanyDetails{
		Name: company_name,
	}
	s.log.WithFields(map[string]interface{}{
		"company_name": company_name,
		"model":        companyDetail,
		"method":       "getCompanyDetailFromAPI",
	}).Trace("called getCompanyDetailFromAPI")
	collector := linkedin.CreateSearchEngineCollector()
	_, err := linkedin.SearchCompanyForApi(collector, &s.config.YahooSearch, &companyDetail)
	if err != nil {
		s.log.WithFields(map[string]interface{}{
			"company_name": company_name,
			"config":       s.config.YahooSearch,
			"error":        err,
			"method":       "getCompanyDetailFromAPI",
		}).Error("Failed to search company from API")
		return nil, err
	}
	s.log.WithFields(map[string]interface{}{
		"company_name": company_name,
		"model":        companyDetail,
		"method":       "getCompanyDetailFromAPI",
	}).Trace("END OF getCompanyDetailFromAPI")

	return companyDetail.ToProto(), nil
}

func (s JobSearchServiceServerImpl) getCompanyDetailFromAPICreate(companyDetail *request.SeekCompanyDetails) (*protos.CompanyDetail, error) {

	// companyDetail := request.SeekCompanyDetails{
	// 	Name: company_name,
	// }
	s.log.WithFields(map[string]interface{}{
		"company_name": companyDetail.Name,
		"model":        companyDetail,
		"method":       "getCompanyDetailFromAPICreate",
	}).Trace("called getCompanyDetailFromAPICreate")
	collector := linkedin.CreateSearchEngineCollector()
	_, err := linkedin.SearchCompanyForApi(collector, &s.config.YahooSearch, companyDetail)
	if err != nil {
		s.log.WithFields(map[string]interface{}{
			"company_name": companyDetail.Name,
			"config":       s.config.YahooSearch,
			"error":        err,
			"method":       "getCompanyDetailFromAPICreate",
		}).Error("Failed to search company from API")
		return nil, err
	}
	s.log.WithFields(map[string]interface{}{
		"company_name": companyDetail.Name,
		"model":        companyDetail,
		"method":       "getCompanyDetailFromAPICreate",
	}).Trace("END OF getCompanyDetailFromAPI")

	return companyDetail.ToProto(), nil
}

func (s JobSearchServiceServerImpl) storeCompanyDetailToDB(companyDetail *protos.CompanyDetail) error {
	companyModel := model.CompanyDetailModel{}

	companyModel.FromProto(companyDetail)
	s.log.WithFields(map[string]interface{}{
		"company_detail": companyDetail,
		"model":          companyModel,
		"method":         "storeCompanyDetailToDB",
	}).Trace("start storeCompanyDetailToDB")
	err := companyModel.CreateModel(s.dbClient)
	if err != nil {
		s.log.WithFields(map[string]interface{}{
			"company_detail": companyDetail,
			"error":          err,
			"method":         "storeCompanyDetailToDB",
		}).Error("Failed to save company detail to DB")
		return err
	}

	s.log.WithFields(map[string]interface{}{
		"method": "storeCompanyDetailToDB",
	}).Trace("stored storeCompanyDetailToDB")
	return nil
}
